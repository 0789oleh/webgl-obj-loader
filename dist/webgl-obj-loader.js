(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("OBJ", [], factory);
	else if(typeof exports === 'object')
		exports["OBJ"] = factory();
	else
		root["OBJ"] = factory();
})(typeof self !== 'undefined' ? self : this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 3);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} /**
                                                                                                                                                                                                                                  * A class to represent the memory layout for a vertex attribute array. Used by
                                                                                                                                                                                                                                  * {@link Mesh}'s TBD(...) method to generate a packed array from mesh data.
                                                                                                                                                                                                                                  * <p>
                                                                                                                                                                                                                                  * Layout can sort of be thought of as a C-style struct declaration.
                                                                                                                                                                                                                                  * {@link Mesh}'s TBD(...) method will use the {@link Layout} instance to
                                                                                                                                                                                                                                  * pack an array in the given attribute order.
                                                                                                                                                                                                                                  * <p>
                                                                                                                                                                                                                                  * Layout also is very helpful when calling a WebGL context's
                                                                                                                                                                                                                                  * <code>vertexAttribPointer</code> method. If you've created a buffer using
                                                                                                                                                                                                                                  * a Layout instance, then the same Layout instance can be used to determine
                                                                                                                                                                                                                                  * the size, type, normalized, stride, and offset parameters for
                                                                                                                                                                                                                                  * <code>vertexAttribPointer</code>.
                                                                                                                                                                                                                                  * <p>
                                                                                                                                                                                                                                  * For example:
                                                                                                                                                                                                                                  * <pre><code>
                                                                                                                                                                                                                                  *
                                                                                                                                                                                                                                  * const index = glctx.getAttribLocation(shaderProgram, "pos");
                                                                                                                                                                                                                                  * glctx.vertexAttribPointer(
                                                                                                                                                                                                                                  *   layout.position.size,
                                                                                                                                                                                                                                  *   glctx[layout.position.type],
                                                                                                                                                                                                                                  *   layout.position.normalized,
                                                                                                                                                                                                                                  *   layout.position.stride,
                                                                                                                                                                                                                                  *   layout.position.offset);
                                                                                                                                                                                                                                  * </code></pre>
                                                                                                                                                                                                                                  * @see {@link Mesh}
                                                                                                                                                                                                                                  */var
Layout =
/**
          * Create a Layout object. This constructor will throw if any duplicate
          * attributes are given.
          * @param {Array} ...attributes - An ordered list of attributes that
          *        describe the desired memory layout for each vertex attribute.
          *        <p>
          *
          * @see {@link Mesh}
          */exports.Layout =
function Layout() {_classCallCheck(this, Layout);for (var _len = arguments.length, attributes = Array(_len), _key = 0; _key < _len; _key++) {attributes[_key] = arguments[_key];}
    this.attributes = attributes;
    var offset = 0;
    var maxStrideMultiple = 0;var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {
        for (var _iterator = attributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var attribute = _step.value;
            if (this[attribute.key]) {
                throw new DuplicateAttributeException(attribute);
            }
            // Add padding to satisfy WebGL's requirement that all
            // vertexAttribPointer calls have an offset that is a multiple of
            // the type size.
            if (offset % attribute.sizeOfType !== 0) {
                offset += attribute.sizeOfType - offset % attribute.sizeOfType;
                console.warn("Layout requires padding before " + attribute.key + " attribute");
            }
            this[attribute.key] = {
                attribute: attribute,
                size: attribute.size,
                type: attribute.type,
                normalized: attribute.normalized,
                offset: offset };

            offset += attribute.sizeInBytes;
            maxStrideMultiple = Math.max(maxStrideMultiple, attribute.sizeOfType);
        }
        // Add padding to the end to satisfy WebGL's requirement that all
        // vertexAttribPointer calls have a stride that is a multiple of the
        // type size. Because we're putting differently sized attributes into
        // the same buffer, it must be padded to a multiple of the largest
        // type size.
    } catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}if (offset % maxStrideMultiple !== 0) {
        offset += maxStrideMultiple - offset % maxStrideMultiple;
        console.warn("Layout requires padding at the back");
    }
    this.stride = offset;var _iteratorNormalCompletion2 = true;var _didIteratorError2 = false;var _iteratorError2 = undefined;try {
        for (var _iterator2 = attributes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {var _attribute = _step2.value;
            this[_attribute.key].stride = this.stride;
        }} catch (err) {_didIteratorError2 = true;_iteratorError2 = err;} finally {try {if (!_iteratorNormalCompletion2 && _iterator2.return) {_iterator2.return();}} finally {if (_didIteratorError2) {throw _iteratorError2;}}}
};


/**
    * An exception for when two or more of the same attributes are found in the
    * same layout.
    * @private
    */var
DuplicateAttributeException =
/**
                               * Create a DuplicateAttributeException
                               * @param {Attribute} attribute - The attribute that was found more than
                               *        once in the {@link Layout}
                               */
function DuplicateAttributeException(attribute) {_classCallCheck(this, DuplicateAttributeException);
    this.message = "found duplicate attribute: " + attribute.key;
};


/**
    * Represents how a vertex attribute should be packed into an buffer.
    * @private
    */var
Attribute =
/**
             * Create an attribute. Do not call this directly, use the predefined
             * constants.
             * @param {string} key - The name of this attribute as if it were a key in
             *        an Object. Use the camel case version of the upper snake case
             *        const name.
             * @param {number} size - The number of components per vertex attribute.
             *        Must be 1, 2, 3, or 4.
             * @param {string} type - The data type of each component for this
             *        attribute. Possible values:<br/>
             *        "BYTE": signed 8-bit integer, with values in [-128, 127]<br/>
             *        "SHORT": signed 16-bit integer, with values in
             *            [-32768, 32767]<br/>
             *        "UNSIGNED_BYTE": unsigned 8-bit integer, with values in
             *            [0, 255]<br/>
             *        "UNSIGNED_SHORT": unsigned 16-bit integer, with values in
             *            [0, 65535]<br/>
             *        "FLOAT": 32-bit floating point number
             * @param {boolean} normalized - Whether integer data values should be
             *        normalized when being casted to a float.<br/>
             *        If true, signed integers are normalized to [-1, 1].<br/>
             *        If true, unsigned integers are normalized to [0, 1].<br/>
             *        For type "FLOAT", this parameter has no effect.
             */
function Attribute(key, size, type) {var normalized = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;_classCallCheck(this, Attribute);
    this.key = key;
    this.size = size;
    this.type = type;
    this.normalized = false;
    this.sizeOfType = sizeInBytesOfType(type);
    this.sizeInBytes = this.sizeOfType * size;
};


/**
    * @param {string} type - A type accepted by {@link Attribute}.
    * @return The size (in bytes) for a given type.
    * @see {@link Attribute}
    * @private
    */
function sizeInBytesOfType(type) {
    switch (type) {
        case "BYTE":
        case "UNSIGNED_BYTE":
            return 1;
        case "SHORT":
        case "UNSIGNED_SHORT":
            return 2;
        case "FLOAT":
            return 4;}

}

// Geometry attributes
/**
 * Attribute layout to pack a vertex's x, y, & z as floats
 *
 * @see {@link Layout}
 */
Layout.POSITION = new Attribute("position", 3, "FLOAT");

/**
                                                          * Attribute layout to pack a vertex's normal's x, y, & z as floats
                                                          *
                                                          * @see {@link Layout}
                                                          */
Layout.NORMAL = new Attribute("normal", 3, "FLOAT");

/**
                                                      * Attribute layout to pack a vertex's normal's x, y, & z as floats.
                                                      * <p>
                                                      * This value will be computed on-the-fly based on the texture coordinates.
                                                      * If no texture coordinates are available, the generated value will default to
                                                      * 0, 0, 0.
                                                      *
                                                      * @see {@link Layout}
                                                      */
Layout.TANGENT = new Attribute("tangent", 3, "FLOAT");

/**
                                                        * Attribute layout to pack a vertex's normal's bitangent x, y, & z as floats.
                                                        * <p>
                                                        * This value will be computed on-the-fly based on the texture coordinates.
                                                        * If no texture coordinates are available, the generated value will default to
                                                        * 0, 0, 0.
                                                        * @see {@link Layout}
                                                        */
Layout.BITANGENT = new Attribute("bitangent", 3, "FLOAT");

/**
                                                            * Attribute layout to pack a vertex's texture coordinates' u & v as floats
                                                            *
                                                            * @see {@link Layout}
                                                            */
Layout.UV = new Attribute("uv", 2, "FLOAT");

// Material attributes

/**
 * Attribute layout to pack an unsigned short to be interpreted as a the index
 * into a {@link Mesh}'s materials list.
 * <p>
 * The intention of this value is to send all of the {@link Mesh}'s materials
 * into multiple shader uniforms and then reference the current one by this
 * vertex attribute.
 * <p>
 * example glsl code:
 *
 * <pre><code>
 *  // this is bound using MATERIAL_INDEX
 *  attribute int materialIndex;
 *
 *  struct Material {
 *    vec3 diffuse;
 *    vec3 specular;
 *    vec3 specularExponent;
 *  };
 *
 *  uniform Material materials[MAX_MATERIALS];
 *
 *  // ...
 *
 *  vec3 diffuse = materials[materialIndex];
 *
 * </code></pre>
 * TODO: More description & test to make sure subscripting by attributes even
 * works for webgl
 *
 * @see {@link Layout}
 */
Layout.MATERIAL_INDEX = new Attribute("materialIndex", 1, "SHORT");
Layout.MATERIAL_ENABLED = new Attribute("materialEnabled", 1, "UNSIGNED_SHORT");
Layout.AMBIENT = new Attribute("ambient", 3, "FLOAT");
Layout.DIFFUSE = new Attribute("diffuse", 3, "FLOAT");
Layout.SPECULAR = new Attribute("specular", 3, "FLOAT");
Layout.SPECULAR_EXPONENT = new Attribute("specularExponent", 3, "FLOAT");
Layout.EMISSIVE = new Attribute("emissive", 3, "FLOAT");
Layout.TRANSMISSION_FILTER = new Attribute("transmissionFilter", 3, "FLOAT");
Layout.DISSOLVE = new Attribute("dissolve", 1, "FLOAT");
Layout.ILLUMINATION = new Attribute("illumination", 1, "UNSIGNED_SHORT");
Layout.REFRACTION_INDEX = new Attribute("refractionIndex", 1, "FLOAT");
Layout.SHARPNESS = new Attribute("sharpness", 1, "FLOAT");
Layout.MAP_DIFFUSE = new Attribute("mapDiffuse", 1, "SHORT");
Layout.MAP_AMBIENT = new Attribute("mapAmbient", 1, "SHORT");
Layout.MAP_SPECULAR = new Attribute("mapSpecular", 1, "SHORT");
Layout.MAP_SPECULAR_EXPONENT = new Attribute("mapSpecularExponent", 1, "SHORT");
Layout.MAP_DISSOLVE = new Attribute("mapDissolve", 1, "SHORT");
Layout.ANTI_ALIASING = new Attribute("antiAliasing", 1, "UNSIGNED_SHORT");
Layout.MAP_BUMP = new Attribute("mapBump", 1, "SHORT");
Layout.MAP_DISPLACEMENT = new Attribute("mapDisplacement", 1, "SHORT");
Layout.MAP_DECAL = new Attribute("mapDecal", 1, "SHORT");
Layout.MAP_EMISSIVE = new Attribute("mapEmissive", 1, "SHORT");

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();var _layout = __webpack_require__(0);function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {arr2[i] = arr[i];}return arr2;} else {return Array.from(arr);}}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}}

/**
he main Mesh class. The constructor will parse through the OBJ file data
and collect the vertex, vertex normal, texture, and face information. This
information can then be used later on when creating your VBOs. See
initMeshBuffers for an example of how to use the newly created Mesh
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   */var
Mesh = function () {
    /**
                     * Create a Mesh
                     * @param {String} objectData - a string representation of an OBJ file with
                     *     newlines preserved.
                     * @param {Object} options - a JS object containing valid options. See class
                     *     documentation for options.
                     * @param {bool} options.enableWTextureCoord - Texture coordinates can have
                     *     an optional "w" coordinate after the u and v coordinates. This extra
                     *     value can be used in order to perform fancy transformations on the
                     *     textures themselves. Default is to truncate to only the u an v
                     *     coordinates. Passing true will provide a default value of 0 in the
                     *     event that any or all texture coordinates don't provide a w value.
                     *     Always use the textureStride attribute in order to determine the
                     *     stride length of the texture coordinates when rendering the element
                     *     array.
                     * @param {bool} options.calcTangentsAndBitangents - Calculate the tangents
                     *     and bitangents when loading of the OBJ is completed. This adds two new
                     *     attributes to the Mesh instance: `tangents` and `bitangents`.
                     */
    function Mesh(objectData, options) {_classCallCheck(this, Mesh);
        options = options || {};
        options.materials = options.materials || {};
        options.enableWTextureCoord = !!options.enableWTextureCoord;
        options.indicesPerMaterial = !!options.indicesPerMaterial;

        var self = this;
        // the list of unique vertex, normal, texture, attributes
        self.vertices = [];
        self.vertexNormals = [];
        self.textures = [];
        // the indicies to draw the faces
        self.indices = [];
        self.textureStride = options.enableWTextureCoord ? 3 : 2;

        /*
                                                                  The OBJ file format does a sort of compression when saving a model in a
                                                                  program like Blender. There are at least 3 sections (4 including textures)
                                                                  within the file. Each line in a section begins with the same string:
                                                                    * 'v': indicates vertex section
                                                                    * 'vn': indicates vertex normal section
                                                                    * 'f': indicates the faces section
                                                                    * 'vt': indicates vertex texture section (if textures were used on the model)
                                                                  Each of the above sections (except for the faces section) is a list/set of
                                                                  unique vertices.
                                                                   Each line of the faces section contains a list of
                                                                  (vertex, [texture], normal) groups.
                                                                   **Note:** The following documentation will use a capital "V" Vertex to
                                                                  denote the above (vertex, [texture], normal) groups whereas a lowercase
                                                                  "v" vertex is used to denote an X, Y, Z coordinate.
                                                                   Some examples:
                                                                      // the texture index is optional, both formats are possible for models
                                                                      // without a texture applied
                                                                      f 1/25 18/46 12/31
                                                                      f 1//25 18//46 12//31
                                                                       // A 3 vertex face with texture indices
                                                                      f 16/92/11 14/101/22 1/69/1
                                                                       // A 4 vertex face
                                                                      f 16/92/11 40/109/40 38/114/38 14/101/22
                                                                   The first two lines are examples of a 3 vertex face without a texture applied.
                                                                  The second is an example of a 3 vertex face with a texture applied.
                                                                  The third is an example of a 4 vertex face. Note: a face can contain N
                                                                  number of vertices.
                                                                   Each number that appears in one of the groups is a 1-based index
                                                                  corresponding to an item from the other sections (meaning that indexing
                                                                  starts at one and *not* zero).
                                                                   For example:
                                                                      `f 16/92/11` is saying to
                                                                        - take the 16th element from the [v] vertex array
                                                                        - take the 92nd element from the [vt] texture array
                                                                        - take the 11th element from the [vn] normal array
                                                                      and together they make a unique vertex.
                                                                  Using all 3+ unique Vertices from the face line will produce a polygon.
                                                                   Now, you could just go through the OBJ file and create a new vertex for
                                                                  each face line and WebGL will draw what appears to be the same model.
                                                                  However, vertices will be overlapped and duplicated all over the place.
                                                                   Consider a cube in 3D space centered about the origin and each side is
                                                                  2 units long. The front face (with the positive Z-axis pointing towards
                                                                  you) would have a Top Right vertex (looking orthogonal to its normal)
                                                                  mapped at (1,1,1) The right face would have a Top Left vertex (looking
                                                                  orthogonal to its normal) at (1,1,1) and the top face would have a Bottom
                                                                  Right vertex (looking orthogonal to its normal) at (1,1,1). Each face
                                                                  has a vertex at the same coordinates, however, three distinct vertices
                                                                  will be drawn at the same spot.
                                                                   To solve the issue of duplicate Vertices (the `(vertex, [texture], normal)`
                                                                  groups), while iterating through the face lines, when a group is encountered
                                                                  the whole group string ('16/92/11') is checked to see if it exists in the
                                                                  packed.hashindices object, and if it doesn't, the indices it specifies
                                                                  are used to look up each attribute in the corresponding attribute arrays
                                                                  already created. The values are then copied to the corresponding unpacked
                                                                  array (flattened to play nice with WebGL's ELEMENT_ARRAY_BUFFER indexing),
                                                                  the group string is added to the hashindices set and the current unpacked
                                                                  index is used as this hashindices value so that the group of elements can
                                                                  be reused. The unpacked index is incremented. If the group string already
                                                                  exists in the hashindices object, its corresponding value is the index of
                                                                  that group and is appended to the unpacked indices array.
                                                                  */











        this.name = "";
        var verts = [];
        var vertNormals = [];
        var textures = [];
        var unpacked = {};
        var materialNamesByIndex = [];
        var materialIndicesByName = {};
        // keep track of what material we've seen last
        var currentMaterialIndex = -1;
        // keep track if pushing indices by materials - otherwise not used
        var currentObjectByMaterialIndex = 0;
        // unpacking stuff
        unpacked.verts = [];
        unpacked.norms = [];
        unpacked.textures = [];
        unpacked.hashindices = {};
        unpacked.indices = [[]];
        unpacked.materialIndices = [];
        unpacked.index = 0;

        var VERTEX_RE = /^v\s/;
        var NORMAL_RE = /^vn\s/;
        var TEXTURE_RE = /^vt\s/;
        var FACE_RE = /^f\s/;
        var WHITESPACE_RE = /\s+/;
        var USE_MATERIAL_RE = /^usemtl/;

        // array of lines separated by the newline
        var lines = objectData.split("\n");

        for (var i = 0; i < lines.length; i++) {
            var line = lines[i].trim();
            if (!line || line.startsWith("#")) {
                continue;
            }
            var elements = line.split(WHITESPACE_RE);
            elements.shift();

            if (VERTEX_RE.test(line)) {
                // if this is a vertex
                verts.push.apply(verts, _toConsumableArray(elements));
            } else if (NORMAL_RE.test(line)) {
                // if this is a vertex normal
                vertNormals.push.apply(vertNormals, _toConsumableArray(elements));
            } else if (TEXTURE_RE.test(line)) {
                var coords = elements;
                // by default, the loader will only look at the U and V
                // coordinates of the vt declaration. So, this truncates the
                // elements to only those 2 values. If W texture coordinate
                // support is enabled, then the texture coordinate is
                // expected to have three values in it.
                if (elements.length > 2 && !options.enableWTextureCoord) {
                    coords = elements.slice(0, 2);
                } else if (elements.length === 2 && options.enableWTextureCoord) {
                    // If for some reason W texture coordinate support is enabled
                    // and only the U and V coordinates are given, then we supply
                    // the default value of 0 so that the stride length is correct
                    // when the textures are unpacked below.
                    coords.push(0);
                }
                textures.push.apply(textures, _toConsumableArray(coords));
            } else if (USE_MATERIAL_RE.test(line)) {
                var materialName = elements[0];

                // check to see if we've ever seen it before
                if (!(materialName in materialIndicesByName)) {
                    // new material we've never seen
                    materialNamesByIndex.push(materialName);
                    materialIndicesByName[materialName] = materialNamesByIndex.length - 1;
                    // push new array into indices
                    if (options.indicesPerMaterial) {
                        // already contains an array at index zero, don't add
                        if (materialIndicesByName[materialName] > 0) {
                            unpacked.indices.push([]);
                        }
                    }
                }
                // keep track of the current material index
                currentMaterialIndex = materialIndicesByName[materialName];
                // update current index array
                if (options.indicesPerMaterial) {
                    currentObjectByMaterialIndex = currentMaterialIndex;
                }
            } else if (FACE_RE.test(line)) {
                // if this is a face
                /*
                split this face into an array of Vertex groups
                for example:
                   f 16/92/11 14/101/22 1/69/1
                becomes:
                  ['16/92/11', '14/101/22', '1/69/1'];
                */
                var quad = false;
                for (var j = 0, eleLen = elements.length; j < eleLen; j++) {
                    // Triangulating quads
                    // quad: 'f v0/t0/vn0 v1/t1/vn1 v2/t2/vn2 v3/t3/vn3/'
                    // corresponding triangles:
                    //      'f v0/t0/vn0 v1/t1/vn1 v2/t2/vn2'
                    //      'f v2/t2/vn2 v3/t3/vn3 v0/t0/vn0'
                    if (j === 3 && !quad) {
                        // add v2/t2/vn2 in again before continuing to 3
                        j = 2;
                        quad = true;
                    }
                    var hash0 = elements[0] + "," + currentMaterialIndex;
                    var hash = elements[j] + "," + currentMaterialIndex;
                    if (hash in unpacked.hashindices) {
                        unpacked.indices[currentObjectByMaterialIndex].push(unpacked.hashindices[hash]);
                    } else {
                        /*
                            Each element of the face line array is a Vertex which has its
                            attributes delimited by a forward slash. This will separate
                            each attribute into another array:
                                '19/92/11'
                            becomes:
                                Vertex = ['19', '92', '11'];
                            where
                                Vertex[0] is the vertex index
                                Vertex[1] is the texture index
                                Vertex[2] is the normal index
                             Think of faces having Vertices which are comprised of the
                             attributes location (v), texture (vt), and normal (vn).
                             */
                        var vertex = elements[j].split("/");
                        // it's possible for faces to only specify the vertex
                        // and the normal. In this case, vertex will only have
                        // a length of 2 and not 3 and the normal will be the
                        // second item in the list with an index of 1.
                        var normalIndex = vertex.length - 1;
                        /*
                                                              The verts, textures, and vertNormals arrays each contain a
                                                              flattend array of coordinates.
                                                               Because it gets confusing by referring to Vertex and then
                                                              vertex (both are different in my descriptions) I will explain
                                                              what's going on using the vertexNormals array:
                                                               vertex[2] will contain the one-based index of the vertexNormals
                                                              section (vn). One is subtracted from this index number to play
                                                              nice with javascript's zero-based array indexing.
                                                               Because vertexNormal is a flattened array of x, y, z values,
                                                              simple pointer arithmetic is used to skip to the start of the
                                                              vertexNormal, then the offset is added to get the correct
                                                              component: +0 is x, +1 is y, +2 is z.
                                                               This same process is repeated for verts and textures.
                                                              */




                        // Vertex position
                        unpacked.verts.push(+verts[(vertex[0] - 1) * 3 + 0]);
                        unpacked.verts.push(+verts[(vertex[0] - 1) * 3 + 1]);
                        unpacked.verts.push(+verts[(vertex[0] - 1) * 3 + 2]);
                        // Vertex textures
                        if (textures.length) {
                            var stride = options.enableWTextureCoord ? 3 : 2;
                            unpacked.textures.push(+textures[(vertex[1] - 1) * stride + 0]);
                            unpacked.textures.push(+textures[(vertex[1] - 1) * stride + 1]);
                            if (options.enableWTextureCoord) {
                                unpacked.textures.push(+textures[(vertex[1] - 1) * stride + 2]);
                            }
                        }
                        // Vertex normals
                        unpacked.norms.push(+vertNormals[(vertex[normalIndex] - 1) * 3 + 0]);
                        unpacked.norms.push(+vertNormals[(vertex[normalIndex] - 1) * 3 + 1]);
                        unpacked.norms.push(+vertNormals[(vertex[normalIndex] - 1) * 3 + 2]);
                        // Vertex material indices
                        unpacked.materialIndices.push(currentMaterialIndex);
                        // add the newly created Vertex to the list of indices
                        unpacked.hashindices[hash] = unpacked.index;
                        unpacked.indices[currentObjectByMaterialIndex].push(unpacked.hashindices[hash]);
                        // increment the counter
                        unpacked.index += 1;
                    }
                    if (j === 3 && quad) {
                        // add v0/t0/vn0 onto the second triangle
                        unpacked.indices[currentObjectByMaterialIndex].push(unpacked.hashindices[hash0]);
                    }
                }
            }
        }
        self.vertices = unpacked.verts;
        self.vertexNormals = unpacked.norms;
        self.textures = unpacked.textures;
        self.vertexMaterialIndices = unpacked.materialIndices;
        self.indices = options.indicesPerMaterial ? unpacked.indices : unpacked.indices[currentObjectByMaterialIndex];

        self.materialNames = materialNamesByIndex;
        self.materialIndices = materialIndicesByName;
        self.materialsByIndex = {};

        if (options.calcTangentsAndBitangents) {
            this.calculateTangentsAndBitangents();
        }
    }

    /**
       * Calculates the tangents and bitangents of the mesh that forms an orthogonal basis together with the
       * normal in the direction of the texture coordinates. These are useful for setting up the TBN matrix
       * when distorting the normals through normal maps.
       * Method derived from: http://www.opengl-tutorial.org/intermediate-tutorials/tutorial-13-normal-mapping/
       *
       * This method requires the normals and texture coordinates to be parsed and set up correctly.
       * Adds the tangents and bitangents as members of the class instance.
       */_createClass(Mesh, [{ key: "calculateTangentsAndBitangents", value: function calculateTangentsAndBitangents()
        {
            console.assert(
            this.vertices &&
            this.vertices.length &&
            this.vertexNormals &&
            this.vertexNormals.length &&
            this.textures &&
            this.textures.length,
            "Missing attributes for calculating tangents and bitangents");


            var unpacked = {};
            unpacked.tangents = [].concat(_toConsumableArray(new Array(this.vertices.length))).map(function (v) {return 0;});
            unpacked.bitangents = [].concat(_toConsumableArray(new Array(this.vertices.length))).map(function (v) {return 0;});

            // Loop through all faces in the whole mesh
            var indices = void 0;
            // If sorted by material
            if (Array.isArray(this.indices[0])) {
                indices = [].concat.apply([], this.indices);
            } else {
                indices = this.indices;
            }

            var vertices = this.vertices;
            var normals = this.vertexNormals;
            var uvs = this.textures;

            for (var i = 0; i < indices.length; i += 3) {
                var i0 = indices[i + 0];
                var i1 = indices[i + 1];
                var i2 = indices[i + 2];

                var x_v0 = vertices[i0 * 3 + 0];
                var y_v0 = vertices[i0 * 3 + 1];
                var z_v0 = vertices[i0 * 3 + 2];

                var x_uv0 = uvs[i0 * 2 + 0];
                var y_uv0 = uvs[i0 * 2 + 1];

                var x_v1 = vertices[i1 * 3 + 0];
                var y_v1 = vertices[i1 * 3 + 1];
                var z_v1 = vertices[i1 * 3 + 2];

                var x_uv1 = uvs[i1 * 2 + 0];
                var y_uv1 = uvs[i1 * 2 + 1];

                var x_v2 = vertices[i2 * 3 + 0];
                var y_v2 = vertices[i2 * 3 + 1];
                var z_v2 = vertices[i2 * 3 + 2];

                var x_uv2 = uvs[i2 * 2 + 0];
                var y_uv2 = uvs[i2 * 2 + 1];

                var x_deltaPos1 = x_v1 - x_v0;
                var y_deltaPos1 = y_v1 - y_v0;
                var z_deltaPos1 = z_v1 - z_v0;

                var x_deltaPos2 = x_v2 - x_v0;
                var y_deltaPos2 = y_v2 - y_v0;
                var z_deltaPos2 = z_v2 - z_v0;

                var x_uvDeltaPos1 = x_uv1 - x_uv0;
                var y_uvDeltaPos1 = y_uv1 - y_uv0;

                var x_uvDeltaPos2 = x_uv2 - x_uv0;
                var y_uvDeltaPos2 = y_uv2 - y_uv0;

                var rInv = x_uvDeltaPos1 * y_uvDeltaPos2 - y_uvDeltaPos1 * x_uvDeltaPos2;
                var r = 1.0 / (Math.abs(rInv < 0.0001) ? 1.0 : rInv);

                // Tangent
                var x_tangent = (x_deltaPos1 * y_uvDeltaPos2 - x_deltaPos2 * y_uvDeltaPos1) * r;
                var y_tangent = (y_deltaPos1 * y_uvDeltaPos2 - y_deltaPos2 * y_uvDeltaPos1) * r;
                var z_tangent = (z_deltaPos1 * y_uvDeltaPos2 - z_deltaPos2 * y_uvDeltaPos1) * r;

                // Bitangent
                var x_bitangent = (x_deltaPos2 * x_uvDeltaPos1 - x_deltaPos1 * x_uvDeltaPos2) * r;
                var y_bitangent = (y_deltaPos2 * x_uvDeltaPos1 - y_deltaPos1 * x_uvDeltaPos2) * r;
                var z_bitangent = (z_deltaPos2 * x_uvDeltaPos1 - z_deltaPos1 * x_uvDeltaPos2) * r;

                // Gram-Schmidt orthogonalize
                //t = glm::normalize(t - n * glm:: dot(n, t));
                var x_n0 = normals[i0 * 3 + 0];
                var y_n0 = normals[i0 * 3 + 1];
                var z_n0 = normals[i0 * 3 + 2];

                var x_n1 = normals[i1 * 3 + 0];
                var y_n1 = normals[i1 * 3 + 1];
                var z_n1 = normals[i1 * 3 + 2];

                var x_n2 = normals[i2 * 3 + 0];
                var y_n2 = normals[i2 * 3 + 1];
                var z_n2 = normals[i2 * 3 + 2];

                // Tangent
                var n0_dot_t = x_tangent * x_n0 + y_tangent * y_n0 + z_tangent * z_n0;
                var n1_dot_t = x_tangent * x_n1 + y_tangent * y_n1 + z_tangent * z_n1;
                var n2_dot_t = x_tangent * x_n2 + y_tangent * y_n2 + z_tangent * z_n2;

                var x_resTangent0 = x_tangent - x_n0 * n0_dot_t;
                var y_resTangent0 = y_tangent - y_n0 * n0_dot_t;
                var z_resTangent0 = z_tangent - z_n0 * n0_dot_t;

                var x_resTangent1 = x_tangent - x_n1 * n1_dot_t;
                var y_resTangent1 = y_tangent - y_n1 * n1_dot_t;
                var z_resTangent1 = z_tangent - z_n1 * n1_dot_t;

                var x_resTangent2 = x_tangent - x_n2 * n2_dot_t;
                var y_resTangent2 = y_tangent - y_n2 * n2_dot_t;
                var z_resTangent2 = z_tangent - z_n2 * n2_dot_t;

                var magTangent0 = Math.sqrt(
                x_resTangent0 * x_resTangent0 + y_resTangent0 * y_resTangent0 + z_resTangent0 * z_resTangent0);

                var magTangent1 = Math.sqrt(
                x_resTangent1 * x_resTangent1 + y_resTangent1 * y_resTangent1 + z_resTangent1 * z_resTangent1);

                var magTangent2 = Math.sqrt(
                x_resTangent2 * x_resTangent2 + y_resTangent2 * y_resTangent2 + z_resTangent2 * z_resTangent2);


                // Bitangent
                var n0_dot_bt = x_bitangent * x_n0 + y_bitangent * y_n0 + z_bitangent * z_n0;
                var n1_dot_bt = x_bitangent * x_n1 + y_bitangent * y_n1 + z_bitangent * z_n1;
                var n2_dot_bt = x_bitangent * x_n2 + y_bitangent * y_n2 + z_bitangent * z_n2;

                var x_resBitangent0 = x_bitangent - x_n0 * n0_dot_bt;
                var y_resBitangent0 = y_bitangent - y_n0 * n0_dot_bt;
                var z_resBitangent0 = z_bitangent - z_n0 * n0_dot_bt;

                var x_resBitangent1 = x_bitangent - x_n1 * n1_dot_bt;
                var y_resBitangent1 = y_bitangent - y_n1 * n1_dot_bt;
                var z_resBitangent1 = z_bitangent - z_n1 * n1_dot_bt;

                var x_resBitangent2 = x_bitangent - x_n2 * n2_dot_bt;
                var y_resBitangent2 = y_bitangent - y_n2 * n2_dot_bt;
                var z_resBitangent2 = z_bitangent - z_n2 * n2_dot_bt;

                var magBitangent0 = Math.sqrt(
                x_resBitangent0 * x_resBitangent0 +
                y_resBitangent0 * y_resBitangent0 +
                z_resBitangent0 * z_resBitangent0);

                var magBitangent1 = Math.sqrt(
                x_resBitangent1 * x_resBitangent1 +
                y_resBitangent1 * y_resBitangent1 +
                z_resBitangent1 * z_resBitangent1);

                var magBitangent2 = Math.sqrt(
                x_resBitangent2 * x_resBitangent2 +
                y_resBitangent2 * y_resBitangent2 +
                z_resBitangent2 * z_resBitangent2);


                unpacked.tangents[i0 * 3 + 0] += x_resTangent0 / magTangent0;
                unpacked.tangents[i0 * 3 + 1] += y_resTangent0 / magTangent0;
                unpacked.tangents[i0 * 3 + 2] += z_resTangent0 / magTangent0;

                unpacked.tangents[i1 * 3 + 0] += x_resTangent1 / magTangent1;
                unpacked.tangents[i1 * 3 + 1] += y_resTangent1 / magTangent1;
                unpacked.tangents[i1 * 3 + 2] += z_resTangent1 / magTangent1;

                unpacked.tangents[i2 * 3 + 0] += x_resTangent2 / magTangent2;
                unpacked.tangents[i2 * 3 + 1] += y_resTangent2 / magTangent2;
                unpacked.tangents[i2 * 3 + 2] += z_resTangent2 / magTangent2;

                unpacked.bitangents[i0 * 3 + 0] += x_resBitangent0 / magBitangent0;
                unpacked.bitangents[i0 * 3 + 1] += y_resBitangent0 / magBitangent0;
                unpacked.bitangents[i0 * 3 + 2] += z_resBitangent0 / magBitangent0;

                unpacked.bitangents[i1 * 3 + 0] += x_resBitangent1 / magBitangent1;
                unpacked.bitangents[i1 * 3 + 1] += y_resBitangent1 / magBitangent1;
                unpacked.bitangents[i1 * 3 + 2] += z_resBitangent1 / magBitangent1;

                unpacked.bitangents[i2 * 3 + 0] += x_resBitangent2 / magBitangent2;
                unpacked.bitangents[i2 * 3 + 1] += y_resBitangent2 / magBitangent2;
                unpacked.bitangents[i2 * 3 + 2] += z_resBitangent2 / magBitangent2;

                // TODO: check handedness
            }

            this.tangents = unpacked.tangents;
            this.bitangents = unpacked.bitangents;
        }

        /**
           * @param {Layout} layout - A {@link Layout} object that describes the
           * desired memory layout of the generated buffer
           * @return {ArrayBuffer} The packed array in the ... TODO
           */ }, { key: "makeBufferData", value: function makeBufferData(
        layout) {
            var numItems = this.vertices.length / 3;
            var buffer = new ArrayBuffer(layout.stride * numItems);
            buffer.numItems = numItems;
            var dataView = new DataView(buffer);
            for (var i = 0, vertexOffset = 0; i < numItems; i++) {
                vertexOffset = i * layout.stride;
                // copy in the vertex data in the order and format given by the
                // layout param
                var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {for (var _iterator = layout.attributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var attribute = _step.value;
                        var offset = vertexOffset + layout[attribute.key].offset;
                        switch (attribute.key) {
                            case _layout.Layout.POSITION.key:
                                dataView.setFloat32(offset, this.vertices[i * 3], true);
                                dataView.setFloat32(offset + 4, this.vertices[i * 3 + 1], true);
                                dataView.setFloat32(offset + 8, this.vertices[i * 3 + 2], true);
                                break;
                            case _layout.Layout.UV.key:
                                dataView.setFloat32(offset, this.textures[i * 2], true);
                                dataView.setFloat32(offset + 4, this.vertices[i * 2 + 1], true);
                                break;
                            case _layout.Layout.NORMAL.key:
                                dataView.setFloat32(offset, this.vertexNormals[i * 3], true);
                                dataView.setFloat32(offset + 4, this.vertexNormals[i * 3 + 1], true);
                                dataView.setFloat32(offset + 8, this.vertexNormals[i * 3 + 2], true);
                                break;
                            case _layout.Layout.MATERIAL_INDEX.key:
                                dataView.setInt16(offset, this.vertexMaterialIndices[i], true);
                                break;
                            case _layout.Layout.AMBIENT.key:{
                                    var materialIndex = this.vertexMaterialIndices[i];
                                    var material = this.materialsByIndex[materialIndex];
                                    if (!material) {
                                        console.warn(
                                        'Material "' +
                                        this.materialNames[materialIndex] +
                                        '" not found in mesh. Did you forget to call addMaterialLibrary(...)?"');

                                        break;
                                    }
                                    dataView.setFloat32(offset, material.ambient[0], true);
                                    dataView.setFloat32(offset + 4, material.ambient[1], true);
                                    dataView.setFloat32(offset + 8, material.ambient[2], true);
                                    break;
                                }
                            case _layout.Layout.DIFFUSE.key:{
                                    var _materialIndex = this.vertexMaterialIndices[i];
                                    var _material = this.materialsByIndex[_materialIndex];
                                    if (!_material) {
                                        console.warn(
                                        'Material "' +
                                        this.materialNames[_materialIndex] +
                                        '" not found in mesh. Did you forget to call addMaterialLibrary(...)?"');

                                        break;
                                    }
                                    dataView.setFloat32(offset, _material.diffuse[0], true);
                                    dataView.setFloat32(offset + 4, _material.diffuse[1], true);
                                    dataView.setFloat32(offset + 8, _material.diffuse[2], true);
                                    break;
                                }
                            case _layout.Layout.SPECULAR.key:{
                                    var _materialIndex2 = this.vertexMaterialIndices[i];
                                    var _material2 = this.materialsByIndex[_materialIndex2];
                                    if (!_material2) {
                                        console.warn(
                                        'Material "' +
                                        this.materialNames[_materialIndex2] +
                                        '" not found in mesh. Did you forget to call addMaterialLibrary(...)?"');

                                        break;
                                    }
                                    dataView.setFloat32(offset, _material2.specular[0], true);
                                    dataView.setFloat32(offset + 4, _material2.specular[1], true);
                                    dataView.setFloat32(offset + 8, _material2.specular[2], true);
                                    break;
                                }
                            case _layout.Layout.SPECULAR_EXPONENT.key:{
                                    var _materialIndex3 = this.vertexMaterialIndices[i];
                                    var _material3 = this.materialsByIndex[_materialIndex3];
                                    if (!_material3) {
                                        console.warn(
                                        'Material "' +
                                        this.materialNames[_materialIndex3] +
                                        '" not found in mesh. Did you forget to call addMaterialLibrary(...)?"');

                                        break;
                                    }
                                    dataView.setFloat32(offset, _material3.specularExponent, true);
                                    break;
                                }
                            case _layout.Layout.EMISSIVE.key:{
                                    var _materialIndex4 = this.vertexMaterialIndices[i];
                                    var _material4 = this.materialsByIndex[_materialIndex4];
                                    if (!_material4) {
                                        console.warn(
                                        'Material "' +
                                        this.materialNames[_materialIndex4] +
                                        '" not found in mesh. Did you forget to call addMaterialLibrary(...)?"');

                                        break;
                                    }
                                    dataView.setFloat32(offset, _material4.emissive[0], true);
                                    dataView.setFloat32(offset + 4, _material4.emissive[1], true);
                                    dataView.setFloat32(offset + 8, _material4.emissive[2], true);
                                    break;
                                }
                            case _layout.Layout.TRANSMISSION_FILTER.key:{
                                    var _materialIndex5 = this.vertexMaterialIndices[i];
                                    var _material5 = this.materialsByIndex[_materialIndex5];
                                    if (!_material5) {
                                        console.warn(
                                        'Material "' +
                                        this.materialNames[_materialIndex5] +
                                        '" not found in mesh. Did you forget to call addMaterialLibrary(...)?"');

                                        break;
                                    }
                                    dataView.setFloat32(offset, _material5.transmissionFilter[0], true);
                                    dataView.setFloat32(offset + 4, _material5.transmissionFilter[1], true);
                                    dataView.setFloat32(offset + 8, _material5.transmissionFilter[2], true);
                                    break;
                                }
                            case _layout.Layout.DISSOLVE.key:{
                                    var _materialIndex6 = this.vertexMaterialIndices[i];
                                    var _material6 = this.materialsByIndex[_materialIndex6];
                                    if (!_material6) {
                                        console.warn(
                                        'Material "' +
                                        this.materialNames[_materialIndex6] +
                                        '" not found in mesh. Did you forget to call addMaterialLibrary(...)?"');

                                        break;
                                    }
                                    dataView.setFloat32(offset, _material6.dissolve, true);
                                    break;
                                }
                            case _layout.Layout.ILLUMINATION.key:{
                                    var _materialIndex7 = this.vertexMaterialIndices[i];
                                    var _material7 = this.materialsByIndex[_materialIndex7];
                                    if (!_material7) {
                                        console.warn(
                                        'Material "' +
                                        this.materialNames[_materialIndex7] +
                                        '" not found in mesh. Did you forget to call addMaterialLibrary(...)?"');

                                        break;
                                    }
                                    dataView.setInt16(offset, _material7.illumination, true);
                                    break;
                                }
                            case _layout.Layout.REFRACTION_INDEX.key:{
                                    var _materialIndex8 = this.vertexMaterialIndices[i];
                                    var _material8 = this.materialsByIndex[_materialIndex8];
                                    if (!_material8) {
                                        console.warn(
                                        'Material "' +
                                        this.materialNames[_materialIndex8] +
                                        '" not found in mesh. Did you forget to call addMaterialLibrary(...)?"');

                                        break;
                                    }
                                    dataView.setFloat32(offset, _material8.refractionIndex, true);
                                    break;
                                }
                            case _layout.Layout.SHARPNESS.key:{
                                    var _materialIndex9 = this.vertexMaterialIndices[i];
                                    var _material9 = this.materialsByIndex[_materialIndex9];
                                    if (!_material9) {
                                        console.warn(
                                        'Material "' +
                                        this.materialNames[_materialIndex9] +
                                        '" not found in mesh. Did you forget to call addMaterialLibrary(...)?"');

                                        break;
                                    }
                                    dataView.setFloat32(offset, _material9.sharpness, true);
                                    break;
                                }
                            case _layout.Layout.ANTI_ALIASING.key:{
                                    var _materialIndex10 = this.vertexMaterialIndices[i];
                                    var _material10 = this.materialsByIndex[_materialIndex10];
                                    if (!_material10) {
                                        console.warn(
                                        'Material "' +
                                        this.materialNames[_materialIndex10] +
                                        '" not found in mesh. Did you forget to call addMaterialLibrary(...)?"');

                                        break;
                                    }
                                    dataView.setInt16(offset, _material10.antiAliasing, true);
                                    break;
                                }}

                    }} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}
            }
            return buffer;
        } }, { key: "makeIndexBufferData", value: function makeIndexBufferData()

        {
            var buffer = new Uint16Array(this.indices);
            buffer.numItems = this.indices.length;
            return buffer;
        } }, { key: "addMaterialLibrary", value: function addMaterialLibrary(

        mtl) {
            for (var name in mtl.materials) {
                if (!(name in this.materialIndices)) {
                    // This material is not referenced by the mesh
                    continue;
                }

                var material = mtl.materials[name];

                // Find the material index for this material
                var materialIndex = this.materialIndices[material.name];

                // Put the material into the materialsByIndex object at the right
                // spot as determined when the obj file was parsed
                this.materialsByIndex[materialIndex] = material;
            }
        } }]);return Mesh;}();exports.default = Mesh;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });var _createClass = function () {function defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}return function (Constructor, protoProps, staticProps) {if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;};}();function _toArray(arr) {return Array.isArray(arr) ? arr : Array.from(arr);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError("Cannot call a class as a function");}} /**
he Material class.
var
Material =
/**
            * Constructor
            * @param {String} name the unique name of the material
            */exports.Material =
function Material(name) {_classCallCheck(this, Material);
    // the unique material ID.
    this.name = name;
    // The values for the following attibutes
    // are an array of R, G, B normalized values.
    // Ka - Ambient Reflectivity
    this.ambient = [0, 0, 0];
    // Kd - Defuse Reflectivity
    this.diffuse = [0, 0, 0];
    // Ks
    this.specular = [0, 0, 0];
    // Ke
    this.emissive = [0, 0, 0];
    // Tf
    this.transmissionFilter = [0, 0, 0];
    // d
    this.dissolve = 0;
    // valid range is between 0 and 1000
    this.specularExponent = 0;
    // either d or Tr; valid values are normalized
    this.transparency = 0;
    // illum - the enum of the illumination model to use
    this.illumination = 0;
    // Ni - Set to "normal" (air).
    this.refractionIndex = 1;
    // sharpness
    this.sharpness = 0;
    // map_Kd
    this.mapDiffuse = null;
    // map_Ka
    this.mapAmbient = null;
    // map_Ks
    this.mapSpecular = null;
    // map_Ns
    this.mapSpecularExponent = null;
    // map_d
    this.mapDissolve = null;
    // map_aat
    this.antiAliasing = false;
    // map_bump or bump
    this.mapBump = null;
    // disp
    this.mapDisplacement = null;
    // decal
    this.mapDecal = null;
    // map_Ke
    this.mapEmissive = null;
    // refl - when the reflection type is a cube, there will be multiple refl
    //        statements for each side of the cube. If it's a spherical
    //        reflection, there should only ever be one.
    this.mapReflections = [];
};


/**
    * https://en.wikipedia.org/wiki/Wavefront_.obj_file
    * http://paulbourke.net/dataformats/mtl/
    */var
MaterialLibrary = exports.MaterialLibrary = function () {
    /**
                                                          * Constructs the Material Parser
                                                          * @param {String} mtlData the MTL file contents
                                                          */
    function MaterialLibrary(mtlData) {_classCallCheck(this, MaterialLibrary);
        this.data = mtlData;
        this.currentMaterial = null;
        this.materials = {};

        this.parse();
    }

    /* eslint-disable camelcase */
    /* the function names here disobey camelCase conventions
                                    to make parsing/routing easier. see the parse function
                                    documentation for more information. */

    /**
                                                                            * Creates a new Material object and adds to the registry.
                                                                            * @param {string[]} tokens the tokens associated with the directive
                                                                            */_createClass(MaterialLibrary, [{ key: "parse_newmtl", value: function parse_newmtl(
        tokens) {
            var name = tokens[0];
            // console.info('Parsing new Material:', name);

            this.currentMaterial = new Material(name);
            this.materials[name] = this.currentMaterial;
        }

        /**
           * See the documenation for parse_Ka below for a better understanding.
           *
           * Given a list of possible color tokens, returns an array of R, G, and B
           * color values.
           *
           * @param {string[]} tokens the tokens associated with the directive
           * @return {*} a 3 element array containing the R, G, and B values
           * of the color.
           */ }, { key: "parseColor", value: function parseColor(
        tokens) {
            if (tokens[0] == "spectral") {
                console.error(
                "The MTL parser does not support spectral curve files. You will " +
                "need to convert the MTL colors to either RGB or CIEXYZ.");

                return;
            }

            if (tokens[0] == "xyz") {
                console.warn("TODO: convert XYZ to RGB");
                return;
            }

            // from my understanding of the spec, RGB values at this point
            // will either be 3 floats or exactly 1 float, so that's the check
            // that i'm going to perform here
            if (tokens.length == 3) {
                return tokens.map(parseFloat);
            }

            // Since tokens at this point has a length of 3, we're going to assume
            // it's exactly 1, skipping the check for 2.
            var value = parseFloat(tokens[0]);
            // in this case, all values are equivalent
            return [value, value, value];
        }

        /**
           * Parse the ambient reflectivity
           *
           * A Ka directive can take one of three forms:
           *   - Ka r g b
           *   - Ka spectral file.rfl
           *   - Ka xyz x y z
           * These three forms are mutually exclusive in that only one
           * declaration can exist per material. It is considered a syntax
           * error otherwise.
           *
           * The "Ka" form specifies the ambient reflectivity using RGB values.
           * The "g" and "b" values are optional. If only the "r" value is
           * specified, then the "g" and "b" values are assigned the value of
           * "r". Values are normally in the range 0.0 to 1.0. Values outside
           * of this range increase or decrease the reflectivity accordingly.
           *
           * The "Ka spectral" form specifies the ambient reflectivity using a
           * spectral curve. "file.rfl" is the name of the ".rfl" file containing
           * the curve data. "factor" is an optional argument which is a multiplier
           * for the values in the .rfl file and defaults to 1.0 if not specified.
           *
           * The "Ka xyz" form specifies the ambient reflectivity using CIEXYZ values.
           * "x y z" are the values of the CIEXYZ color space. The "y" and "z" arguments
           * are optional and take on the value of the "x" component if only "x" is
           * specified. The "x y z" values are normally in the range of 0.0 to 1.0 and
           * increase or decrease ambient reflectivity accordingly outside of that
           * range.
           *
           * @param {string[]} tokens the tokens associated with the directive
           */ }, { key: "parse_Ka", value: function parse_Ka(
        tokens) {
            this.currentMaterial.ambient = this.parseColor(tokens);
        }

        /**
           * Diffuse Reflectivity
           *
           * Similar to the Ka directive. Simply replace "Ka" with "Kd" and the rules
           * are the same
           *
           * @param {string[]} tokens the tokens associated with the directive
           */ }, { key: "parse_Kd", value: function parse_Kd(
        tokens) {
            this.currentMaterial.diffuse = this.parseColor(tokens);
        }

        /**
           * Spectral Reflectivity
           *
           * Similar to the Ka directive. Simply replace "Ks" with "Kd" and the rules
           * are the same
           *
           * @param {string[]} tokens the tokens associated with the directive
           */ }, { key: "parse_Ks", value: function parse_Ks(
        tokens) {
            this.currentMaterial.specular = this.parseColor(tokens);
        }

        /**
           * Emissive
           *
           * The amount and color of light emitted by the object.
           *
           * @param {string[]} tokens the tokens associated with the directive
           */ }, { key: "parse_Ke", value: function parse_Ke(
        tokens) {
            this.currentMaterial.emissive = this.parseColor(tokens);
        }

        /**
           * Transmission Filter
           *
           * Any light passing through the object is filtered by the transmission
           * filter, which only allows specific colors to pass through. For example, Tf
           * 0 1 0 allows all of the green to pass through and filters out all of the
           * red and blue.
           *
           * Similar to the Ka directive. Simply replace "Ks" with "Tf" and the rules
           * are the same
           *
           * @param {string[]} tokens the tokens associated with the directive
           */ }, { key: "parse_Tf", value: function parse_Tf(
        tokens) {
            this.currentMaterial.transmissionFilter = this.parseColor(tokens);
        }

        /**
           * Specifies the dissolve for the current material.
           *
           * Statement: d [-halo] `factor`
           *
           * Example: "d 0.5"
           *
           * The factor is the amount this material dissolves into the background. A
           * factor of 1.0 is fully opaque. This is the default when a new material is
           * created. A factor of 0.0 is fully dissolved (completely transparent).
           *
           * Unlike a real transparent material, the dissolve does not depend upon
           * material thickness nor does it have any spectral character. Dissolve works
           * on all illumination models.
           *
           * The dissolve statement allows for an optional "-halo" flag which indicates
           * that a dissolve is dependent on the surface orientation relative to the
           * viewer. For example, a sphere with the following dissolve, "d -halo 0.0",
           * will be fully dissolved at its center and will appear gradually more opaque
           * toward its edge.
           *
           * "factor" is the minimum amount of dissolve applied to the material. The
           * amount of dissolve will vary between 1.0 (fully opaque) and the specified
           * "factor". The formula is:
           *
           *    dissolve = 1.0 - (N*v)(1.0-factor)
           *
           * @param {string[]} tokens the tokens associated with the directive
           */ }, { key: "parse_d", value: function parse_d(
        tokens) {
            // this ignores the -halo option as I can't find any documentation on what
            // it's supposed to be.
            this.currentMaterial.dissolve = parseFloat(tokens.pop());
        }

        /**
           * The "illum" statement specifies the illumination model to use in the
           * material. Illumination models are mathematical equations that represent
           * various material lighting and shading effects.
           *
           * The illumination number can be a number from 0 to 10. The following are
           * the list of illumination enumerations and their summaries:
           * 0. Color on and Ambient off
           * 1. Color on and Ambient on
           * 2. Highlight on
           * 3. Reflection on and Ray trace on
           * 4. Transparency: Glass on, Reflection: Ray trace on
           * 5. Reflection: Fresnel on and Ray trace on
           * 6. Transparency: Refraction on, Reflection: Fresnel off and Ray trace on
           * 7. Transparency: Refraction on, Reflection: Fresnel on and Ray trace on
           * 8. Reflection on and Ray trace off
           * 9. Transparency: Glass on, Reflection: Ray trace off
           * 10. Casts shadows onto invisible surfaces
           *
           * Example: "illum 2" to specify the "Highlight on" model
           *
           * @param {string[]} tokens the tokens associated with the directive
           */ }, { key: "parse_illum", value: function parse_illum(
        tokens) {
            this.currentMaterial.illumination = parseInt(tokens[0]);
        }

        /**
           * Optical Density (AKA Index of Refraction)
           *
           * Statement: Ni `index`
           *
           * Example: Ni 1.0
           *
           * Specifies the optical density for the surface. `index` is the value
           * for the optical density. The values can range from 0.001 to 10.  A value of
           * 1.0 means that light does not bend as it passes through an object.
           * Increasing the optical_density increases the amount of bending. Glass has
           * an index of refraction of about 1.5. Values of less than 1.0 produce
           * bizarre results and are not recommended
           *
           * @param {string[]} tokens the tokens associated with the directive
           */ }, { key: "parse_Ni", value: function parse_Ni(
        tokens) {
            this.currentMaterial.refractionIndex = parseFloat(tokens[0]);
        }

        /**
           * Specifies the specular exponent for the current material. This defines the
           * focus of the specular highlight.
           *
           * Statement: Ns `exponent`
           *
           * Example: "Ns 250"
           *
           * `exponent` is the value for the specular exponent. A high exponent results
           * in a tight, concentrated highlight. Ns Values normally range from 0 to
           * 1000.
           *
           * @param {string[]} tokens the tokens associated with the directive
           */ }, { key: "parse_Ns", value: function parse_Ns(
        tokens) {
            this.currentMaterial.specularExponent = parseInt(tokens[0]);
        }

        /**
           * Specifies the sharpness of the reflections from the local reflection map.
           *
           * Statement: sharpness `value`
           *
           * Example: "sharpness 100"
           *
           * If a material does not have a local reflection map defined in its material
           * defintions, sharpness will apply to the global reflection map defined in
           * PreView.
           *
           * `value` can be a number from 0 to 1000. The default is 60. A high value
           * results in a clear reflection of objects in the reflection map.
           *
           * Tip: sharpness values greater than 100 introduce aliasing effects in
           * flat surfaces that are viewed at a sharp angle.
           *
           * @param {string[]} tokens the tokens associated with the directive
           */ }, { key: "parse_sharpness", value: function parse_sharpness(
        tokens) {
            this.currentMaterial.sharpness = parseInt(tokens[0]);
        }

        /**
           * Parses the -cc flag and updates the options object with the values.
           *
           * @param {string[]} values the values passed to the -cc flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_cc", value: function parse_cc(
        values, options) {
            options.colorCorrection = values[0] == "on";
        }

        /**
           * Parses the -blendu flag and updates the options object with the values.
           *
           * @param {string[]} values the values passed to the -blendu flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_blendu", value: function parse_blendu(
        values, options) {
            options.horizontalBlending = values[0] == "on";
        }

        /**
           * Parses the -blendv flag and updates the options object with the values.
           *
           * @param {string[]} values the values passed to the -blendv flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_blendv", value: function parse_blendv(
        values, options) {
            options.verticalBlending = values[0] == "on";
        }

        /**
           * Parses the -boost flag and updates the options object with the values.
           *
           * @param {string[]} values the values passed to the -boost flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_boost", value: function parse_boost(
        values, options) {
            options.boostMipMapSharpness = parseFloat(values[0]);
        }

        /**
           * Parses the -mm flag and updates the options object with the values.
           *
           * @param {string[]} values the values passed to the -mm flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_mm", value: function parse_mm(
        values, options) {
            options.modifyTextureMap.brightness = parseFloat(values[0]);
            options.modifyTextureMap.contrast = parseFloat(values[1]);
        }

        /**
           * Parses and sets the -o, -s, and -t  u, v, and w values
           *
           * @param {string[]} values the values passed to the -o, -s, -t flag
           * @param {Object} option the Object of either the -o, -s, -t option
           * @param {Integer} defaultValue the Object of all image options
           */ }, { key: "parse_ost", value: function parse_ost(
        values, option, defaultValue) {
            while (values.length < 3) {
                values.push(defaultValue);
            }

            option.u = parseFloat(values[0]);
            option.v = parseFloat(values[1]);
            option.w = parseFloat(values[2]);
        }

        /**
           * Parses the -o flag and updates the options object with the values.
           *
           * @param {string[]} values the values passed to the -o flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_o", value: function parse_o(
        values, options) {
            this.parse_ost(values, options.offset, 0);
        }

        /**
           * Parses the -s flag and updates the options object with the values.
           *
           * @param {string[]} values the values passed to the -s flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_s", value: function parse_s(
        values, options) {
            this.parse_ost(values, options.scale, 1);
        }

        /**
           * Parses the -t flag and updates the options object with the values.
           *
           * @param {string[]} values the values passed to the -t flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_t", value: function parse_t(
        values, options) {
            this.parse_ost(values, options.turbulence, 0);
        }

        /**
           * Parses the -texres flag and updates the options object with the values.
           *
           * @param {string[]} values the values passed to the -texres flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_texres", value: function parse_texres(
        values, options) {
            options.textureResolution = parseFloat(values[0]);
        }

        /**
           * Parses the -clamp flag and updates the options object with the values.
           *
           * @param {string[]} values the values passed to the -clamp flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_clamp", value: function parse_clamp(
        values, options) {
            options.clamp = values[0] == "on";
        }

        /**
           * Parses the -bm flag and updates the options object with the values.
           *
           * @param {string[]} values the values passed to the -bm flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_bm", value: function parse_bm(
        values, options) {
            options.bumpMultiplier = parseFloat(values[0]);
        }

        /**
           * Parses the -imfchan flag and updates the options object with the values.
           *
           * @param {string[]} values the values passed to the -imfchan flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_imfchan", value: function parse_imfchan(
        values, options) {
            options.imfChan = values[0];
        }

        /**
           * This only exists for relection maps and denotes the type of reflection.
           *
           * @param {string[]} values the values passed to the -type flag
           * @param {Object} options the Object of all image options
           */ }, { key: "parse_type", value: function parse_type(
        values, options) {
            options.reflectionType = values[0];
        }

        /**
           * Parses the texture's options and returns an options object with the info
           *
           * @param {string[]} tokens all of the option tokens to pass to the texture
           * @return {Object} a complete object of objects to apply to the texture
           */ }, { key: "parseOptions", value: function parseOptions(
        tokens) {
            var options = {
                colorCorrection: false,
                horizontalBlending: true,
                verticalBlending: true,
                boostMipMapSharpness: 0,
                modifyTextureMap: {
                    brightness: 0,
                    contrast: 1 },

                offset: { u: 0, v: 0, w: 0 },
                scale: { u: 1, v: 1, w: 1 },
                turbulence: { u: 0, v: 0, w: 0 },
                clamp: false,
                textureResolution: null,
                bumpMultiplier: 1,
                imfChan: null };


            var option = void 0;
            var values = void 0;
            var optionsToValues = {};

            tokens.reverse();

            while (tokens.length) {
                var token = tokens.pop();

                if (token.startsWith("-")) {
                    option = token.substr(1);
                    optionsToValues[option] = [];
                } else {
                    optionsToValues[option].push(token);
                }
            }

            for (option in optionsToValues) {
                if (!optionsToValues.hasOwnProperty(option)) {
                    continue;
                }
                values = optionsToValues[option];
                var optionMethod = this["parse_" + option];
                if (optionMethod) {
                    optionMethod.bind(this)(values, options);
                }
            }

            return options;
        }

        /**
           * Parses the given texture map line.
           *
           * @param {string[]} tokens all of the tokens representing the texture
           * @return {Object} a complete object of objects to apply to the texture
           */ }, { key: "parseMap", value: function parseMap(
        tokens) {
            // according to wikipedia:
            // (https://en.wikipedia.org/wiki/Wavefront_.obj_file#Vendor_specific_alterations)
            // there is at least one vendor that places the filename before the options
            // rather than after (which is to spec). All options start with a '-'
            // so if the first token doesn't start with a '-', we're going to assume
            // it's the name of the map file.
            var filename = void 0;
            var options = void 0;
            if (!tokens[0].startsWith("-")) {var _tokens = _toArray(
                tokens);filename = _tokens[0];options = _tokens.slice(1);
            } else {
                filename = tokens.pop();
                options = tokens;
            }

            options = this.parseOptions(options);
            options["filename"] = filename;
            return options;
        }

        /**
           * Parses the ambient map.
           *
           * @param {string[]} tokens list of tokens for the map_Ka direcive
           */ }, { key: "parse_map_Ka", value: function parse_map_Ka(
        tokens) {
            this.currentMaterial.mapAmbient = this.parseMap(tokens);
        }

        /**
           * Parses the diffuse map.
           *
           * @param {string[]} tokens list of tokens for the map_Kd direcive
           */ }, { key: "parse_map_Kd", value: function parse_map_Kd(
        tokens) {
            this.currentMaterial.mapDiffuse = this.parseMap(tokens);
        }

        /**
           * Parses the specular map.
           *
           * @param {string[]} tokens list of tokens for the map_Ks direcive
           */ }, { key: "parse_map_Ks", value: function parse_map_Ks(
        tokens) {
            this.currentMaterial.mapSpecular = this.parseMap(tokens);
        }

        /**
           * Parses the emissive map.
           *
           * @param {string[]} tokens list of tokens for the map_Ke direcive
           */ }, { key: "parse_map_Ke", value: function parse_map_Ke(
        tokens) {
            this.currentMaterial.mapEmissive = this.parseMap(tokens);
        }

        /**
           * Parses the specular exponent map.
           *
           * @param {string[]} tokens list of tokens for the map_Ns direcive
           */ }, { key: "parse_map_Ns", value: function parse_map_Ns(
        tokens) {
            this.currentMaterial.mapSpecularExponent = this.parseMap(tokens);
        }

        /**
           * Parses the dissolve map.
           *
           * @param {string[]} tokens list of tokens for the map_d direcive
           */ }, { key: "parse_map_d", value: function parse_map_d(
        tokens) {
            this.currentMaterial.mapDissolve = this.parseMap(tokens);
        }

        /**
           * Parses the anti-aliasing option.
           *
           * @param {string[]} tokens list of tokens for the map_aat direcive
           */ }, { key: "parse_map_aat", value: function parse_map_aat(
        tokens) {
            this.currentMaterial.antiAliasing = tokens[0] == "on";
        }

        /**
           * Parses the bump map.
           *
           * @param {string[]} tokens list of tokens for the map_bump direcive
           */ }, { key: "parse_map_bump", value: function parse_map_bump(
        tokens) {
            this.currentMaterial.mapBump = this.parseMap(tokens);
        }

        /**
           * Parses the bump map.
           *
           * @param {string[]} tokens list of tokens for the bump direcive
           */ }, { key: "parse_bump", value: function parse_bump(
        tokens) {
            this.parse_map_bump(tokens);
        }

        /**
           * Parses the disp map.
           *
           * @param {string[]} tokens list of tokens for the disp direcive
           */ }, { key: "parse_disp", value: function parse_disp(
        tokens) {
            this.currentMaterial.mapDisplacement = this.parseMap(tokens);
        }

        /**
           * Parses the decal map.
           *
           * @param {string[]} tokens list of tokens for the map_decal direcive
           */ }, { key: "parse_decal", value: function parse_decal(
        tokens) {
            this.currentMaterial.mapDecal = this.parseMap(tokens);
        }

        /**
           * Parses the refl map.
           *
           * @param {string[]} tokens list of tokens for the refl direcive
           */ }, { key: "parse_refl", value: function parse_refl(
        tokens) {
            this.currentMaterial.mapReflections.push(this.parseMap(tokens));
        }

        /**
           * Parses the MTL file.
           *
           * Iterates line by line parsing each MTL directive.
           *
           * This function expects the first token in the line
           * to be a valid MTL directive. That token is then used
           * to try and run a method on this class. parse_[directive]
           * E.g., the `newmtl` directive would try to call the method
           * parse_newmtl. Each parsing function takes in the remaining
           * list of tokens and updates the currentMaterial class with
           * the attributes provided.
           */ }, { key: "parse", value: function parse()
        {
            var lines = this.data.split(/\r?\n/);var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {
                for (var _iterator = lines[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var line = _step.value;
                    line = line.trim();
                    if (!line || line.startsWith("#")) {
                        continue;
                    }

                    var tokens = line.split(/\s/);
                    var directive = void 0;var _tokens2 =
                    tokens;var _tokens3 = _toArray(_tokens2);directive = _tokens3[0];tokens = _tokens3.slice(1);

                    var parseMethod = this["parse_" + directive];

                    if (!parseMethod) {
                        console.warn("Don't know how to parse the directive: \"" + directive + "\"");
                        continue;
                    }

                    // console.log(`Parsing "${directive}" with tokens: ${tokens}`);
                    parseMethod.bind(this)(tokens);
                }

                // some cleanup. These don't need to be exposed as public data.
            } catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}delete this.data;
            this.currentMaterial = null;
        }

        /* eslint-enable camelcase*/ }]);return MaterialLibrary;}();

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(4);


/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });exports.version = exports.deleteMeshBuffers = exports.initMeshBuffers = exports.downloadMeshes = exports.downloadModels = exports.Layout = exports.MaterialLibrary = exports.Material = exports.Mesh = undefined;var _mesh = __webpack_require__(1);var _mesh2 = _interopRequireDefault(_mesh);
var _material = __webpack_require__(2);
var _layout = __webpack_require__(0);
var _utils = __webpack_require__(5);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}

var version = "1.1.2";

/**
                        * @namespace
                        */exports.

Mesh = _mesh2.default;exports.
Material = _material.Material;exports.
MaterialLibrary = _material.MaterialLibrary;exports.
Layout = _layout.Layout;exports.
downloadModels = _utils.downloadModels;exports.
downloadMeshes = _utils.downloadMeshes;exports.
initMeshBuffers = _utils.initMeshBuffers;exports.
deleteMeshBuffers = _utils.deleteMeshBuffers;exports.
version = version;

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
Object.defineProperty(exports, "__esModule", { value: true });var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();exports.



































































































downloadModels = downloadModels;exports.







































































































downloadMeshes = downloadMeshes;exports.

















































































































initMeshBuffers = initMeshBuffers;exports.






deleteMeshBuffers = deleteMeshBuffers;var _mesh = __webpack_require__(1);var _mesh2 = _interopRequireDefault(_mesh);var _material = __webpack_require__(2);var _layout = __webpack_require__(0);function _interopRequireDefault(obj) {return obj && obj.__esModule ? obj : { default: obj };}function downloadMtlTextures(mtl, root) {var mapAttributes = ["mapDiffuse", "mapAmbient", "mapSpecular", "mapDissolve", "mapBump", "mapDisplacement", "mapDecal", "mapEmissive"];if (!root.endsWith("/")) {root += "/";}var textures = [];for (var material in mtl.materials) {if (!mtl.materials.hasOwnProperty(material)) {continue;}material = mtl.materials[material];var _loop = function _loop(attr) {var mapData = material[attr];if (!mapData) {return "continue";}var url = root + mapData.filename;textures.push(fetch(url).then(function (response) {if (!response.ok) {throw new Error();}return response.blob();}).then(function (data) {var image = new Image();image.src = URL.createObjectURL(data);mapData.texture = image;return new Promise(function (resolve) {return image.onload = function () {return Promise.resolve();};});}).catch(function () {console.error("Unable to download texture: " + url);}));};var _iteratorNormalCompletion = true;var _didIteratorError = false;var _iteratorError = undefined;try {for (var _iterator = mapAttributes[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {var attr = _step.value;var _ret = _loop(attr);if (_ret === "continue") continue;}} catch (err) {_didIteratorError = true;_iteratorError = err;} finally {try {if (!_iteratorNormalCompletion && _iterator.return) {_iterator.return();}} finally {if (_didIteratorError) {throw _iteratorError;}}}}return Promise.all(textures);} /**
ccepts a list of model request objects and returns a Promise that
resolves when all models have been downloaded and parsed.

he list of model objects follow this interface:
{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *  obj: 'path/to/model.obj',
mtl: true | 'path/to/model.mtl',
downloadMtlTextures: true | false
mtlTextureRoot: '/models/suzanne/maps'
name: 'suzanne'
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * }

he `obj` attribute is required and should be the path to the
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * model's .obj file relative to the current repo (absolute URLs are
suggested).

he `mtl` attribute is optional and can either be a boolean or
a path to the model's .mtl file relative to the current URL. If
the value is `true`, then the path and basename given for the `obj`
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * attribute is used replacing the .obj suffix for .mtl
g.: {obj: 'models/foo.obj', mtl: true} would search for 'models/foo.mtl'

he `name` attribute is optional and is a human friendly name to be
included with the parsed OBJ and MTL files. If not given, the base .obj
filename will be used.
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   *
he `downloadMtlTextures` attribute is a flag for automatically downloading
any images found in the MTL file and attaching them to each Material
created from that file. For example, if material.mapDiffuse is set (there
was data in the MTL file), then material.mapDiffuse.texture will contain
the downloaded image. This option defaults to `true`. By default, the MTL's
will be used to determine the location of the images.

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * The `mtlTextureRoot` attribute is optional and should point to the location
on the server that this MTL's texture files are located. The default is to
use the MTL file's location.

returns {Promise} the result of downloading the given list of models. The
promise will resolve with an object whose keys are the names of the models
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   * and the value is its Mesh object. Each Mesh object will automatically
have its addMaterialLibrary() method called to set the given MTL data (if given).
function downloadModels(models) {var finished = [];var _loop2 = function _loop2(model) {var parsed = [];if (!model.obj) {throw new Error('"obj" attribute of model object not set. The .obj file is required to be set ' + "in order to use downloadModels()");}var options = {};options.indicesPerMaterial = !!model.indicesPerMaterial;options.calcTangentsAndBitangents = !!model.calcTangentsAndBitangents; // if the name is not provided, dervive it from the given OBJ
        var name = model.name;if (!name) {var parts = model.obj.split("/");name = parts[parts.length - 1].replace(".obj", "");}parsed.push(Promise.resolve(name));parsed.push(fetch(model.obj).then(function (response) {return response.text();}).then(function (data) {return new _mesh2.default(data, options);})); // Download MaterialLibrary file?
        if (model.mtl) {var mtl = model.mtl;if (typeof mtl === "boolean") {mtl = model.obj.replace(/\.obj$/, ".mtl");}parsed.push(fetch(mtl).then(function (response) {return response.text();}).then(function (data) {var material = new _material.MaterialLibrary(data);if (model.downloadMtlTextures !== false) {var root = model.mtlTextureRoot;if (!root) {// get the directory of the MTL file as default
                        root = mtl.substr(0, mtl.lastIndexOf("/"));} // downloadMtlTextures returns a Promise that
                    // is resolved once all of the images it
                    // contains are downloaded. These are then
                    // attached to the map data objects
                    return Promise.all([Promise.resolve(material), downloadMtlTextures(material, root)]);}return Promise.all(Promise.resolve(material));}).then(function (value) {return value[0];}));}finished.push(Promise.all(parsed));};var _iteratorNormalCompletion2 = true;var _didIteratorError2 = false;var _iteratorError2 = undefined;try {for (var _iterator2 = models[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {var model = _step2.value;_loop2(model);}} catch (err) {_didIteratorError2 = true;_iteratorError2 = err;} finally {try {if (!_iteratorNormalCompletion2 && _iterator2.return) {_iterator2.return();}} finally {if (_didIteratorError2) {throw _iteratorError2;}}}return Promise.all(finished).then(function (ms) {// the "finished" promise is a list of name, Mesh instance,
        // and MaterialLibary instance. This unpacks and returns an
        // object mapping name to Mesh (Mesh points to MTL).
        var models = {};var _iteratorNormalCompletion3 = true;var _didIteratorError3 = false;var _iteratorError3 = undefined;try {for (var _iterator3 = ms[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {var model = _step3.value;var _model = _slicedToArray(model, 3),_name = _model[0],mesh = _model[1],mtl = _model[2];mesh.name = _name;if (mtl) {mesh.addMaterialLibrary(mtl);}models[_name] = mesh;}} catch (err) {_didIteratorError3 = true;_iteratorError3 = err;} finally {try {if (!_iteratorNormalCompletion3 && _iterator3.return) {_iterator3.return();}} finally {if (_didIteratorError3) {throw _iteratorError3;}}}return models;});} /**
akes in an object of `mesh_name`, `'/url/to/OBJ/file'` pairs and a callback
function. Each OBJ file will be ajaxed in and automatically converted to
an OBJ.Mesh. When all files have successfully downloaded the callback
function provided will be called and passed in an object containing
the newly created meshes.

ote:** In order to use this function as a way to download meshes, a
webserver of some sort must be used.

param {Object} nameAndAttrs an object where the key is the name of the mesh and the value is the url to that mesh's OBJ file

param {Function} completionCallback should contain a function that will take one parameter: an object array where the keys will be the unique object name and the value will be a Mesh object

param {Object} meshes In case other meshes are loaded separately or if a previously declared variable is desired to be used, pass in a (possibly empty) json object of the pattern: { '<mesh_name>': OBJ.Mesh }

function downloadMeshes(nameAndURLs, completionCallback, meshes) {if (meshes === undefined) {meshes = {};}var completed = [];var _loop3 = function _loop3(mesh_name) {if (!nameAndURLs.hasOwnProperty(mesh_name)) {return "continue";}var url = nameAndURLs[mesh_name];completed.push(fetch(url).then(function (response) {return response.text();}).then(function (data) {return [mesh_name, new _mesh2.default(data)];}));};for (var mesh_name in nameAndURLs) {var _ret3 = _loop3(mesh_name);if (_ret3 === "continue") continue;}Promise.all(completed).then(function (ms) {var _iteratorNormalCompletion4 = true;var _didIteratorError4 = false;var _iteratorError4 = undefined;try {for (var _iterator4 = ms[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {var _ref = _step4.value;var _ref2 = _slicedToArray(_ref, 2);var _name2 = _ref2[0];var mesh = _ref2[1];meshes[_name2] = mesh;}} catch (err) {_didIteratorError4 = true;_iteratorError4 = err;} finally {try {if (!_iteratorNormalCompletion4 && _iterator4.return) {_iterator4.return();}} finally {if (_didIteratorError4) {throw _iteratorError4;}}}return completionCallback(meshes);});}var _buildBuffer = function _buildBuffer(gl, type, data, itemSize) {var buffer = gl.createBuffer();var arrayView = type === gl.ARRAY_BUFFER ? Float32Array : Uint16Array;gl.bindBuffer(type, buffer);gl.bufferData(type, new arrayView(data), gl.STATIC_DRAW);buffer.itemSize = itemSize;buffer.numItems = data.length / itemSize;return buffer;}; /**
akes in the WebGL context and a Mesh, then creates and appends the buffers
to the mesh object as attributes.

param {WebGLRenderingContext} gl the `canvas.getContext('webgl')` context instance
param {Mesh} mesh a single `OBJ.Mesh` instance

he newly created mesh attributes are:

ttrbute | Description
| ---
normalBuffer**       |contains the model&#39;s Vertex Normals
normalBuffer.itemSize  |set to 3 items
normalBuffer.numItems  |the total number of vertex normals
|
textureBuffer**      |contains the model&#39;s Texture Coordinates
textureBuffer.itemSize |set to 2 items
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  * textureBuffer.numItems |the number of texture coordinates
|
vertexBuffer**       |contains the model&#39;s Vertex Position Coordinates (does not include w)
vertexBuffer.itemSize  |set to 3 items
vertexBuffer.numItems  |the total number of vertices
|
indexBuffer**        |contains the indices of the faces
indexBuffer.itemSize   |is set to 1
indexBuffer.numItems   |the total number of indices

simple example (a lot of steps are missing, so don't copy and paste):

var gl   = canvas.getContext('webgl'),
mesh = OBJ.Mesh(obj_file_data);
compile the shaders and create a shader program
var shaderProgram = gl.createProgram();
compilation stuff here

make sure you have vertex, vertex normal, and texture coordinate
attributes located in your shaders and attach them to the shader program
shaderProgram.vertexPositionAttribute = gl.getAttribLocation(shaderProgram, "aVertexPosition");
gl.enableVertexAttribArray(shaderProgram.vertexPositionAttribute);
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *
shaderProgram.vertexNormalAttribute = gl.getAttribLocation(shaderProgram, "aVertexNormal");
gl.enableVertexAttribArray(shaderProgram.vertexNormalAttribute);

                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *     shaderProgram.textureCoordAttribute = gl.getAttribLocation(shaderProgram, "aTextureCoord");
gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);

create and initialize the vertex, vertex normal, and texture coordinate buffers
and save on to the mesh object
initMeshBuffers(gl, mesh);

now to render the mesh
gl.bindBuffer(gl.ARRAY_BUFFER, mesh.vertexBuffer);
gl.vertexAttribPointer(shaderProgram.vertexPositionAttribute, mesh.vertexBuffer.itemSize, gl.FLOAT, false, 0, 0);
it's possible that the mesh doesn't contain
any texture coordinates (e.g. suzanne.obj in the development branch).
in this case, the texture vertexAttribArray will need to be disabled
before the call to drawElements
if(!mesh.textures.length){
gl.disableVertexAttribArray(shaderProgram.textureCoordAttribute);
}
else{
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  *       // if the texture vertexAttribArray has been previously
disabled, then it needs to be re-enabled
gl.enableVertexAttribArray(shaderProgram.textureCoordAttribute);
gl.bindBuffer(gl.ARRAY_BUFFER, mesh.textureBuffer);
gl.vertexAttribPointer(shaderProgram.textureCoordAttribute, mesh.textureBuffer.itemSize, gl.FLOAT, false, 0, 0);
}

gl.bindBuffer(gl.ARRAY_BUFFER, mesh.normalBuffer);
gl.vertexAttribPointer(shaderProgram.vertexNormalAttribute, mesh.normalBuffer.itemSize, gl.FLOAT, false, 0, 0);

gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, model.mesh.indexBuffer);
gl.drawElements(gl.TRIANGLES, model.mesh.indexBuffer.numItems, gl.UNSIGNED_SHORT, 0);
function initMeshBuffers(gl, mesh) {mesh.normalBuffer = _buildBuffer(gl, gl.ARRAY_BUFFER, mesh.vertexNormals, 3);mesh.textureBuffer = _buildBuffer(gl, gl.ARRAY_BUFFER, mesh.textures, mesh.textureStride);mesh.vertexBuffer = _buildBuffer(gl, gl.ARRAY_BUFFER, mesh.vertices, 3);mesh.indexBuffer = _buildBuffer(gl, gl.ELEMENT_ARRAY_BUFFER, mesh.indices, 1);}function deleteMeshBuffers(gl, mesh) {gl.deleteBuffer(mesh.normalBuffer);gl.deleteBuffer(mesh.textureBuffer);gl.deleteBuffer(mesh.vertexBuffer);gl.deleteBuffer(mesh.indexBuffer);}

/***/ })
/******/ ]);
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay91bml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uIiwid2VicGFjazovLy93ZWJwYWNrL2Jvb3RzdHJhcCAwMjk3ZTM5YzU1M2JlNzBkYzc0YyIsIndlYnBhY2s6Ly8vLi9zcmMvbGF5b3V0LmpzIiwid2VicGFjazovLy8uL3NyYy9tZXNoLmpzIiwid2VicGFjazovLy8uL3NyYy9tYXRlcmlhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLmpzIl0sIm5hbWVzIjpbIkxheW91dCIsImF0dHJpYnV0ZXMiLCJvZmZzZXQiLCJtYXhTdHJpZGVNdWx0aXBsZSIsImF0dHJpYnV0ZSIsImtleSIsIkR1cGxpY2F0ZUF0dHJpYnV0ZUV4Y2VwdGlvbiIsInNpemVPZlR5cGUiLCJjb25zb2xlIiwid2FybiIsInNpemUiLCJ0eXBlIiwibm9ybWFsaXplZCIsInNpemVJbkJ5dGVzIiwiTWF0aCIsIm1heCIsInN0cmlkZSIsIm1lc3NhZ2UiLCJBdHRyaWJ1dGUiLCJzaXplSW5CeXRlc09mVHlwZSIsIlBPU0lUSU9OIiwiTk9STUFMIiwiVEFOR0VOVCIsIkJJVEFOR0VOVCIsIlVWIiwiTUFURVJJQUxfSU5ERVgiLCJNQVRFUklBTF9FTkFCTEVEIiwiQU1CSUVOVCIsIkRJRkZVU0UiLCJTUEVDVUxBUiIsIlNQRUNVTEFSX0VYUE9ORU5UIiwiRU1JU1NJVkUiLCJUUkFOU01JU1NJT05fRklMVEVSIiwiRElTU09MVkUiLCJJTExVTUlOQVRJT04iLCJSRUZSQUNUSU9OX0lOREVYIiwiU0hBUlBORVNTIiwiTUFQX0RJRkZVU0UiLCJNQVBfQU1CSUVOVCIsIk1BUF9TUEVDVUxBUiIsIk1BUF9TUEVDVUxBUl9FWFBPTkVOVCIsIk1BUF9ESVNTT0xWRSIsIkFOVElfQUxJQVNJTkciLCJNQVBfQlVNUCIsIk1BUF9ESVNQTEFDRU1FTlQiLCJNQVBfREVDQUwiLCJNQVBfRU1JU1NJVkUiLCJNZXNoIiwib2JqZWN0RGF0YSIsIm9wdGlvbnMiLCJtYXRlcmlhbHMiLCJlbmFibGVXVGV4dHVyZUNvb3JkIiwiaW5kaWNlc1Blck1hdGVyaWFsIiwic2VsZiIsInZlcnRpY2VzIiwidmVydGV4Tm9ybWFscyIsInRleHR1cmVzIiwiaW5kaWNlcyIsInRleHR1cmVTdHJpZGUiLCJuYW1lIiwidmVydHMiLCJ2ZXJ0Tm9ybWFscyIsInVucGFja2VkIiwibWF0ZXJpYWxOYW1lc0J5SW5kZXgiLCJtYXRlcmlhbEluZGljZXNCeU5hbWUiLCJjdXJyZW50TWF0ZXJpYWxJbmRleCIsImN1cnJlbnRPYmplY3RCeU1hdGVyaWFsSW5kZXgiLCJub3JtcyIsImhhc2hpbmRpY2VzIiwibWF0ZXJpYWxJbmRpY2VzIiwiaW5kZXgiLCJWRVJURVhfUkUiLCJOT1JNQUxfUkUiLCJURVhUVVJFX1JFIiwiRkFDRV9SRSIsIldISVRFU1BBQ0VfUkUiLCJVU0VfTUFURVJJQUxfUkUiLCJsaW5lcyIsInNwbGl0IiwiaSIsImxlbmd0aCIsImxpbmUiLCJ0cmltIiwic3RhcnRzV2l0aCIsImVsZW1lbnRzIiwic2hpZnQiLCJ0ZXN0IiwicHVzaCIsImNvb3JkcyIsInNsaWNlIiwibWF0ZXJpYWxOYW1lIiwicXVhZCIsImoiLCJlbGVMZW4iLCJoYXNoMCIsImhhc2giLCJ2ZXJ0ZXgiLCJub3JtYWxJbmRleCIsInZlcnRleE1hdGVyaWFsSW5kaWNlcyIsIm1hdGVyaWFsTmFtZXMiLCJtYXRlcmlhbHNCeUluZGV4IiwiY2FsY1RhbmdlbnRzQW5kQml0YW5nZW50cyIsImNhbGN1bGF0ZVRhbmdlbnRzQW5kQml0YW5nZW50cyIsImFzc2VydCIsInRhbmdlbnRzIiwiQXJyYXkiLCJtYXAiLCJiaXRhbmdlbnRzIiwiaXNBcnJheSIsImNvbmNhdCIsImFwcGx5Iiwibm9ybWFscyIsInV2cyIsImkwIiwiaTEiLCJpMiIsInhfdjAiLCJ5X3YwIiwiel92MCIsInhfdXYwIiwieV91djAiLCJ4X3YxIiwieV92MSIsInpfdjEiLCJ4X3V2MSIsInlfdXYxIiwieF92MiIsInlfdjIiLCJ6X3YyIiwieF91djIiLCJ5X3V2MiIsInhfZGVsdGFQb3MxIiwieV9kZWx0YVBvczEiLCJ6X2RlbHRhUG9zMSIsInhfZGVsdGFQb3MyIiwieV9kZWx0YVBvczIiLCJ6X2RlbHRhUG9zMiIsInhfdXZEZWx0YVBvczEiLCJ5X3V2RGVsdGFQb3MxIiwieF91dkRlbHRhUG9zMiIsInlfdXZEZWx0YVBvczIiLCJySW52IiwiciIsImFicyIsInhfdGFuZ2VudCIsInlfdGFuZ2VudCIsInpfdGFuZ2VudCIsInhfYml0YW5nZW50IiwieV9iaXRhbmdlbnQiLCJ6X2JpdGFuZ2VudCIsInhfbjAiLCJ5X24wIiwiel9uMCIsInhfbjEiLCJ5X24xIiwiel9uMSIsInhfbjIiLCJ5X24yIiwiel9uMiIsIm4wX2RvdF90IiwibjFfZG90X3QiLCJuMl9kb3RfdCIsInhfcmVzVGFuZ2VudDAiLCJ5X3Jlc1RhbmdlbnQwIiwiel9yZXNUYW5nZW50MCIsInhfcmVzVGFuZ2VudDEiLCJ5X3Jlc1RhbmdlbnQxIiwiel9yZXNUYW5nZW50MSIsInhfcmVzVGFuZ2VudDIiLCJ5X3Jlc1RhbmdlbnQyIiwiel9yZXNUYW5nZW50MiIsIm1hZ1RhbmdlbnQwIiwic3FydCIsIm1hZ1RhbmdlbnQxIiwibWFnVGFuZ2VudDIiLCJuMF9kb3RfYnQiLCJuMV9kb3RfYnQiLCJuMl9kb3RfYnQiLCJ4X3Jlc0JpdGFuZ2VudDAiLCJ5X3Jlc0JpdGFuZ2VudDAiLCJ6X3Jlc0JpdGFuZ2VudDAiLCJ4X3Jlc0JpdGFuZ2VudDEiLCJ5X3Jlc0JpdGFuZ2VudDEiLCJ6X3Jlc0JpdGFuZ2VudDEiLCJ4X3Jlc0JpdGFuZ2VudDIiLCJ5X3Jlc0JpdGFuZ2VudDIiLCJ6X3Jlc0JpdGFuZ2VudDIiLCJtYWdCaXRhbmdlbnQwIiwibWFnQml0YW5nZW50MSIsIm1hZ0JpdGFuZ2VudDIiLCJsYXlvdXQiLCJudW1JdGVtcyIsImJ1ZmZlciIsIkFycmF5QnVmZmVyIiwiZGF0YVZpZXciLCJEYXRhVmlldyIsInZlcnRleE9mZnNldCIsInNldEZsb2F0MzIiLCJzZXRJbnQxNiIsIm1hdGVyaWFsSW5kZXgiLCJtYXRlcmlhbCIsImFtYmllbnQiLCJkaWZmdXNlIiwic3BlY3VsYXIiLCJzcGVjdWxhckV4cG9uZW50IiwiZW1pc3NpdmUiLCJ0cmFuc21pc3Npb25GaWx0ZXIiLCJkaXNzb2x2ZSIsImlsbHVtaW5hdGlvbiIsInJlZnJhY3Rpb25JbmRleCIsInNoYXJwbmVzcyIsImFudGlBbGlhc2luZyIsIlVpbnQxNkFycmF5IiwibXRsIiwiTWF0ZXJpYWwiLCJ0cmFuc3BhcmVuY3kiLCJtYXBEaWZmdXNlIiwibWFwQW1iaWVudCIsIm1hcFNwZWN1bGFyIiwibWFwU3BlY3VsYXJFeHBvbmVudCIsIm1hcERpc3NvbHZlIiwibWFwQnVtcCIsIm1hcERpc3BsYWNlbWVudCIsIm1hcERlY2FsIiwibWFwRW1pc3NpdmUiLCJtYXBSZWZsZWN0aW9ucyIsIk1hdGVyaWFsTGlicmFyeSIsIm10bERhdGEiLCJkYXRhIiwiY3VycmVudE1hdGVyaWFsIiwicGFyc2UiLCJ0b2tlbnMiLCJlcnJvciIsInBhcnNlRmxvYXQiLCJ2YWx1ZSIsInBhcnNlQ29sb3IiLCJwb3AiLCJwYXJzZUludCIsInZhbHVlcyIsImNvbG9yQ29ycmVjdGlvbiIsImhvcml6b250YWxCbGVuZGluZyIsInZlcnRpY2FsQmxlbmRpbmciLCJib29zdE1pcE1hcFNoYXJwbmVzcyIsIm1vZGlmeVRleHR1cmVNYXAiLCJicmlnaHRuZXNzIiwiY29udHJhc3QiLCJvcHRpb24iLCJkZWZhdWx0VmFsdWUiLCJ1IiwidiIsInciLCJwYXJzZV9vc3QiLCJzY2FsZSIsInR1cmJ1bGVuY2UiLCJ0ZXh0dXJlUmVzb2x1dGlvbiIsImNsYW1wIiwiYnVtcE11bHRpcGxpZXIiLCJpbWZDaGFuIiwicmVmbGVjdGlvblR5cGUiLCJvcHRpb25zVG9WYWx1ZXMiLCJyZXZlcnNlIiwidG9rZW4iLCJzdWJzdHIiLCJoYXNPd25Qcm9wZXJ0eSIsIm9wdGlvbk1ldGhvZCIsImJpbmQiLCJmaWxlbmFtZSIsInBhcnNlT3B0aW9ucyIsInBhcnNlTWFwIiwicGFyc2VfbWFwX2J1bXAiLCJkaXJlY3RpdmUiLCJwYXJzZU1ldGhvZCIsInZlcnNpb24iLCJkb3dubG9hZE1vZGVscyIsImRvd25sb2FkTWVzaGVzIiwiaW5pdE1lc2hCdWZmZXJzIiwiZGVsZXRlTWVzaEJ1ZmZlcnMiLCJkb3dubG9hZE10bFRleHR1cmVzIiwicm9vdCIsIm1hcEF0dHJpYnV0ZXMiLCJlbmRzV2l0aCIsImF0dHIiLCJtYXBEYXRhIiwidXJsIiwiZmV0Y2giLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsIkVycm9yIiwiYmxvYiIsImltYWdlIiwiSW1hZ2UiLCJzcmMiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJ0ZXh0dXJlIiwiUHJvbWlzZSIsIm9ubG9hZCIsInJlc29sdmUiLCJjYXRjaCIsImFsbCIsIm1vZGVscyIsImZpbmlzaGVkIiwibW9kZWwiLCJwYXJzZWQiLCJvYmoiLCJwYXJ0cyIsInJlcGxhY2UiLCJ0ZXh0IiwibXRsVGV4dHVyZVJvb3QiLCJsYXN0SW5kZXhPZiIsIm1zIiwibWVzaCIsImFkZE1hdGVyaWFsTGlicmFyeSIsIm5hbWVBbmRVUkxzIiwiY29tcGxldGlvbkNhbGxiYWNrIiwibWVzaGVzIiwidW5kZWZpbmVkIiwiY29tcGxldGVkIiwibWVzaF9uYW1lIiwiX2J1aWxkQnVmZmVyIiwiZ2wiLCJpdGVtU2l6ZSIsImNyZWF0ZUJ1ZmZlciIsImFycmF5VmlldyIsIkFSUkFZX0JVRkZFUiIsIkZsb2F0MzJBcnJheSIsImJpbmRCdWZmZXIiLCJidWZmZXJEYXRhIiwiU1RBVElDX0RSQVciLCJub3JtYWxCdWZmZXIiLCJ0ZXh0dXJlQnVmZmVyIiwidmVydGV4QnVmZmVyIiwiaW5kZXhCdWZmZXIiLCJFTEVNRU5UX0FSUkFZX0JVRkZFUiIsImRlbGV0ZUJ1ZmZlciJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELE87QUNWQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFD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QXBCLEVBQTBDdEIsS0FBSy9QLE9BQS9DLEVBQXdELENBQXhELENBQW5CLENBQ0gsQ0FFTSxTQUFTMk4saUJBQVQsQ0FBMkI2QyxFQUEzQixFQUErQlQsSUFBL0IsRUFBcUMsQ0FDeENTLEdBQUdjLFlBQUgsQ0FBZ0J2QixLQUFLa0IsWUFBckIsRUFDQVQsR0FBR2MsWUFBSCxDQUFnQnZCLEtBQUttQixhQUFyQixFQUNBVixHQUFHYyxZQUFILENBQWdCdkIsS0FBS29CLFlBQXJCLEVBQ0FYLEdBQUdjLFlBQUgsQ0FBZ0J2QixLQUFLcUIsV0FBckIsRUFDSCxDIiwiZmlsZSI6IndlYmdsLW9iai1sb2FkZXIuanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gd2VicGFja1VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24ocm9vdCwgZmFjdG9yeSkge1xuXHRpZih0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSA9PT0gJ29iamVjdCcpXG5cdFx0bW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCk7XG5cdGVsc2UgaWYodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKVxuXHRcdGRlZmluZShcIk9CSlwiLCBbXSwgZmFjdG9yeSk7XG5cdGVsc2UgaWYodHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnKVxuXHRcdGV4cG9ydHNbXCJPQkpcIl0gPSBmYWN0b3J5KCk7XG5cdGVsc2Vcblx0XHRyb290W1wiT0JKXCJdID0gZmFjdG9yeSgpO1xufSkodHlwZW9mIHNlbGYgIT09ICd1bmRlZmluZWQnID8gc2VsZiA6IHRoaXMsIGZ1bmN0aW9uKCkge1xucmV0dXJuIFxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL3VuaXZlcnNhbE1vZHVsZURlZmluaXRpb24iLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCIvXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMyk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgMDI5N2UzOWM1NTNiZTcwZGM3NGMiLCIvKipcbiAqIEEgY2xhc3MgdG8gcmVwcmVzZW50IHRoZSBtZW1vcnkgbGF5b3V0IGZvciBhIHZlcnRleCBhdHRyaWJ1dGUgYXJyYXkuIFVzZWQgYnlcbiAqIHtAbGluayBNZXNofSdzIFRCRCguLi4pIG1ldGhvZCB0byBnZW5lcmF0ZSBhIHBhY2tlZCBhcnJheSBmcm9tIG1lc2ggZGF0YS5cbiAqIDxwPlxuICogTGF5b3V0IGNhbiBzb3J0IG9mIGJlIHRob3VnaHQgb2YgYXMgYSBDLXN0eWxlIHN0cnVjdCBkZWNsYXJhdGlvbi5cbiAqIHtAbGluayBNZXNofSdzIFRCRCguLi4pIG1ldGhvZCB3aWxsIHVzZSB0aGUge0BsaW5rIExheW91dH0gaW5zdGFuY2UgdG9cbiAqIHBhY2sgYW4gYXJyYXkgaW4gdGhlIGdpdmVuIGF0dHJpYnV0ZSBvcmRlci5cbiAqIDxwPlxuICogTGF5b3V0IGFsc28gaXMgdmVyeSBoZWxwZnVsIHdoZW4gY2FsbGluZyBhIFdlYkdMIGNvbnRleHQnc1xuICogPGNvZGU+dmVydGV4QXR0cmliUG9pbnRlcjwvY29kZT4gbWV0aG9kLiBJZiB5b3UndmUgY3JlYXRlZCBhIGJ1ZmZlciB1c2luZ1xuICogYSBMYXlvdXQgaW5zdGFuY2UsIHRoZW4gdGhlIHNhbWUgTGF5b3V0IGluc3RhbmNlIGNhbiBiZSB1c2VkIHRvIGRldGVybWluZVxuICogdGhlIHNpemUsIHR5cGUsIG5vcm1hbGl6ZWQsIHN0cmlkZSwgYW5kIG9mZnNldCBwYXJhbWV0ZXJzIGZvclxuICogPGNvZGU+dmVydGV4QXR0cmliUG9pbnRlcjwvY29kZT4uXG4gKiA8cD5cbiAqIEZvciBleGFtcGxlOlxuICogPHByZT48Y29kZT5cbiAqXG4gKiBjb25zdCBpbmRleCA9IGdsY3R4LmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlclByb2dyYW0sIFwicG9zXCIpO1xuICogZ2xjdHgudmVydGV4QXR0cmliUG9pbnRlcihcbiAqICAgbGF5b3V0LnBvc2l0aW9uLnNpemUsXG4gKiAgIGdsY3R4W2xheW91dC5wb3NpdGlvbi50eXBlXSxcbiAqICAgbGF5b3V0LnBvc2l0aW9uLm5vcm1hbGl6ZWQsXG4gKiAgIGxheW91dC5wb3NpdGlvbi5zdHJpZGUsXG4gKiAgIGxheW91dC5wb3NpdGlvbi5vZmZzZXQpO1xuICogPC9jb2RlPjwvcHJlPlxuICogQHNlZSB7QGxpbmsgTWVzaH1cbiAqL1xuZXhwb3J0IGNsYXNzIExheW91dCB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgTGF5b3V0IG9iamVjdC4gVGhpcyBjb25zdHJ1Y3RvciB3aWxsIHRocm93IGlmIGFueSBkdXBsaWNhdGVcbiAgICAgKiBhdHRyaWJ1dGVzIGFyZSBnaXZlbi5cbiAgICAgKiBAcGFyYW0ge0FycmF5fSAuLi5hdHRyaWJ1dGVzIC0gQW4gb3JkZXJlZCBsaXN0IG9mIGF0dHJpYnV0ZXMgdGhhdFxuICAgICAqICAgICAgICBkZXNjcmliZSB0aGUgZGVzaXJlZCBtZW1vcnkgbGF5b3V0IGZvciBlYWNoIHZlcnRleCBhdHRyaWJ1dGUuXG4gICAgICogICAgICAgIDxwPlxuICAgICAqXG4gICAgICogQHNlZSB7QGxpbmsgTWVzaH1cbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciguLi5hdHRyaWJ1dGVzKSB7XG4gICAgICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXM7XG4gICAgICAgIGxldCBvZmZzZXQgPSAwO1xuICAgICAgICBsZXQgbWF4U3RyaWRlTXVsdGlwbGUgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgICAgICBpZiAodGhpc1thdHRyaWJ1dGUua2V5XSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBEdXBsaWNhdGVBdHRyaWJ1dGVFeGNlcHRpb24oYXR0cmlidXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIEFkZCBwYWRkaW5nIHRvIHNhdGlzZnkgV2ViR0wncyByZXF1aXJlbWVudCB0aGF0IGFsbFxuICAgICAgICAgICAgLy8gdmVydGV4QXR0cmliUG9pbnRlciBjYWxscyBoYXZlIGFuIG9mZnNldCB0aGF0IGlzIGEgbXVsdGlwbGUgb2ZcbiAgICAgICAgICAgIC8vIHRoZSB0eXBlIHNpemUuXG4gICAgICAgICAgICBpZiAob2Zmc2V0ICUgYXR0cmlidXRlLnNpemVPZlR5cGUgIT09IDApIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgKz0gYXR0cmlidXRlLnNpemVPZlR5cGUgLSBvZmZzZXQgJSBhdHRyaWJ1dGUuc2l6ZU9mVHlwZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXCJMYXlvdXQgcmVxdWlyZXMgcGFkZGluZyBiZWZvcmUgXCIgKyBhdHRyaWJ1dGUua2V5ICsgXCIgYXR0cmlidXRlXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpc1thdHRyaWJ1dGUua2V5XSA9IHtcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGU6IGF0dHJpYnV0ZSxcbiAgICAgICAgICAgICAgICBzaXplOiBhdHRyaWJ1dGUuc2l6ZSxcbiAgICAgICAgICAgICAgICB0eXBlOiBhdHRyaWJ1dGUudHlwZSxcbiAgICAgICAgICAgICAgICBub3JtYWxpemVkOiBhdHRyaWJ1dGUubm9ybWFsaXplZCxcbiAgICAgICAgICAgICAgICBvZmZzZXQ6IG9mZnNldFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIG9mZnNldCArPSBhdHRyaWJ1dGUuc2l6ZUluQnl0ZXM7XG4gICAgICAgICAgICBtYXhTdHJpZGVNdWx0aXBsZSA9IE1hdGgubWF4KG1heFN0cmlkZU11bHRpcGxlLCBhdHRyaWJ1dGUuc2l6ZU9mVHlwZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIHBhZGRpbmcgdG8gdGhlIGVuZCB0byBzYXRpc2Z5IFdlYkdMJ3MgcmVxdWlyZW1lbnQgdGhhdCBhbGxcbiAgICAgICAgLy8gdmVydGV4QXR0cmliUG9pbnRlciBjYWxscyBoYXZlIGEgc3RyaWRlIHRoYXQgaXMgYSBtdWx0aXBsZSBvZiB0aGVcbiAgICAgICAgLy8gdHlwZSBzaXplLiBCZWNhdXNlIHdlJ3JlIHB1dHRpbmcgZGlmZmVyZW50bHkgc2l6ZWQgYXR0cmlidXRlcyBpbnRvXG4gICAgICAgIC8vIHRoZSBzYW1lIGJ1ZmZlciwgaXQgbXVzdCBiZSBwYWRkZWQgdG8gYSBtdWx0aXBsZSBvZiB0aGUgbGFyZ2VzdFxuICAgICAgICAvLyB0eXBlIHNpemUuXG4gICAgICAgIGlmIChvZmZzZXQgJSBtYXhTdHJpZGVNdWx0aXBsZSAhPT0gMCkge1xuICAgICAgICAgICAgb2Zmc2V0ICs9IG1heFN0cmlkZU11bHRpcGxlIC0gb2Zmc2V0ICUgbWF4U3RyaWRlTXVsdGlwbGU7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oXCJMYXlvdXQgcmVxdWlyZXMgcGFkZGluZyBhdCB0aGUgYmFja1wiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN0cmlkZSA9IG9mZnNldDtcbiAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgYXR0cmlidXRlcykge1xuICAgICAgICAgICAgdGhpc1thdHRyaWJ1dGUua2V5XS5zdHJpZGUgPSB0aGlzLnN0cmlkZTtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuLyoqXG4gKiBBbiBleGNlcHRpb24gZm9yIHdoZW4gdHdvIG9yIG1vcmUgb2YgdGhlIHNhbWUgYXR0cmlidXRlcyBhcmUgZm91bmQgaW4gdGhlXG4gKiBzYW1lIGxheW91dC5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIER1cGxpY2F0ZUF0dHJpYnV0ZUV4Y2VwdGlvbiB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgRHVwbGljYXRlQXR0cmlidXRlRXhjZXB0aW9uXG4gICAgICogQHBhcmFtIHtBdHRyaWJ1dGV9IGF0dHJpYnV0ZSAtIFRoZSBhdHRyaWJ1dGUgdGhhdCB3YXMgZm91bmQgbW9yZSB0aGFuXG4gICAgICogICAgICAgIG9uY2UgaW4gdGhlIHtAbGluayBMYXlvdXR9XG4gICAgICovXG4gICAgY29uc3RydWN0b3IoYXR0cmlidXRlKSB7XG4gICAgICAgIHRoaXMubWVzc2FnZSA9IFwiZm91bmQgZHVwbGljYXRlIGF0dHJpYnV0ZTogXCIgKyBhdHRyaWJ1dGUua2V5O1xuICAgIH1cbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIGhvdyBhIHZlcnRleCBhdHRyaWJ1dGUgc2hvdWxkIGJlIHBhY2tlZCBpbnRvIGFuIGJ1ZmZlci5cbiAqIEBwcml2YXRlXG4gKi9cbmNsYXNzIEF0dHJpYnV0ZSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFuIGF0dHJpYnV0ZS4gRG8gbm90IGNhbGwgdGhpcyBkaXJlY3RseSwgdXNlIHRoZSBwcmVkZWZpbmVkXG4gICAgICogY29uc3RhbnRzLlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgLSBUaGUgbmFtZSBvZiB0aGlzIGF0dHJpYnV0ZSBhcyBpZiBpdCB3ZXJlIGEga2V5IGluXG4gICAgICogICAgICAgIGFuIE9iamVjdC4gVXNlIHRoZSBjYW1lbCBjYXNlIHZlcnNpb24gb2YgdGhlIHVwcGVyIHNuYWtlIGNhc2VcbiAgICAgKiAgICAgICAgY29uc3QgbmFtZS5cbiAgICAgKiBAcGFyYW0ge251bWJlcn0gc2l6ZSAtIFRoZSBudW1iZXIgb2YgY29tcG9uZW50cyBwZXIgdmVydGV4IGF0dHJpYnV0ZS5cbiAgICAgKiAgICAgICAgTXVzdCBiZSAxLCAyLCAzLCBvciA0LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIC0gVGhlIGRhdGEgdHlwZSBvZiBlYWNoIGNvbXBvbmVudCBmb3IgdGhpc1xuICAgICAqICAgICAgICBhdHRyaWJ1dGUuIFBvc3NpYmxlIHZhbHVlczo8YnIvPlxuICAgICAqICAgICAgICBcIkJZVEVcIjogc2lnbmVkIDgtYml0IGludGVnZXIsIHdpdGggdmFsdWVzIGluIFstMTI4LCAxMjddPGJyLz5cbiAgICAgKiAgICAgICAgXCJTSE9SVFwiOiBzaWduZWQgMTYtYml0IGludGVnZXIsIHdpdGggdmFsdWVzIGluXG4gICAgICogICAgICAgICAgICBbLTMyNzY4LCAzMjc2N108YnIvPlxuICAgICAqICAgICAgICBcIlVOU0lHTkVEX0JZVEVcIjogdW5zaWduZWQgOC1iaXQgaW50ZWdlciwgd2l0aCB2YWx1ZXMgaW5cbiAgICAgKiAgICAgICAgICAgIFswLCAyNTVdPGJyLz5cbiAgICAgKiAgICAgICAgXCJVTlNJR05FRF9TSE9SVFwiOiB1bnNpZ25lZCAxNi1iaXQgaW50ZWdlciwgd2l0aCB2YWx1ZXMgaW5cbiAgICAgKiAgICAgICAgICAgIFswLCA2NTUzNV08YnIvPlxuICAgICAqICAgICAgICBcIkZMT0FUXCI6IDMyLWJpdCBmbG9hdGluZyBwb2ludCBudW1iZXJcbiAgICAgKiBAcGFyYW0ge2Jvb2xlYW59IG5vcm1hbGl6ZWQgLSBXaGV0aGVyIGludGVnZXIgZGF0YSB2YWx1ZXMgc2hvdWxkIGJlXG4gICAgICogICAgICAgIG5vcm1hbGl6ZWQgd2hlbiBiZWluZyBjYXN0ZWQgdG8gYSBmbG9hdC48YnIvPlxuICAgICAqICAgICAgICBJZiB0cnVlLCBzaWduZWQgaW50ZWdlcnMgYXJlIG5vcm1hbGl6ZWQgdG8gWy0xLCAxXS48YnIvPlxuICAgICAqICAgICAgICBJZiB0cnVlLCB1bnNpZ25lZCBpbnRlZ2VycyBhcmUgbm9ybWFsaXplZCB0byBbMCwgMV0uPGJyLz5cbiAgICAgKiAgICAgICAgRm9yIHR5cGUgXCJGTE9BVFwiLCB0aGlzIHBhcmFtZXRlciBoYXMgbm8gZWZmZWN0LlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKGtleSwgc2l6ZSwgdHlwZSwgbm9ybWFsaXplZCA9IGZhbHNlKSB7XG4gICAgICAgIHRoaXMua2V5ID0ga2V5O1xuICAgICAgICB0aGlzLnNpemUgPSBzaXplO1xuICAgICAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgICAgICB0aGlzLm5vcm1hbGl6ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5zaXplT2ZUeXBlID0gc2l6ZUluQnl0ZXNPZlR5cGUodHlwZSk7XG4gICAgICAgIHRoaXMuc2l6ZUluQnl0ZXMgPSB0aGlzLnNpemVPZlR5cGUgKiBzaXplO1xuICAgIH1cbn1cblxuLyoqXG4gKiBAcGFyYW0ge3N0cmluZ30gdHlwZSAtIEEgdHlwZSBhY2NlcHRlZCBieSB7QGxpbmsgQXR0cmlidXRlfS5cbiAqIEByZXR1cm4gVGhlIHNpemUgKGluIGJ5dGVzKSBmb3IgYSBnaXZlbiB0eXBlLlxuICogQHNlZSB7QGxpbmsgQXR0cmlidXRlfVxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gc2l6ZUluQnl0ZXNPZlR5cGUodHlwZSkge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlIFwiQllURVwiOlxuICAgICAgICBjYXNlIFwiVU5TSUdORURfQllURVwiOlxuICAgICAgICAgICAgcmV0dXJuIDE7XG4gICAgICAgIGNhc2UgXCJTSE9SVFwiOlxuICAgICAgICBjYXNlIFwiVU5TSUdORURfU0hPUlRcIjpcbiAgICAgICAgICAgIHJldHVybiAyO1xuICAgICAgICBjYXNlIFwiRkxPQVRcIjpcbiAgICAgICAgICAgIHJldHVybiA0O1xuICAgIH1cbn1cblxuLy8gR2VvbWV0cnkgYXR0cmlidXRlc1xuLyoqXG4gKiBBdHRyaWJ1dGUgbGF5b3V0IHRvIHBhY2sgYSB2ZXJ0ZXgncyB4LCB5LCAmIHogYXMgZmxvYXRzXG4gKlxuICogQHNlZSB7QGxpbmsgTGF5b3V0fVxuICovXG5MYXlvdXQuUE9TSVRJT04gPSBuZXcgQXR0cmlidXRlKFwicG9zaXRpb25cIiwgMywgXCJGTE9BVFwiKTtcblxuLyoqXG4gKiBBdHRyaWJ1dGUgbGF5b3V0IHRvIHBhY2sgYSB2ZXJ0ZXgncyBub3JtYWwncyB4LCB5LCAmIHogYXMgZmxvYXRzXG4gKlxuICogQHNlZSB7QGxpbmsgTGF5b3V0fVxuICovXG5MYXlvdXQuTk9STUFMID0gbmV3IEF0dHJpYnV0ZShcIm5vcm1hbFwiLCAzLCBcIkZMT0FUXCIpO1xuXG4vKipcbiAqIEF0dHJpYnV0ZSBsYXlvdXQgdG8gcGFjayBhIHZlcnRleCdzIG5vcm1hbCdzIHgsIHksICYgeiBhcyBmbG9hdHMuXG4gKiA8cD5cbiAqIFRoaXMgdmFsdWUgd2lsbCBiZSBjb21wdXRlZCBvbi10aGUtZmx5IGJhc2VkIG9uIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGVzLlxuICogSWYgbm8gdGV4dHVyZSBjb29yZGluYXRlcyBhcmUgYXZhaWxhYmxlLCB0aGUgZ2VuZXJhdGVkIHZhbHVlIHdpbGwgZGVmYXVsdCB0b1xuICogMCwgMCwgMC5cbiAqXG4gKiBAc2VlIHtAbGluayBMYXlvdXR9XG4gKi9cbkxheW91dC5UQU5HRU5UID0gbmV3IEF0dHJpYnV0ZShcInRhbmdlbnRcIiwgMywgXCJGTE9BVFwiKTtcblxuLyoqXG4gKiBBdHRyaWJ1dGUgbGF5b3V0IHRvIHBhY2sgYSB2ZXJ0ZXgncyBub3JtYWwncyBiaXRhbmdlbnQgeCwgeSwgJiB6IGFzIGZsb2F0cy5cbiAqIDxwPlxuICogVGhpcyB2YWx1ZSB3aWxsIGJlIGNvbXB1dGVkIG9uLXRoZS1mbHkgYmFzZWQgb24gdGhlIHRleHR1cmUgY29vcmRpbmF0ZXMuXG4gKiBJZiBubyB0ZXh0dXJlIGNvb3JkaW5hdGVzIGFyZSBhdmFpbGFibGUsIHRoZSBnZW5lcmF0ZWQgdmFsdWUgd2lsbCBkZWZhdWx0IHRvXG4gKiAwLCAwLCAwLlxuICogQHNlZSB7QGxpbmsgTGF5b3V0fVxuICovXG5MYXlvdXQuQklUQU5HRU5UID0gbmV3IEF0dHJpYnV0ZShcImJpdGFuZ2VudFwiLCAzLCBcIkZMT0FUXCIpO1xuXG4vKipcbiAqIEF0dHJpYnV0ZSBsYXlvdXQgdG8gcGFjayBhIHZlcnRleCdzIHRleHR1cmUgY29vcmRpbmF0ZXMnIHUgJiB2IGFzIGZsb2F0c1xuICpcbiAqIEBzZWUge0BsaW5rIExheW91dH1cbiAqL1xuTGF5b3V0LlVWID0gbmV3IEF0dHJpYnV0ZShcInV2XCIsIDIsIFwiRkxPQVRcIik7XG5cbi8vIE1hdGVyaWFsIGF0dHJpYnV0ZXNcblxuLyoqXG4gKiBBdHRyaWJ1dGUgbGF5b3V0IHRvIHBhY2sgYW4gdW5zaWduZWQgc2hvcnQgdG8gYmUgaW50ZXJwcmV0ZWQgYXMgYSB0aGUgaW5kZXhcbiAqIGludG8gYSB7QGxpbmsgTWVzaH0ncyBtYXRlcmlhbHMgbGlzdC5cbiAqIDxwPlxuICogVGhlIGludGVudGlvbiBvZiB0aGlzIHZhbHVlIGlzIHRvIHNlbmQgYWxsIG9mIHRoZSB7QGxpbmsgTWVzaH0ncyBtYXRlcmlhbHNcbiAqIGludG8gbXVsdGlwbGUgc2hhZGVyIHVuaWZvcm1zIGFuZCB0aGVuIHJlZmVyZW5jZSB0aGUgY3VycmVudCBvbmUgYnkgdGhpc1xuICogdmVydGV4IGF0dHJpYnV0ZS5cbiAqIDxwPlxuICogZXhhbXBsZSBnbHNsIGNvZGU6XG4gKlxuICogPHByZT48Y29kZT5cbiAqICAvLyB0aGlzIGlzIGJvdW5kIHVzaW5nIE1BVEVSSUFMX0lOREVYXG4gKiAgYXR0cmlidXRlIGludCBtYXRlcmlhbEluZGV4O1xuICpcbiAqICBzdHJ1Y3QgTWF0ZXJpYWwge1xuICogICAgdmVjMyBkaWZmdXNlO1xuICogICAgdmVjMyBzcGVjdWxhcjtcbiAqICAgIHZlYzMgc3BlY3VsYXJFeHBvbmVudDtcbiAqICB9O1xuICpcbiAqICB1bmlmb3JtIE1hdGVyaWFsIG1hdGVyaWFsc1tNQVhfTUFURVJJQUxTXTtcbiAqXG4gKiAgLy8gLi4uXG4gKlxuICogIHZlYzMgZGlmZnVzZSA9IG1hdGVyaWFsc1ttYXRlcmlhbEluZGV4XTtcbiAqXG4gKiA8L2NvZGU+PC9wcmU+XG4gKiBUT0RPOiBNb3JlIGRlc2NyaXB0aW9uICYgdGVzdCB0byBtYWtlIHN1cmUgc3Vic2NyaXB0aW5nIGJ5IGF0dHJpYnV0ZXMgZXZlblxuICogd29ya3MgZm9yIHdlYmdsXG4gKlxuICogQHNlZSB7QGxpbmsgTGF5b3V0fVxuICovXG5MYXlvdXQuTUFURVJJQUxfSU5ERVggPSBuZXcgQXR0cmlidXRlKFwibWF0ZXJpYWxJbmRleFwiLCAxLCBcIlNIT1JUXCIpO1xuTGF5b3V0Lk1BVEVSSUFMX0VOQUJMRUQgPSBuZXcgQXR0cmlidXRlKFwibWF0ZXJpYWxFbmFibGVkXCIsIDEsIFwiVU5TSUdORURfU0hPUlRcIik7XG5MYXlvdXQuQU1CSUVOVCA9IG5ldyBBdHRyaWJ1dGUoXCJhbWJpZW50XCIsIDMsIFwiRkxPQVRcIik7XG5MYXlvdXQuRElGRlVTRSA9IG5ldyBBdHRyaWJ1dGUoXCJkaWZmdXNlXCIsIDMsIFwiRkxPQVRcIik7XG5MYXlvdXQuU1BFQ1VMQVIgPSBuZXcgQXR0cmlidXRlKFwic3BlY3VsYXJcIiwgMywgXCJGTE9BVFwiKTtcbkxheW91dC5TUEVDVUxBUl9FWFBPTkVOVCA9IG5ldyBBdHRyaWJ1dGUoXCJzcGVjdWxhckV4cG9uZW50XCIsIDMsIFwiRkxPQVRcIik7XG5MYXlvdXQuRU1JU1NJVkUgPSBuZXcgQXR0cmlidXRlKFwiZW1pc3NpdmVcIiwgMywgXCJGTE9BVFwiKTtcbkxheW91dC5UUkFOU01JU1NJT05fRklMVEVSID0gbmV3IEF0dHJpYnV0ZShcInRyYW5zbWlzc2lvbkZpbHRlclwiLCAzLCBcIkZMT0FUXCIpO1xuTGF5b3V0LkRJU1NPTFZFID0gbmV3IEF0dHJpYnV0ZShcImRpc3NvbHZlXCIsIDEsIFwiRkxPQVRcIik7XG5MYXlvdXQuSUxMVU1JTkFUSU9OID0gbmV3IEF0dHJpYnV0ZShcImlsbHVtaW5hdGlvblwiLCAxLCBcIlVOU0lHTkVEX1NIT1JUXCIpO1xuTGF5b3V0LlJFRlJBQ1RJT05fSU5ERVggPSBuZXcgQXR0cmlidXRlKFwicmVmcmFjdGlvbkluZGV4XCIsIDEsIFwiRkxPQVRcIik7XG5MYXlvdXQuU0hBUlBORVNTID0gbmV3IEF0dHJpYnV0ZShcInNoYXJwbmVzc1wiLCAxLCBcIkZMT0FUXCIpO1xuTGF5b3V0Lk1BUF9ESUZGVVNFID0gbmV3IEF0dHJpYnV0ZShcIm1hcERpZmZ1c2VcIiwgMSwgXCJTSE9SVFwiKTtcbkxheW91dC5NQVBfQU1CSUVOVCA9IG5ldyBBdHRyaWJ1dGUoXCJtYXBBbWJpZW50XCIsIDEsIFwiU0hPUlRcIik7XG5MYXlvdXQuTUFQX1NQRUNVTEFSID0gbmV3IEF0dHJpYnV0ZShcIm1hcFNwZWN1bGFyXCIsIDEsIFwiU0hPUlRcIik7XG5MYXlvdXQuTUFQX1NQRUNVTEFSX0VYUE9ORU5UID0gbmV3IEF0dHJpYnV0ZShcIm1hcFNwZWN1bGFyRXhwb25lbnRcIiwgMSwgXCJTSE9SVFwiKTtcbkxheW91dC5NQVBfRElTU09MVkUgPSBuZXcgQXR0cmlidXRlKFwibWFwRGlzc29sdmVcIiwgMSwgXCJTSE9SVFwiKTtcbkxheW91dC5BTlRJX0FMSUFTSU5HID0gbmV3IEF0dHJpYnV0ZShcImFudGlBbGlhc2luZ1wiLCAxLCBcIlVOU0lHTkVEX1NIT1JUXCIpO1xuTGF5b3V0Lk1BUF9CVU1QID0gbmV3IEF0dHJpYnV0ZShcIm1hcEJ1bXBcIiwgMSwgXCJTSE9SVFwiKTtcbkxheW91dC5NQVBfRElTUExBQ0VNRU5UID0gbmV3IEF0dHJpYnV0ZShcIm1hcERpc3BsYWNlbWVudFwiLCAxLCBcIlNIT1JUXCIpO1xuTGF5b3V0Lk1BUF9ERUNBTCA9IG5ldyBBdHRyaWJ1dGUoXCJtYXBEZWNhbFwiLCAxLCBcIlNIT1JUXCIpO1xuTGF5b3V0Lk1BUF9FTUlTU0lWRSA9IG5ldyBBdHRyaWJ1dGUoXCJtYXBFbWlzc2l2ZVwiLCAxLCBcIlNIT1JUXCIpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2xheW91dC5qcyIsImltcG9ydCB7IExheW91dCB9IGZyb20gXCIuL2xheW91dFwiO1xuXG4vKipcbiAqIFRoZSBtYWluIE1lc2ggY2xhc3MuIFRoZSBjb25zdHJ1Y3RvciB3aWxsIHBhcnNlIHRocm91Z2ggdGhlIE9CSiBmaWxlIGRhdGFcbiAqIGFuZCBjb2xsZWN0IHRoZSB2ZXJ0ZXgsIHZlcnRleCBub3JtYWwsIHRleHR1cmUsIGFuZCBmYWNlIGluZm9ybWF0aW9uLiBUaGlzXG4gKiBpbmZvcm1hdGlvbiBjYW4gdGhlbiBiZSB1c2VkIGxhdGVyIG9uIHdoZW4gY3JlYXRpbmcgeW91ciBWQk9zLiBTZWVcbiAqIE9CSi5pbml0TWVzaEJ1ZmZlcnMgZm9yIGFuIGV4YW1wbGUgb2YgaG93IHRvIHVzZSB0aGUgbmV3bHkgY3JlYXRlZCBNZXNoXG4gKi9cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1lc2gge1xuICAgIC8qKlxuICAgICAqIENyZWF0ZSBhIE1lc2hcbiAgICAgKiBAcGFyYW0ge1N0cmluZ30gb2JqZWN0RGF0YSAtIGEgc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIGFuIE9CSiBmaWxlIHdpdGhcbiAgICAgKiAgICAgbmV3bGluZXMgcHJlc2VydmVkLlxuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gYSBKUyBvYmplY3QgY29udGFpbmluZyB2YWxpZCBvcHRpb25zLiBTZWUgY2xhc3NcbiAgICAgKiAgICAgZG9jdW1lbnRhdGlvbiBmb3Igb3B0aW9ucy5cbiAgICAgKiBAcGFyYW0ge2Jvb2x9IG9wdGlvbnMuZW5hYmxlV1RleHR1cmVDb29yZCAtIFRleHR1cmUgY29vcmRpbmF0ZXMgY2FuIGhhdmVcbiAgICAgKiAgICAgYW4gb3B0aW9uYWwgXCJ3XCIgY29vcmRpbmF0ZSBhZnRlciB0aGUgdSBhbmQgdiBjb29yZGluYXRlcy4gVGhpcyBleHRyYVxuICAgICAqICAgICB2YWx1ZSBjYW4gYmUgdXNlZCBpbiBvcmRlciB0byBwZXJmb3JtIGZhbmN5IHRyYW5zZm9ybWF0aW9ucyBvbiB0aGVcbiAgICAgKiAgICAgdGV4dHVyZXMgdGhlbXNlbHZlcy4gRGVmYXVsdCBpcyB0byB0cnVuY2F0ZSB0byBvbmx5IHRoZSB1IGFuIHZcbiAgICAgKiAgICAgY29vcmRpbmF0ZXMuIFBhc3NpbmcgdHJ1ZSB3aWxsIHByb3ZpZGUgYSBkZWZhdWx0IHZhbHVlIG9mIDAgaW4gdGhlXG4gICAgICogICAgIGV2ZW50IHRoYXQgYW55IG9yIGFsbCB0ZXh0dXJlIGNvb3JkaW5hdGVzIGRvbid0IHByb3ZpZGUgYSB3IHZhbHVlLlxuICAgICAqICAgICBBbHdheXMgdXNlIHRoZSB0ZXh0dXJlU3RyaWRlIGF0dHJpYnV0ZSBpbiBvcmRlciB0byBkZXRlcm1pbmUgdGhlXG4gICAgICogICAgIHN0cmlkZSBsZW5ndGggb2YgdGhlIHRleHR1cmUgY29vcmRpbmF0ZXMgd2hlbiByZW5kZXJpbmcgdGhlIGVsZW1lbnRcbiAgICAgKiAgICAgYXJyYXkuXG4gICAgICogQHBhcmFtIHtib29sfSBvcHRpb25zLmNhbGNUYW5nZW50c0FuZEJpdGFuZ2VudHMgLSBDYWxjdWxhdGUgdGhlIHRhbmdlbnRzXG4gICAgICogICAgIGFuZCBiaXRhbmdlbnRzIHdoZW4gbG9hZGluZyBvZiB0aGUgT0JKIGlzIGNvbXBsZXRlZC4gVGhpcyBhZGRzIHR3byBuZXdcbiAgICAgKiAgICAgYXR0cmlidXRlcyB0byB0aGUgTWVzaCBpbnN0YW5jZTogYHRhbmdlbnRzYCBhbmQgYGJpdGFuZ2VudHNgLlxuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG9iamVjdERhdGEsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICAgIG9wdGlvbnMubWF0ZXJpYWxzID0gb3B0aW9ucy5tYXRlcmlhbHMgfHwge307XG4gICAgICAgIG9wdGlvbnMuZW5hYmxlV1RleHR1cmVDb29yZCA9ICEhb3B0aW9ucy5lbmFibGVXVGV4dHVyZUNvb3JkO1xuICAgICAgICBvcHRpb25zLmluZGljZXNQZXJNYXRlcmlhbCA9ICEhb3B0aW9ucy5pbmRpY2VzUGVyTWF0ZXJpYWw7XG5cbiAgICAgICAgbGV0IHNlbGYgPSB0aGlzO1xuICAgICAgICAvLyB0aGUgbGlzdCBvZiB1bmlxdWUgdmVydGV4LCBub3JtYWwsIHRleHR1cmUsIGF0dHJpYnV0ZXNcbiAgICAgICAgc2VsZi52ZXJ0aWNlcyA9IFtdO1xuICAgICAgICBzZWxmLnZlcnRleE5vcm1hbHMgPSBbXTtcbiAgICAgICAgc2VsZi50ZXh0dXJlcyA9IFtdO1xuICAgICAgICAvLyB0aGUgaW5kaWNpZXMgdG8gZHJhdyB0aGUgZmFjZXNcbiAgICAgICAgc2VsZi5pbmRpY2VzID0gW107XG4gICAgICAgIHNlbGYudGV4dHVyZVN0cmlkZSA9IG9wdGlvbnMuZW5hYmxlV1RleHR1cmVDb29yZCA/IDMgOiAyO1xuXG4gICAgICAgIC8qXG4gICAgICAgIFRoZSBPQkogZmlsZSBmb3JtYXQgZG9lcyBhIHNvcnQgb2YgY29tcHJlc3Npb24gd2hlbiBzYXZpbmcgYSBtb2RlbCBpbiBhXG4gICAgICAgIHByb2dyYW0gbGlrZSBCbGVuZGVyLiBUaGVyZSBhcmUgYXQgbGVhc3QgMyBzZWN0aW9ucyAoNCBpbmNsdWRpbmcgdGV4dHVyZXMpXG4gICAgICAgIHdpdGhpbiB0aGUgZmlsZS4gRWFjaCBsaW5lIGluIGEgc2VjdGlvbiBiZWdpbnMgd2l0aCB0aGUgc2FtZSBzdHJpbmc6XG4gICAgICAgICAgKiAndic6IGluZGljYXRlcyB2ZXJ0ZXggc2VjdGlvblxuICAgICAgICAgICogJ3ZuJzogaW5kaWNhdGVzIHZlcnRleCBub3JtYWwgc2VjdGlvblxuICAgICAgICAgICogJ2YnOiBpbmRpY2F0ZXMgdGhlIGZhY2VzIHNlY3Rpb25cbiAgICAgICAgICAqICd2dCc6IGluZGljYXRlcyB2ZXJ0ZXggdGV4dHVyZSBzZWN0aW9uIChpZiB0ZXh0dXJlcyB3ZXJlIHVzZWQgb24gdGhlIG1vZGVsKVxuICAgICAgICBFYWNoIG9mIHRoZSBhYm92ZSBzZWN0aW9ucyAoZXhjZXB0IGZvciB0aGUgZmFjZXMgc2VjdGlvbikgaXMgYSBsaXN0L3NldCBvZlxuICAgICAgICB1bmlxdWUgdmVydGljZXMuXG5cbiAgICAgICAgRWFjaCBsaW5lIG9mIHRoZSBmYWNlcyBzZWN0aW9uIGNvbnRhaW5zIGEgbGlzdCBvZlxuICAgICAgICAodmVydGV4LCBbdGV4dHVyZV0sIG5vcm1hbCkgZ3JvdXBzLlxuXG4gICAgICAgICoqTm90ZToqKiBUaGUgZm9sbG93aW5nIGRvY3VtZW50YXRpb24gd2lsbCB1c2UgYSBjYXBpdGFsIFwiVlwiIFZlcnRleCB0b1xuICAgICAgICBkZW5vdGUgdGhlIGFib3ZlICh2ZXJ0ZXgsIFt0ZXh0dXJlXSwgbm9ybWFsKSBncm91cHMgd2hlcmVhcyBhIGxvd2VyY2FzZVxuICAgICAgICBcInZcIiB2ZXJ0ZXggaXMgdXNlZCB0byBkZW5vdGUgYW4gWCwgWSwgWiBjb29yZGluYXRlLlxuXG4gICAgICAgIFNvbWUgZXhhbXBsZXM6XG4gICAgICAgICAgICAvLyB0aGUgdGV4dHVyZSBpbmRleCBpcyBvcHRpb25hbCwgYm90aCBmb3JtYXRzIGFyZSBwb3NzaWJsZSBmb3IgbW9kZWxzXG4gICAgICAgICAgICAvLyB3aXRob3V0IGEgdGV4dHVyZSBhcHBsaWVkXG4gICAgICAgICAgICBmIDEvMjUgMTgvNDYgMTIvMzFcbiAgICAgICAgICAgIGYgMS8vMjUgMTgvLzQ2IDEyLy8zMVxuXG4gICAgICAgICAgICAvLyBBIDMgdmVydGV4IGZhY2Ugd2l0aCB0ZXh0dXJlIGluZGljZXNcbiAgICAgICAgICAgIGYgMTYvOTIvMTEgMTQvMTAxLzIyIDEvNjkvMVxuXG4gICAgICAgICAgICAvLyBBIDQgdmVydGV4IGZhY2VcbiAgICAgICAgICAgIGYgMTYvOTIvMTEgNDAvMTA5LzQwIDM4LzExNC8zOCAxNC8xMDEvMjJcblxuICAgICAgICBUaGUgZmlyc3QgdHdvIGxpbmVzIGFyZSBleGFtcGxlcyBvZiBhIDMgdmVydGV4IGZhY2Ugd2l0aG91dCBhIHRleHR1cmUgYXBwbGllZC5cbiAgICAgICAgVGhlIHNlY29uZCBpcyBhbiBleGFtcGxlIG9mIGEgMyB2ZXJ0ZXggZmFjZSB3aXRoIGEgdGV4dHVyZSBhcHBsaWVkLlxuICAgICAgICBUaGUgdGhpcmQgaXMgYW4gZXhhbXBsZSBvZiBhIDQgdmVydGV4IGZhY2UuIE5vdGU6IGEgZmFjZSBjYW4gY29udGFpbiBOXG4gICAgICAgIG51bWJlciBvZiB2ZXJ0aWNlcy5cblxuICAgICAgICBFYWNoIG51bWJlciB0aGF0IGFwcGVhcnMgaW4gb25lIG9mIHRoZSBncm91cHMgaXMgYSAxLWJhc2VkIGluZGV4XG4gICAgICAgIGNvcnJlc3BvbmRpbmcgdG8gYW4gaXRlbSBmcm9tIHRoZSBvdGhlciBzZWN0aW9ucyAobWVhbmluZyB0aGF0IGluZGV4aW5nXG4gICAgICAgIHN0YXJ0cyBhdCBvbmUgYW5kICpub3QqIHplcm8pLlxuXG4gICAgICAgIEZvciBleGFtcGxlOlxuICAgICAgICAgICAgYGYgMTYvOTIvMTFgIGlzIHNheWluZyB0b1xuICAgICAgICAgICAgICAtIHRha2UgdGhlIDE2dGggZWxlbWVudCBmcm9tIHRoZSBbdl0gdmVydGV4IGFycmF5XG4gICAgICAgICAgICAgIC0gdGFrZSB0aGUgOTJuZCBlbGVtZW50IGZyb20gdGhlIFt2dF0gdGV4dHVyZSBhcnJheVxuICAgICAgICAgICAgICAtIHRha2UgdGhlIDExdGggZWxlbWVudCBmcm9tIHRoZSBbdm5dIG5vcm1hbCBhcnJheVxuICAgICAgICAgICAgYW5kIHRvZ2V0aGVyIHRoZXkgbWFrZSBhIHVuaXF1ZSB2ZXJ0ZXguXG4gICAgICAgIFVzaW5nIGFsbCAzKyB1bmlxdWUgVmVydGljZXMgZnJvbSB0aGUgZmFjZSBsaW5lIHdpbGwgcHJvZHVjZSBhIHBvbHlnb24uXG5cbiAgICAgICAgTm93LCB5b3UgY291bGQganVzdCBnbyB0aHJvdWdoIHRoZSBPQkogZmlsZSBhbmQgY3JlYXRlIGEgbmV3IHZlcnRleCBmb3JcbiAgICAgICAgZWFjaCBmYWNlIGxpbmUgYW5kIFdlYkdMIHdpbGwgZHJhdyB3aGF0IGFwcGVhcnMgdG8gYmUgdGhlIHNhbWUgbW9kZWwuXG4gICAgICAgIEhvd2V2ZXIsIHZlcnRpY2VzIHdpbGwgYmUgb3ZlcmxhcHBlZCBhbmQgZHVwbGljYXRlZCBhbGwgb3ZlciB0aGUgcGxhY2UuXG5cbiAgICAgICAgQ29uc2lkZXIgYSBjdWJlIGluIDNEIHNwYWNlIGNlbnRlcmVkIGFib3V0IHRoZSBvcmlnaW4gYW5kIGVhY2ggc2lkZSBpc1xuICAgICAgICAyIHVuaXRzIGxvbmcuIFRoZSBmcm9udCBmYWNlICh3aXRoIHRoZSBwb3NpdGl2ZSBaLWF4aXMgcG9pbnRpbmcgdG93YXJkc1xuICAgICAgICB5b3UpIHdvdWxkIGhhdmUgYSBUb3AgUmlnaHQgdmVydGV4IChsb29raW5nIG9ydGhvZ29uYWwgdG8gaXRzIG5vcm1hbClcbiAgICAgICAgbWFwcGVkIGF0ICgxLDEsMSkgVGhlIHJpZ2h0IGZhY2Ugd291bGQgaGF2ZSBhIFRvcCBMZWZ0IHZlcnRleCAobG9va2luZ1xuICAgICAgICBvcnRob2dvbmFsIHRvIGl0cyBub3JtYWwpIGF0ICgxLDEsMSkgYW5kIHRoZSB0b3AgZmFjZSB3b3VsZCBoYXZlIGEgQm90dG9tXG4gICAgICAgIFJpZ2h0IHZlcnRleCAobG9va2luZyBvcnRob2dvbmFsIHRvIGl0cyBub3JtYWwpIGF0ICgxLDEsMSkuIEVhY2ggZmFjZVxuICAgICAgICBoYXMgYSB2ZXJ0ZXggYXQgdGhlIHNhbWUgY29vcmRpbmF0ZXMsIGhvd2V2ZXIsIHRocmVlIGRpc3RpbmN0IHZlcnRpY2VzXG4gICAgICAgIHdpbGwgYmUgZHJhd24gYXQgdGhlIHNhbWUgc3BvdC5cblxuICAgICAgICBUbyBzb2x2ZSB0aGUgaXNzdWUgb2YgZHVwbGljYXRlIFZlcnRpY2VzICh0aGUgYCh2ZXJ0ZXgsIFt0ZXh0dXJlXSwgbm9ybWFsKWBcbiAgICAgICAgZ3JvdXBzKSwgd2hpbGUgaXRlcmF0aW5nIHRocm91Z2ggdGhlIGZhY2UgbGluZXMsIHdoZW4gYSBncm91cCBpcyBlbmNvdW50ZXJlZFxuICAgICAgICB0aGUgd2hvbGUgZ3JvdXAgc3RyaW5nICgnMTYvOTIvMTEnKSBpcyBjaGVja2VkIHRvIHNlZSBpZiBpdCBleGlzdHMgaW4gdGhlXG4gICAgICAgIHBhY2tlZC5oYXNoaW5kaWNlcyBvYmplY3QsIGFuZCBpZiBpdCBkb2Vzbid0LCB0aGUgaW5kaWNlcyBpdCBzcGVjaWZpZXNcbiAgICAgICAgYXJlIHVzZWQgdG8gbG9vayB1cCBlYWNoIGF0dHJpYnV0ZSBpbiB0aGUgY29ycmVzcG9uZGluZyBhdHRyaWJ1dGUgYXJyYXlzXG4gICAgICAgIGFscmVhZHkgY3JlYXRlZC4gVGhlIHZhbHVlcyBhcmUgdGhlbiBjb3BpZWQgdG8gdGhlIGNvcnJlc3BvbmRpbmcgdW5wYWNrZWRcbiAgICAgICAgYXJyYXkgKGZsYXR0ZW5lZCB0byBwbGF5IG5pY2Ugd2l0aCBXZWJHTCdzIEVMRU1FTlRfQVJSQVlfQlVGRkVSIGluZGV4aW5nKSxcbiAgICAgICAgdGhlIGdyb3VwIHN0cmluZyBpcyBhZGRlZCB0byB0aGUgaGFzaGluZGljZXMgc2V0IGFuZCB0aGUgY3VycmVudCB1bnBhY2tlZFxuICAgICAgICBpbmRleCBpcyB1c2VkIGFzIHRoaXMgaGFzaGluZGljZXMgdmFsdWUgc28gdGhhdCB0aGUgZ3JvdXAgb2YgZWxlbWVudHMgY2FuXG4gICAgICAgIGJlIHJldXNlZC4gVGhlIHVucGFja2VkIGluZGV4IGlzIGluY3JlbWVudGVkLiBJZiB0aGUgZ3JvdXAgc3RyaW5nIGFscmVhZHlcbiAgICAgICAgZXhpc3RzIGluIHRoZSBoYXNoaW5kaWNlcyBvYmplY3QsIGl0cyBjb3JyZXNwb25kaW5nIHZhbHVlIGlzIHRoZSBpbmRleCBvZlxuICAgICAgICB0aGF0IGdyb3VwIGFuZCBpcyBhcHBlbmRlZCB0byB0aGUgdW5wYWNrZWQgaW5kaWNlcyBhcnJheS5cbiAgICAgICAqL1xuICAgICAgICB0aGlzLm5hbWUgPSBcIlwiO1xuICAgICAgICBjb25zdCB2ZXJ0cyA9IFtdO1xuICAgICAgICBjb25zdCB2ZXJ0Tm9ybWFscyA9IFtdO1xuICAgICAgICBjb25zdCB0ZXh0dXJlcyA9IFtdO1xuICAgICAgICBjb25zdCB1bnBhY2tlZCA9IHt9O1xuICAgICAgICBjb25zdCBtYXRlcmlhbE5hbWVzQnlJbmRleCA9IFtdO1xuICAgICAgICBjb25zdCBtYXRlcmlhbEluZGljZXNCeU5hbWUgPSB7fTtcbiAgICAgICAgLy8ga2VlcCB0cmFjayBvZiB3aGF0IG1hdGVyaWFsIHdlJ3ZlIHNlZW4gbGFzdFxuICAgICAgICBsZXQgY3VycmVudE1hdGVyaWFsSW5kZXggPSAtMTtcbiAgICAgICAgLy8ga2VlcCB0cmFjayBpZiBwdXNoaW5nIGluZGljZXMgYnkgbWF0ZXJpYWxzIC0gb3RoZXJ3aXNlIG5vdCB1c2VkXG4gICAgICAgIGxldCBjdXJyZW50T2JqZWN0QnlNYXRlcmlhbEluZGV4ID0gMDtcbiAgICAgICAgLy8gdW5wYWNraW5nIHN0dWZmXG4gICAgICAgIHVucGFja2VkLnZlcnRzID0gW107XG4gICAgICAgIHVucGFja2VkLm5vcm1zID0gW107XG4gICAgICAgIHVucGFja2VkLnRleHR1cmVzID0gW107XG4gICAgICAgIHVucGFja2VkLmhhc2hpbmRpY2VzID0ge307XG4gICAgICAgIHVucGFja2VkLmluZGljZXMgPSBbW11dO1xuICAgICAgICB1bnBhY2tlZC5tYXRlcmlhbEluZGljZXMgPSBbXTtcbiAgICAgICAgdW5wYWNrZWQuaW5kZXggPSAwO1xuXG4gICAgICAgIGNvbnN0IFZFUlRFWF9SRSA9IC9edlxccy87XG4gICAgICAgIGNvbnN0IE5PUk1BTF9SRSA9IC9edm5cXHMvO1xuICAgICAgICBjb25zdCBURVhUVVJFX1JFID0gL152dFxccy87XG4gICAgICAgIGNvbnN0IEZBQ0VfUkUgPSAvXmZcXHMvO1xuICAgICAgICBjb25zdCBXSElURVNQQUNFX1JFID0gL1xccysvO1xuICAgICAgICBjb25zdCBVU0VfTUFURVJJQUxfUkUgPSAvXnVzZW10bC87XG5cbiAgICAgICAgLy8gYXJyYXkgb2YgbGluZXMgc2VwYXJhdGVkIGJ5IHRoZSBuZXdsaW5lXG4gICAgICAgIGNvbnN0IGxpbmVzID0gb2JqZWN0RGF0YS5zcGxpdChcIlxcblwiKTtcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBsaW5lID0gbGluZXNbaV0udHJpbSgpO1xuICAgICAgICAgICAgaWYgKCFsaW5lIHx8IGxpbmUuc3RhcnRzV2l0aChcIiNcIikpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNvbnN0IGVsZW1lbnRzID0gbGluZS5zcGxpdChXSElURVNQQUNFX1JFKTtcbiAgICAgICAgICAgIGVsZW1lbnRzLnNoaWZ0KCk7XG5cbiAgICAgICAgICAgIGlmIChWRVJURVhfUkUudGVzdChsaW5lKSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYSB2ZXJ0ZXhcbiAgICAgICAgICAgICAgICB2ZXJ0cy5wdXNoKC4uLmVsZW1lbnRzKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTk9STUFMX1JFLnRlc3QobGluZSkpIHtcbiAgICAgICAgICAgICAgICAvLyBpZiB0aGlzIGlzIGEgdmVydGV4IG5vcm1hbFxuICAgICAgICAgICAgICAgIHZlcnROb3JtYWxzLnB1c2goLi4uZWxlbWVudHMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChURVhUVVJFX1JFLnRlc3QobGluZSkpIHtcbiAgICAgICAgICAgICAgICBsZXQgY29vcmRzID0gZWxlbWVudHM7XG4gICAgICAgICAgICAgICAgLy8gYnkgZGVmYXVsdCwgdGhlIGxvYWRlciB3aWxsIG9ubHkgbG9vayBhdCB0aGUgVSBhbmQgVlxuICAgICAgICAgICAgICAgIC8vIGNvb3JkaW5hdGVzIG9mIHRoZSB2dCBkZWNsYXJhdGlvbi4gU28sIHRoaXMgdHJ1bmNhdGVzIHRoZVxuICAgICAgICAgICAgICAgIC8vIGVsZW1lbnRzIHRvIG9ubHkgdGhvc2UgMiB2YWx1ZXMuIElmIFcgdGV4dHVyZSBjb29yZGluYXRlXG4gICAgICAgICAgICAgICAgLy8gc3VwcG9ydCBpcyBlbmFibGVkLCB0aGVuIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGUgaXNcbiAgICAgICAgICAgICAgICAvLyBleHBlY3RlZCB0byBoYXZlIHRocmVlIHZhbHVlcyBpbiBpdC5cbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudHMubGVuZ3RoID4gMiAmJiAhb3B0aW9ucy5lbmFibGVXVGV4dHVyZUNvb3JkKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvb3JkcyA9IGVsZW1lbnRzLnNsaWNlKDAsIDIpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoZWxlbWVudHMubGVuZ3RoID09PSAyICYmIG9wdGlvbnMuZW5hYmxlV1RleHR1cmVDb29yZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBJZiBmb3Igc29tZSByZWFzb24gVyB0ZXh0dXJlIGNvb3JkaW5hdGUgc3VwcG9ydCBpcyBlbmFibGVkXG4gICAgICAgICAgICAgICAgICAgIC8vIGFuZCBvbmx5IHRoZSBVIGFuZCBWIGNvb3JkaW5hdGVzIGFyZSBnaXZlbiwgdGhlbiB3ZSBzdXBwbHlcbiAgICAgICAgICAgICAgICAgICAgLy8gdGhlIGRlZmF1bHQgdmFsdWUgb2YgMCBzbyB0aGF0IHRoZSBzdHJpZGUgbGVuZ3RoIGlzIGNvcnJlY3RcbiAgICAgICAgICAgICAgICAgICAgLy8gd2hlbiB0aGUgdGV4dHVyZXMgYXJlIHVucGFja2VkIGJlbG93LlxuICAgICAgICAgICAgICAgICAgICBjb29yZHMucHVzaCgwKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGV4dHVyZXMucHVzaCguLi5jb29yZHMpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChVU0VfTUFURVJJQUxfUkUudGVzdChsaW5lKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsTmFtZSA9IGVsZW1lbnRzWzBdO1xuXG4gICAgICAgICAgICAgICAgLy8gY2hlY2sgdG8gc2VlIGlmIHdlJ3ZlIGV2ZXIgc2VlbiBpdCBiZWZvcmVcbiAgICAgICAgICAgICAgICBpZiAoIShtYXRlcmlhbE5hbWUgaW4gbWF0ZXJpYWxJbmRpY2VzQnlOYW1lKSkge1xuICAgICAgICAgICAgICAgICAgICAvLyBuZXcgbWF0ZXJpYWwgd2UndmUgbmV2ZXIgc2VlblxuICAgICAgICAgICAgICAgICAgICBtYXRlcmlhbE5hbWVzQnlJbmRleC5wdXNoKG1hdGVyaWFsTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIG1hdGVyaWFsSW5kaWNlc0J5TmFtZVttYXRlcmlhbE5hbWVdID0gbWF0ZXJpYWxOYW1lc0J5SW5kZXgubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgLy8gcHVzaCBuZXcgYXJyYXkgaW50byBpbmRpY2VzXG4gICAgICAgICAgICAgICAgICAgIGlmIChvcHRpb25zLmluZGljZXNQZXJNYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYWxyZWFkeSBjb250YWlucyBhbiBhcnJheSBhdCBpbmRleCB6ZXJvLCBkb24ndCBhZGRcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtYXRlcmlhbEluZGljZXNCeU5hbWVbbWF0ZXJpYWxOYW1lXSA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnBhY2tlZC5pbmRpY2VzLnB1c2goW10pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIC8vIGtlZXAgdHJhY2sgb2YgdGhlIGN1cnJlbnQgbWF0ZXJpYWwgaW5kZXhcbiAgICAgICAgICAgICAgICBjdXJyZW50TWF0ZXJpYWxJbmRleCA9IG1hdGVyaWFsSW5kaWNlc0J5TmFtZVttYXRlcmlhbE5hbWVdO1xuICAgICAgICAgICAgICAgIC8vIHVwZGF0ZSBjdXJyZW50IGluZGV4IGFycmF5XG4gICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuaW5kaWNlc1Blck1hdGVyaWFsKSB7XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRPYmplY3RCeU1hdGVyaWFsSW5kZXggPSBjdXJyZW50TWF0ZXJpYWxJbmRleDtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKEZBQ0VfUkUudGVzdChsaW5lKSkge1xuICAgICAgICAgICAgICAgIC8vIGlmIHRoaXMgaXMgYSBmYWNlXG4gICAgICAgICAgICAgICAgLypcbiAgICAgICAgICAgICAgICBzcGxpdCB0aGlzIGZhY2UgaW50byBhbiBhcnJheSBvZiBWZXJ0ZXggZ3JvdXBzXG4gICAgICAgICAgICAgICAgZm9yIGV4YW1wbGU6XG4gICAgICAgICAgICAgICAgICAgZiAxNi85Mi8xMSAxNC8xMDEvMjIgMS82OS8xXG4gICAgICAgICAgICAgICAgYmVjb21lczpcbiAgICAgICAgICAgICAgICAgIFsnMTYvOTIvMTEnLCAnMTQvMTAxLzIyJywgJzEvNjkvMSddO1xuICAgICAgICAgICAgICAgICovXG4gICAgICAgICAgICAgICAgbGV0IHF1YWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBqID0gMCwgZWxlTGVuID0gZWxlbWVudHMubGVuZ3RoOyBqIDwgZWxlTGVuOyBqKyspIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gVHJpYW5ndWxhdGluZyBxdWFkc1xuICAgICAgICAgICAgICAgICAgICAvLyBxdWFkOiAnZiB2MC90MC92bjAgdjEvdDEvdm4xIHYyL3QyL3ZuMiB2My90My92bjMvJ1xuICAgICAgICAgICAgICAgICAgICAvLyBjb3JyZXNwb25kaW5nIHRyaWFuZ2xlczpcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAnZiB2MC90MC92bjAgdjEvdDEvdm4xIHYyL3QyL3ZuMidcbiAgICAgICAgICAgICAgICAgICAgLy8gICAgICAnZiB2Mi90Mi92bjIgdjMvdDMvdm4zIHYwL3QwL3ZuMCdcbiAgICAgICAgICAgICAgICAgICAgaWYgKGogPT09IDMgJiYgIXF1YWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCB2Mi90Mi92bjIgaW4gYWdhaW4gYmVmb3JlIGNvbnRpbnVpbmcgdG8gM1xuICAgICAgICAgICAgICAgICAgICAgICAgaiA9IDI7XG4gICAgICAgICAgICAgICAgICAgICAgICBxdWFkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBoYXNoMCA9IGVsZW1lbnRzWzBdICsgXCIsXCIgKyBjdXJyZW50TWF0ZXJpYWxJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFzaCA9IGVsZW1lbnRzW2pdICsgXCIsXCIgKyBjdXJyZW50TWF0ZXJpYWxJbmRleDtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhc2ggaW4gdW5wYWNrZWQuaGFzaGluZGljZXMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVucGFja2VkLmluZGljZXNbY3VycmVudE9iamVjdEJ5TWF0ZXJpYWxJbmRleF0ucHVzaCh1bnBhY2tlZC5oYXNoaW5kaWNlc1toYXNoXSk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAvKlxuICAgICAgICAgICAgICAgICAgICAgICAgRWFjaCBlbGVtZW50IG9mIHRoZSBmYWNlIGxpbmUgYXJyYXkgaXMgYSBWZXJ0ZXggd2hpY2ggaGFzIGl0c1xuICAgICAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlcyBkZWxpbWl0ZWQgYnkgYSBmb3J3YXJkIHNsYXNoLiBUaGlzIHdpbGwgc2VwYXJhdGVcbiAgICAgICAgICAgICAgICAgICAgICAgIGVhY2ggYXR0cmlidXRlIGludG8gYW5vdGhlciBhcnJheTpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAnMTkvOTIvMTEnXG4gICAgICAgICAgICAgICAgICAgICAgICBiZWNvbWVzOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZlcnRleCA9IFsnMTknLCAnOTInLCAnMTEnXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHdoZXJlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVydGV4WzBdIGlzIHRoZSB2ZXJ0ZXggaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBWZXJ0ZXhbMV0gaXMgdGhlIHRleHR1cmUgaW5kZXhcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBWZXJ0ZXhbMl0gaXMgdGhlIG5vcm1hbCBpbmRleFxuICAgICAgICAgICAgICAgICAgICAgICAgIFRoaW5rIG9mIGZhY2VzIGhhdmluZyBWZXJ0aWNlcyB3aGljaCBhcmUgY29tcHJpc2VkIG9mIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZXMgbG9jYXRpb24gKHYpLCB0ZXh0dXJlICh2dCksIGFuZCBub3JtYWwgKHZuKS5cbiAgICAgICAgICAgICAgICAgICAgICAgICAqL1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHZlcnRleCA9IGVsZW1lbnRzW2pdLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGl0J3MgcG9zc2libGUgZm9yIGZhY2VzIHRvIG9ubHkgc3BlY2lmeSB0aGUgdmVydGV4XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhbmQgdGhlIG5vcm1hbC4gSW4gdGhpcyBjYXNlLCB2ZXJ0ZXggd2lsbCBvbmx5IGhhdmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGEgbGVuZ3RoIG9mIDIgYW5kIG5vdCAzIGFuZCB0aGUgbm9ybWFsIHdpbGwgYmUgdGhlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzZWNvbmQgaXRlbSBpbiB0aGUgbGlzdCB3aXRoIGFuIGluZGV4IG9mIDEuXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgbm9ybWFsSW5kZXggPSB2ZXJ0ZXgubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8qXG4gICAgICAgICAgICAgICAgICAgICAgICAgVGhlIHZlcnRzLCB0ZXh0dXJlcywgYW5kIHZlcnROb3JtYWxzIGFycmF5cyBlYWNoIGNvbnRhaW4gYVxuICAgICAgICAgICAgICAgICAgICAgICAgIGZsYXR0ZW5kIGFycmF5IG9mIGNvb3JkaW5hdGVzLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgQmVjYXVzZSBpdCBnZXRzIGNvbmZ1c2luZyBieSByZWZlcnJpbmcgdG8gVmVydGV4IGFuZCB0aGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgdmVydGV4IChib3RoIGFyZSBkaWZmZXJlbnQgaW4gbXkgZGVzY3JpcHRpb25zKSBJIHdpbGwgZXhwbGFpblxuICAgICAgICAgICAgICAgICAgICAgICAgIHdoYXQncyBnb2luZyBvbiB1c2luZyB0aGUgdmVydGV4Tm9ybWFscyBhcnJheTpcblxuICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleFsyXSB3aWxsIGNvbnRhaW4gdGhlIG9uZS1iYXNlZCBpbmRleCBvZiB0aGUgdmVydGV4Tm9ybWFsc1xuICAgICAgICAgICAgICAgICAgICAgICAgIHNlY3Rpb24gKHZuKS4gT25lIGlzIHN1YnRyYWN0ZWQgZnJvbSB0aGlzIGluZGV4IG51bWJlciB0byBwbGF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgbmljZSB3aXRoIGphdmFzY3JpcHQncyB6ZXJvLWJhc2VkIGFycmF5IGluZGV4aW5nLlxuXG4gICAgICAgICAgICAgICAgICAgICAgICAgQmVjYXVzZSB2ZXJ0ZXhOb3JtYWwgaXMgYSBmbGF0dGVuZWQgYXJyYXkgb2YgeCwgeSwgeiB2YWx1ZXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgc2ltcGxlIHBvaW50ZXIgYXJpdGhtZXRpYyBpcyB1c2VkIHRvIHNraXAgdG8gdGhlIHN0YXJ0IG9mIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnRleE5vcm1hbCwgdGhlbiB0aGUgb2Zmc2V0IGlzIGFkZGVkIHRvIGdldCB0aGUgY29ycmVjdFxuICAgICAgICAgICAgICAgICAgICAgICAgIGNvbXBvbmVudDogKzAgaXMgeCwgKzEgaXMgeSwgKzIgaXMgei5cblxuICAgICAgICAgICAgICAgICAgICAgICAgIFRoaXMgc2FtZSBwcm9jZXNzIGlzIHJlcGVhdGVkIGZvciB2ZXJ0cyBhbmQgdGV4dHVyZXMuXG4gICAgICAgICAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcnRleCBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgdW5wYWNrZWQudmVydHMucHVzaCgrdmVydHNbKHZlcnRleFswXSAtIDEpICogMyArIDBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHVucGFja2VkLnZlcnRzLnB1c2goK3ZlcnRzWyh2ZXJ0ZXhbMF0gLSAxKSAqIDMgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bnBhY2tlZC52ZXJ0cy5wdXNoKCt2ZXJ0c1sodmVydGV4WzBdIC0gMSkgKiAzICsgMl0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVydGV4IHRleHR1cmVzXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAodGV4dHVyZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHN0cmlkZSA9IG9wdGlvbnMuZW5hYmxlV1RleHR1cmVDb29yZCA/IDMgOiAyO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVucGFja2VkLnRleHR1cmVzLnB1c2goK3RleHR1cmVzWyh2ZXJ0ZXhbMV0gLSAxKSAqIHN0cmlkZSArIDBdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnBhY2tlZC50ZXh0dXJlcy5wdXNoKCt0ZXh0dXJlc1sodmVydGV4WzFdIC0gMSkgKiBzdHJpZGUgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKG9wdGlvbnMuZW5hYmxlV1RleHR1cmVDb29yZCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1bnBhY2tlZC50ZXh0dXJlcy5wdXNoKCt0ZXh0dXJlc1sodmVydGV4WzFdIC0gMSkgKiBzdHJpZGUgKyAyXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVmVydGV4IG5vcm1hbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIHVucGFja2VkLm5vcm1zLnB1c2goK3ZlcnROb3JtYWxzWyh2ZXJ0ZXhbbm9ybWFsSW5kZXhdIC0gMSkgKiAzICsgMF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgdW5wYWNrZWQubm9ybXMucHVzaCgrdmVydE5vcm1hbHNbKHZlcnRleFtub3JtYWxJbmRleF0gLSAxKSAqIDMgKyAxXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bnBhY2tlZC5ub3Jtcy5wdXNoKCt2ZXJ0Tm9ybWFsc1sodmVydGV4W25vcm1hbEluZGV4XSAtIDEpICogMyArIDJdKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFZlcnRleCBtYXRlcmlhbCBpbmRpY2VzXG4gICAgICAgICAgICAgICAgICAgICAgICB1bnBhY2tlZC5tYXRlcmlhbEluZGljZXMucHVzaChjdXJyZW50TWF0ZXJpYWxJbmRleCk7XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBhZGQgdGhlIG5ld2x5IGNyZWF0ZWQgVmVydGV4IHRvIHRoZSBsaXN0IG9mIGluZGljZXNcbiAgICAgICAgICAgICAgICAgICAgICAgIHVucGFja2VkLmhhc2hpbmRpY2VzW2hhc2hdID0gdW5wYWNrZWQuaW5kZXg7XG4gICAgICAgICAgICAgICAgICAgICAgICB1bnBhY2tlZC5pbmRpY2VzW2N1cnJlbnRPYmplY3RCeU1hdGVyaWFsSW5kZXhdLnB1c2godW5wYWNrZWQuaGFzaGluZGljZXNbaGFzaF0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gaW5jcmVtZW50IHRoZSBjb3VudGVyXG4gICAgICAgICAgICAgICAgICAgICAgICB1bnBhY2tlZC5pbmRleCArPSAxO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChqID09PSAzICYmIHF1YWQpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGFkZCB2MC90MC92bjAgb250byB0aGUgc2Vjb25kIHRyaWFuZ2xlXG4gICAgICAgICAgICAgICAgICAgICAgICB1bnBhY2tlZC5pbmRpY2VzW2N1cnJlbnRPYmplY3RCeU1hdGVyaWFsSW5kZXhdLnB1c2godW5wYWNrZWQuaGFzaGluZGljZXNbaGFzaDBdKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBzZWxmLnZlcnRpY2VzID0gdW5wYWNrZWQudmVydHM7XG4gICAgICAgIHNlbGYudmVydGV4Tm9ybWFscyA9IHVucGFja2VkLm5vcm1zO1xuICAgICAgICBzZWxmLnRleHR1cmVzID0gdW5wYWNrZWQudGV4dHVyZXM7XG4gICAgICAgIHNlbGYudmVydGV4TWF0ZXJpYWxJbmRpY2VzID0gdW5wYWNrZWQubWF0ZXJpYWxJbmRpY2VzO1xuICAgICAgICBzZWxmLmluZGljZXMgPSBvcHRpb25zLmluZGljZXNQZXJNYXRlcmlhbCA/IHVucGFja2VkLmluZGljZXMgOiB1bnBhY2tlZC5pbmRpY2VzW2N1cnJlbnRPYmplY3RCeU1hdGVyaWFsSW5kZXhdO1xuXG4gICAgICAgIHNlbGYubWF0ZXJpYWxOYW1lcyA9IG1hdGVyaWFsTmFtZXNCeUluZGV4O1xuICAgICAgICBzZWxmLm1hdGVyaWFsSW5kaWNlcyA9IG1hdGVyaWFsSW5kaWNlc0J5TmFtZTtcbiAgICAgICAgc2VsZi5tYXRlcmlhbHNCeUluZGV4ID0ge307XG5cbiAgICAgICAgaWYgKG9wdGlvbnMuY2FsY1RhbmdlbnRzQW5kQml0YW5nZW50cykge1xuICAgICAgICAgICAgdGhpcy5jYWxjdWxhdGVUYW5nZW50c0FuZEJpdGFuZ2VudHMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGN1bGF0ZXMgdGhlIHRhbmdlbnRzIGFuZCBiaXRhbmdlbnRzIG9mIHRoZSBtZXNoIHRoYXQgZm9ybXMgYW4gb3J0aG9nb25hbCBiYXNpcyB0b2dldGhlciB3aXRoIHRoZVxuICAgICAqIG5vcm1hbCBpbiB0aGUgZGlyZWN0aW9uIG9mIHRoZSB0ZXh0dXJlIGNvb3JkaW5hdGVzLiBUaGVzZSBhcmUgdXNlZnVsIGZvciBzZXR0aW5nIHVwIHRoZSBUQk4gbWF0cml4XG4gICAgICogd2hlbiBkaXN0b3J0aW5nIHRoZSBub3JtYWxzIHRocm91Z2ggbm9ybWFsIG1hcHMuXG4gICAgICogTWV0aG9kIGRlcml2ZWQgZnJvbTogaHR0cDovL3d3dy5vcGVuZ2wtdHV0b3JpYWwub3JnL2ludGVybWVkaWF0ZS10dXRvcmlhbHMvdHV0b3JpYWwtMTMtbm9ybWFsLW1hcHBpbmcvXG4gICAgICpcbiAgICAgKiBUaGlzIG1ldGhvZCByZXF1aXJlcyB0aGUgbm9ybWFscyBhbmQgdGV4dHVyZSBjb29yZGluYXRlcyB0byBiZSBwYXJzZWQgYW5kIHNldCB1cCBjb3JyZWN0bHkuXG4gICAgICogQWRkcyB0aGUgdGFuZ2VudHMgYW5kIGJpdGFuZ2VudHMgYXMgbWVtYmVycyBvZiB0aGUgY2xhc3MgaW5zdGFuY2UuXG4gICAgICovXG4gICAgY2FsY3VsYXRlVGFuZ2VudHNBbmRCaXRhbmdlbnRzKCkge1xuICAgICAgICBjb25zb2xlLmFzc2VydChcbiAgICAgICAgICAgIHRoaXMudmVydGljZXMgJiZcbiAgICAgICAgICAgICAgICB0aGlzLnZlcnRpY2VzLmxlbmd0aCAmJlxuICAgICAgICAgICAgICAgIHRoaXMudmVydGV4Tm9ybWFscyAmJlxuICAgICAgICAgICAgICAgIHRoaXMudmVydGV4Tm9ybWFscy5sZW5ndGggJiZcbiAgICAgICAgICAgICAgICB0aGlzLnRleHR1cmVzICYmXG4gICAgICAgICAgICAgICAgdGhpcy50ZXh0dXJlcy5sZW5ndGgsXG4gICAgICAgICAgICBcIk1pc3NpbmcgYXR0cmlidXRlcyBmb3IgY2FsY3VsYXRpbmcgdGFuZ2VudHMgYW5kIGJpdGFuZ2VudHNcIlxuICAgICAgICApO1xuXG4gICAgICAgIGNvbnN0IHVucGFja2VkID0ge307XG4gICAgICAgIHVucGFja2VkLnRhbmdlbnRzID0gWy4uLm5ldyBBcnJheSh0aGlzLnZlcnRpY2VzLmxlbmd0aCldLm1hcCh2ID0+IDApO1xuICAgICAgICB1bnBhY2tlZC5iaXRhbmdlbnRzID0gWy4uLm5ldyBBcnJheSh0aGlzLnZlcnRpY2VzLmxlbmd0aCldLm1hcCh2ID0+IDApO1xuXG4gICAgICAgIC8vIExvb3AgdGhyb3VnaCBhbGwgZmFjZXMgaW4gdGhlIHdob2xlIG1lc2hcbiAgICAgICAgbGV0IGluZGljZXM7XG4gICAgICAgIC8vIElmIHNvcnRlZCBieSBtYXRlcmlhbFxuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0aGlzLmluZGljZXNbMF0pKSB7XG4gICAgICAgICAgICBpbmRpY2VzID0gW10uY29uY2F0LmFwcGx5KFtdLCB0aGlzLmluZGljZXMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5kaWNlcyA9IHRoaXMuaW5kaWNlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IHZlcnRpY2VzID0gdGhpcy52ZXJ0aWNlcztcbiAgICAgICAgY29uc3Qgbm9ybWFscyA9IHRoaXMudmVydGV4Tm9ybWFscztcbiAgICAgICAgY29uc3QgdXZzID0gdGhpcy50ZXh0dXJlcztcblxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGljZXMubGVuZ3RoOyBpICs9IDMpIHtcbiAgICAgICAgICAgIGNvbnN0IGkwID0gaW5kaWNlc1tpICsgMF07XG4gICAgICAgICAgICBjb25zdCBpMSA9IGluZGljZXNbaSArIDFdO1xuICAgICAgICAgICAgY29uc3QgaTIgPSBpbmRpY2VzW2kgKyAyXTtcblxuICAgICAgICAgICAgY29uc3QgeF92MCA9IHZlcnRpY2VzW2kwICogMyArIDBdO1xuICAgICAgICAgICAgY29uc3QgeV92MCA9IHZlcnRpY2VzW2kwICogMyArIDFdO1xuICAgICAgICAgICAgY29uc3Qgel92MCA9IHZlcnRpY2VzW2kwICogMyArIDJdO1xuXG4gICAgICAgICAgICBjb25zdCB4X3V2MCA9IHV2c1tpMCAqIDIgKyAwXTtcbiAgICAgICAgICAgIGNvbnN0IHlfdXYwID0gdXZzW2kwICogMiArIDFdO1xuXG4gICAgICAgICAgICBjb25zdCB4X3YxID0gdmVydGljZXNbaTEgKiAzICsgMF07XG4gICAgICAgICAgICBjb25zdCB5X3YxID0gdmVydGljZXNbaTEgKiAzICsgMV07XG4gICAgICAgICAgICBjb25zdCB6X3YxID0gdmVydGljZXNbaTEgKiAzICsgMl07XG5cbiAgICAgICAgICAgIGNvbnN0IHhfdXYxID0gdXZzW2kxICogMiArIDBdO1xuICAgICAgICAgICAgY29uc3QgeV91djEgPSB1dnNbaTEgKiAyICsgMV07XG5cbiAgICAgICAgICAgIGNvbnN0IHhfdjIgPSB2ZXJ0aWNlc1tpMiAqIDMgKyAwXTtcbiAgICAgICAgICAgIGNvbnN0IHlfdjIgPSB2ZXJ0aWNlc1tpMiAqIDMgKyAxXTtcbiAgICAgICAgICAgIGNvbnN0IHpfdjIgPSB2ZXJ0aWNlc1tpMiAqIDMgKyAyXTtcblxuICAgICAgICAgICAgY29uc3QgeF91djIgPSB1dnNbaTIgKiAyICsgMF07XG4gICAgICAgICAgICBjb25zdCB5X3V2MiA9IHV2c1tpMiAqIDIgKyAxXTtcblxuICAgICAgICAgICAgY29uc3QgeF9kZWx0YVBvczEgPSB4X3YxIC0geF92MDtcbiAgICAgICAgICAgIGNvbnN0IHlfZGVsdGFQb3MxID0geV92MSAtIHlfdjA7XG4gICAgICAgICAgICBjb25zdCB6X2RlbHRhUG9zMSA9IHpfdjEgLSB6X3YwO1xuXG4gICAgICAgICAgICBjb25zdCB4X2RlbHRhUG9zMiA9IHhfdjIgLSB4X3YwO1xuICAgICAgICAgICAgY29uc3QgeV9kZWx0YVBvczIgPSB5X3YyIC0geV92MDtcbiAgICAgICAgICAgIGNvbnN0IHpfZGVsdGFQb3MyID0gel92MiAtIHpfdjA7XG5cbiAgICAgICAgICAgIGNvbnN0IHhfdXZEZWx0YVBvczEgPSB4X3V2MSAtIHhfdXYwO1xuICAgICAgICAgICAgY29uc3QgeV91dkRlbHRhUG9zMSA9IHlfdXYxIC0geV91djA7XG5cbiAgICAgICAgICAgIGNvbnN0IHhfdXZEZWx0YVBvczIgPSB4X3V2MiAtIHhfdXYwO1xuICAgICAgICAgICAgY29uc3QgeV91dkRlbHRhUG9zMiA9IHlfdXYyIC0geV91djA7XG5cbiAgICAgICAgICAgIGNvbnN0IHJJbnYgPSB4X3V2RGVsdGFQb3MxICogeV91dkRlbHRhUG9zMiAtIHlfdXZEZWx0YVBvczEgKiB4X3V2RGVsdGFQb3MyO1xuICAgICAgICAgICAgY29uc3QgciA9IDEuMCAvIChNYXRoLmFicyhySW52IDwgMC4wMDAxKSA/IDEuMCA6IHJJbnYpO1xuXG4gICAgICAgICAgICAvLyBUYW5nZW50XG4gICAgICAgICAgICBjb25zdCB4X3RhbmdlbnQgPSAoeF9kZWx0YVBvczEgKiB5X3V2RGVsdGFQb3MyIC0geF9kZWx0YVBvczIgKiB5X3V2RGVsdGFQb3MxKSAqIHI7XG4gICAgICAgICAgICBjb25zdCB5X3RhbmdlbnQgPSAoeV9kZWx0YVBvczEgKiB5X3V2RGVsdGFQb3MyIC0geV9kZWx0YVBvczIgKiB5X3V2RGVsdGFQb3MxKSAqIHI7XG4gICAgICAgICAgICBjb25zdCB6X3RhbmdlbnQgPSAoel9kZWx0YVBvczEgKiB5X3V2RGVsdGFQb3MyIC0gel9kZWx0YVBvczIgKiB5X3V2RGVsdGFQb3MxKSAqIHI7XG5cbiAgICAgICAgICAgIC8vIEJpdGFuZ2VudFxuICAgICAgICAgICAgY29uc3QgeF9iaXRhbmdlbnQgPSAoeF9kZWx0YVBvczIgKiB4X3V2RGVsdGFQb3MxIC0geF9kZWx0YVBvczEgKiB4X3V2RGVsdGFQb3MyKSAqIHI7XG4gICAgICAgICAgICBjb25zdCB5X2JpdGFuZ2VudCA9ICh5X2RlbHRhUG9zMiAqIHhfdXZEZWx0YVBvczEgLSB5X2RlbHRhUG9zMSAqIHhfdXZEZWx0YVBvczIpICogcjtcbiAgICAgICAgICAgIGNvbnN0IHpfYml0YW5nZW50ID0gKHpfZGVsdGFQb3MyICogeF91dkRlbHRhUG9zMSAtIHpfZGVsdGFQb3MxICogeF91dkRlbHRhUG9zMikgKiByO1xuXG4gICAgICAgICAgICAvLyBHcmFtLVNjaG1pZHQgb3J0aG9nb25hbGl6ZVxuICAgICAgICAgICAgLy90ID0gZ2xtOjpub3JtYWxpemUodCAtIG4gKiBnbG06OiBkb3QobiwgdCkpO1xuICAgICAgICAgICAgY29uc3QgeF9uMCA9IG5vcm1hbHNbaTAgKiAzICsgMF07XG4gICAgICAgICAgICBjb25zdCB5X24wID0gbm9ybWFsc1tpMCAqIDMgKyAxXTtcbiAgICAgICAgICAgIGNvbnN0IHpfbjAgPSBub3JtYWxzW2kwICogMyArIDJdO1xuXG4gICAgICAgICAgICBjb25zdCB4X24xID0gbm9ybWFsc1tpMSAqIDMgKyAwXTtcbiAgICAgICAgICAgIGNvbnN0IHlfbjEgPSBub3JtYWxzW2kxICogMyArIDFdO1xuICAgICAgICAgICAgY29uc3Qgel9uMSA9IG5vcm1hbHNbaTEgKiAzICsgMl07XG5cbiAgICAgICAgICAgIGNvbnN0IHhfbjIgPSBub3JtYWxzW2kyICogMyArIDBdO1xuICAgICAgICAgICAgY29uc3QgeV9uMiA9IG5vcm1hbHNbaTIgKiAzICsgMV07XG4gICAgICAgICAgICBjb25zdCB6X24yID0gbm9ybWFsc1tpMiAqIDMgKyAyXTtcblxuICAgICAgICAgICAgLy8gVGFuZ2VudFxuICAgICAgICAgICAgY29uc3QgbjBfZG90X3QgPSB4X3RhbmdlbnQgKiB4X24wICsgeV90YW5nZW50ICogeV9uMCArIHpfdGFuZ2VudCAqIHpfbjA7XG4gICAgICAgICAgICBjb25zdCBuMV9kb3RfdCA9IHhfdGFuZ2VudCAqIHhfbjEgKyB5X3RhbmdlbnQgKiB5X24xICsgel90YW5nZW50ICogel9uMTtcbiAgICAgICAgICAgIGNvbnN0IG4yX2RvdF90ID0geF90YW5nZW50ICogeF9uMiArIHlfdGFuZ2VudCAqIHlfbjIgKyB6X3RhbmdlbnQgKiB6X24yO1xuXG4gICAgICAgICAgICBjb25zdCB4X3Jlc1RhbmdlbnQwID0geF90YW5nZW50IC0geF9uMCAqIG4wX2RvdF90O1xuICAgICAgICAgICAgY29uc3QgeV9yZXNUYW5nZW50MCA9IHlfdGFuZ2VudCAtIHlfbjAgKiBuMF9kb3RfdDtcbiAgICAgICAgICAgIGNvbnN0IHpfcmVzVGFuZ2VudDAgPSB6X3RhbmdlbnQgLSB6X24wICogbjBfZG90X3Q7XG5cbiAgICAgICAgICAgIGNvbnN0IHhfcmVzVGFuZ2VudDEgPSB4X3RhbmdlbnQgLSB4X24xICogbjFfZG90X3Q7XG4gICAgICAgICAgICBjb25zdCB5X3Jlc1RhbmdlbnQxID0geV90YW5nZW50IC0geV9uMSAqIG4xX2RvdF90O1xuICAgICAgICAgICAgY29uc3Qgel9yZXNUYW5nZW50MSA9IHpfdGFuZ2VudCAtIHpfbjEgKiBuMV9kb3RfdDtcblxuICAgICAgICAgICAgY29uc3QgeF9yZXNUYW5nZW50MiA9IHhfdGFuZ2VudCAtIHhfbjIgKiBuMl9kb3RfdDtcbiAgICAgICAgICAgIGNvbnN0IHlfcmVzVGFuZ2VudDIgPSB5X3RhbmdlbnQgLSB5X24yICogbjJfZG90X3Q7XG4gICAgICAgICAgICBjb25zdCB6X3Jlc1RhbmdlbnQyID0gel90YW5nZW50IC0gel9uMiAqIG4yX2RvdF90O1xuXG4gICAgICAgICAgICBjb25zdCBtYWdUYW5nZW50MCA9IE1hdGguc3FydChcbiAgICAgICAgICAgICAgICB4X3Jlc1RhbmdlbnQwICogeF9yZXNUYW5nZW50MCArIHlfcmVzVGFuZ2VudDAgKiB5X3Jlc1RhbmdlbnQwICsgel9yZXNUYW5nZW50MCAqIHpfcmVzVGFuZ2VudDBcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBtYWdUYW5nZW50MSA9IE1hdGguc3FydChcbiAgICAgICAgICAgICAgICB4X3Jlc1RhbmdlbnQxICogeF9yZXNUYW5nZW50MSArIHlfcmVzVGFuZ2VudDEgKiB5X3Jlc1RhbmdlbnQxICsgel9yZXNUYW5nZW50MSAqIHpfcmVzVGFuZ2VudDFcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICBjb25zdCBtYWdUYW5nZW50MiA9IE1hdGguc3FydChcbiAgICAgICAgICAgICAgICB4X3Jlc1RhbmdlbnQyICogeF9yZXNUYW5nZW50MiArIHlfcmVzVGFuZ2VudDIgKiB5X3Jlc1RhbmdlbnQyICsgel9yZXNUYW5nZW50MiAqIHpfcmVzVGFuZ2VudDJcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIC8vIEJpdGFuZ2VudFxuICAgICAgICAgICAgY29uc3QgbjBfZG90X2J0ID0geF9iaXRhbmdlbnQgKiB4X24wICsgeV9iaXRhbmdlbnQgKiB5X24wICsgel9iaXRhbmdlbnQgKiB6X24wO1xuICAgICAgICAgICAgY29uc3QgbjFfZG90X2J0ID0geF9iaXRhbmdlbnQgKiB4X24xICsgeV9iaXRhbmdlbnQgKiB5X24xICsgel9iaXRhbmdlbnQgKiB6X24xO1xuICAgICAgICAgICAgY29uc3QgbjJfZG90X2J0ID0geF9iaXRhbmdlbnQgKiB4X24yICsgeV9iaXRhbmdlbnQgKiB5X24yICsgel9iaXRhbmdlbnQgKiB6X24yO1xuXG4gICAgICAgICAgICBjb25zdCB4X3Jlc0JpdGFuZ2VudDAgPSB4X2JpdGFuZ2VudCAtIHhfbjAgKiBuMF9kb3RfYnQ7XG4gICAgICAgICAgICBjb25zdCB5X3Jlc0JpdGFuZ2VudDAgPSB5X2JpdGFuZ2VudCAtIHlfbjAgKiBuMF9kb3RfYnQ7XG4gICAgICAgICAgICBjb25zdCB6X3Jlc0JpdGFuZ2VudDAgPSB6X2JpdGFuZ2VudCAtIHpfbjAgKiBuMF9kb3RfYnQ7XG5cbiAgICAgICAgICAgIGNvbnN0IHhfcmVzQml0YW5nZW50MSA9IHhfYml0YW5nZW50IC0geF9uMSAqIG4xX2RvdF9idDtcbiAgICAgICAgICAgIGNvbnN0IHlfcmVzQml0YW5nZW50MSA9IHlfYml0YW5nZW50IC0geV9uMSAqIG4xX2RvdF9idDtcbiAgICAgICAgICAgIGNvbnN0IHpfcmVzQml0YW5nZW50MSA9IHpfYml0YW5nZW50IC0gel9uMSAqIG4xX2RvdF9idDtcblxuICAgICAgICAgICAgY29uc3QgeF9yZXNCaXRhbmdlbnQyID0geF9iaXRhbmdlbnQgLSB4X24yICogbjJfZG90X2J0O1xuICAgICAgICAgICAgY29uc3QgeV9yZXNCaXRhbmdlbnQyID0geV9iaXRhbmdlbnQgLSB5X24yICogbjJfZG90X2J0O1xuICAgICAgICAgICAgY29uc3Qgel9yZXNCaXRhbmdlbnQyID0gel9iaXRhbmdlbnQgLSB6X24yICogbjJfZG90X2J0O1xuXG4gICAgICAgICAgICBjb25zdCBtYWdCaXRhbmdlbnQwID0gTWF0aC5zcXJ0KFxuICAgICAgICAgICAgICAgIHhfcmVzQml0YW5nZW50MCAqIHhfcmVzQml0YW5nZW50MCArXG4gICAgICAgICAgICAgICAgICAgIHlfcmVzQml0YW5nZW50MCAqIHlfcmVzQml0YW5nZW50MCArXG4gICAgICAgICAgICAgICAgICAgIHpfcmVzQml0YW5nZW50MCAqIHpfcmVzQml0YW5nZW50MFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGNvbnN0IG1hZ0JpdGFuZ2VudDEgPSBNYXRoLnNxcnQoXG4gICAgICAgICAgICAgICAgeF9yZXNCaXRhbmdlbnQxICogeF9yZXNCaXRhbmdlbnQxICtcbiAgICAgICAgICAgICAgICAgICAgeV9yZXNCaXRhbmdlbnQxICogeV9yZXNCaXRhbmdlbnQxICtcbiAgICAgICAgICAgICAgICAgICAgel9yZXNCaXRhbmdlbnQxICogel9yZXNCaXRhbmdlbnQxXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgY29uc3QgbWFnQml0YW5nZW50MiA9IE1hdGguc3FydChcbiAgICAgICAgICAgICAgICB4X3Jlc0JpdGFuZ2VudDIgKiB4X3Jlc0JpdGFuZ2VudDIgK1xuICAgICAgICAgICAgICAgICAgICB5X3Jlc0JpdGFuZ2VudDIgKiB5X3Jlc0JpdGFuZ2VudDIgK1xuICAgICAgICAgICAgICAgICAgICB6X3Jlc0JpdGFuZ2VudDIgKiB6X3Jlc0JpdGFuZ2VudDJcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIHVucGFja2VkLnRhbmdlbnRzW2kwICogMyArIDBdICs9IHhfcmVzVGFuZ2VudDAgLyBtYWdUYW5nZW50MDtcbiAgICAgICAgICAgIHVucGFja2VkLnRhbmdlbnRzW2kwICogMyArIDFdICs9IHlfcmVzVGFuZ2VudDAgLyBtYWdUYW5nZW50MDtcbiAgICAgICAgICAgIHVucGFja2VkLnRhbmdlbnRzW2kwICogMyArIDJdICs9IHpfcmVzVGFuZ2VudDAgLyBtYWdUYW5nZW50MDtcblxuICAgICAgICAgICAgdW5wYWNrZWQudGFuZ2VudHNbaTEgKiAzICsgMF0gKz0geF9yZXNUYW5nZW50MSAvIG1hZ1RhbmdlbnQxO1xuICAgICAgICAgICAgdW5wYWNrZWQudGFuZ2VudHNbaTEgKiAzICsgMV0gKz0geV9yZXNUYW5nZW50MSAvIG1hZ1RhbmdlbnQxO1xuICAgICAgICAgICAgdW5wYWNrZWQudGFuZ2VudHNbaTEgKiAzICsgMl0gKz0gel9yZXNUYW5nZW50MSAvIG1hZ1RhbmdlbnQxO1xuXG4gICAgICAgICAgICB1bnBhY2tlZC50YW5nZW50c1tpMiAqIDMgKyAwXSArPSB4X3Jlc1RhbmdlbnQyIC8gbWFnVGFuZ2VudDI7XG4gICAgICAgICAgICB1bnBhY2tlZC50YW5nZW50c1tpMiAqIDMgKyAxXSArPSB5X3Jlc1RhbmdlbnQyIC8gbWFnVGFuZ2VudDI7XG4gICAgICAgICAgICB1bnBhY2tlZC50YW5nZW50c1tpMiAqIDMgKyAyXSArPSB6X3Jlc1RhbmdlbnQyIC8gbWFnVGFuZ2VudDI7XG5cbiAgICAgICAgICAgIHVucGFja2VkLmJpdGFuZ2VudHNbaTAgKiAzICsgMF0gKz0geF9yZXNCaXRhbmdlbnQwIC8gbWFnQml0YW5nZW50MDtcbiAgICAgICAgICAgIHVucGFja2VkLmJpdGFuZ2VudHNbaTAgKiAzICsgMV0gKz0geV9yZXNCaXRhbmdlbnQwIC8gbWFnQml0YW5nZW50MDtcbiAgICAgICAgICAgIHVucGFja2VkLmJpdGFuZ2VudHNbaTAgKiAzICsgMl0gKz0gel9yZXNCaXRhbmdlbnQwIC8gbWFnQml0YW5nZW50MDtcblxuICAgICAgICAgICAgdW5wYWNrZWQuYml0YW5nZW50c1tpMSAqIDMgKyAwXSArPSB4X3Jlc0JpdGFuZ2VudDEgLyBtYWdCaXRhbmdlbnQxO1xuICAgICAgICAgICAgdW5wYWNrZWQuYml0YW5nZW50c1tpMSAqIDMgKyAxXSArPSB5X3Jlc0JpdGFuZ2VudDEgLyBtYWdCaXRhbmdlbnQxO1xuICAgICAgICAgICAgdW5wYWNrZWQuYml0YW5nZW50c1tpMSAqIDMgKyAyXSArPSB6X3Jlc0JpdGFuZ2VudDEgLyBtYWdCaXRhbmdlbnQxO1xuXG4gICAgICAgICAgICB1bnBhY2tlZC5iaXRhbmdlbnRzW2kyICogMyArIDBdICs9IHhfcmVzQml0YW5nZW50MiAvIG1hZ0JpdGFuZ2VudDI7XG4gICAgICAgICAgICB1bnBhY2tlZC5iaXRhbmdlbnRzW2kyICogMyArIDFdICs9IHlfcmVzQml0YW5nZW50MiAvIG1hZ0JpdGFuZ2VudDI7XG4gICAgICAgICAgICB1bnBhY2tlZC5iaXRhbmdlbnRzW2kyICogMyArIDJdICs9IHpfcmVzQml0YW5nZW50MiAvIG1hZ0JpdGFuZ2VudDI7XG5cbiAgICAgICAgICAgIC8vIFRPRE86IGNoZWNrIGhhbmRlZG5lc3NcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGFuZ2VudHMgPSB1bnBhY2tlZC50YW5nZW50cztcbiAgICAgICAgdGhpcy5iaXRhbmdlbnRzID0gdW5wYWNrZWQuYml0YW5nZW50cztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW0ge0xheW91dH0gbGF5b3V0IC0gQSB7QGxpbmsgTGF5b3V0fSBvYmplY3QgdGhhdCBkZXNjcmliZXMgdGhlXG4gICAgICogZGVzaXJlZCBtZW1vcnkgbGF5b3V0IG9mIHRoZSBnZW5lcmF0ZWQgYnVmZmVyXG4gICAgICogQHJldHVybiB7QXJyYXlCdWZmZXJ9IFRoZSBwYWNrZWQgYXJyYXkgaW4gdGhlIC4uLiBUT0RPXG4gICAgICovXG4gICAgbWFrZUJ1ZmZlckRhdGEobGF5b3V0KSB7XG4gICAgICAgIGNvbnN0IG51bUl0ZW1zID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGggLyAzO1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgQXJyYXlCdWZmZXIobGF5b3V0LnN0cmlkZSAqIG51bUl0ZW1zKTtcbiAgICAgICAgYnVmZmVyLm51bUl0ZW1zID0gbnVtSXRlbXM7XG4gICAgICAgIGNvbnN0IGRhdGFWaWV3ID0gbmV3IERhdGFWaWV3KGJ1ZmZlcik7XG4gICAgICAgIGZvciAobGV0IGkgPSAwLCB2ZXJ0ZXhPZmZzZXQgPSAwOyBpIDwgbnVtSXRlbXM7IGkrKykge1xuICAgICAgICAgICAgdmVydGV4T2Zmc2V0ID0gaSAqIGxheW91dC5zdHJpZGU7XG4gICAgICAgICAgICAvLyBjb3B5IGluIHRoZSB2ZXJ0ZXggZGF0YSBpbiB0aGUgb3JkZXIgYW5kIGZvcm1hdCBnaXZlbiBieSB0aGVcbiAgICAgICAgICAgIC8vIGxheW91dCBwYXJhbVxuICAgICAgICAgICAgZm9yIChjb25zdCBhdHRyaWJ1dGUgb2YgbGF5b3V0LmF0dHJpYnV0ZXMpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBvZmZzZXQgPSB2ZXJ0ZXhPZmZzZXQgKyBsYXlvdXRbYXR0cmlidXRlLmtleV0ub2Zmc2V0O1xuICAgICAgICAgICAgICAgIHN3aXRjaCAoYXR0cmlidXRlLmtleSkge1xuICAgICAgICAgICAgICAgICAgICBjYXNlIExheW91dC5QT1NJVElPTi5rZXk6XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVmlldy5zZXRGbG9hdDMyKG9mZnNldCwgdGhpcy52ZXJ0aWNlc1tpICogM10sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXcuc2V0RmxvYXQzMihvZmZzZXQgKyA0LCB0aGlzLnZlcnRpY2VzW2kgKiAzICsgMV0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXcuc2V0RmxvYXQzMihvZmZzZXQgKyA4LCB0aGlzLnZlcnRpY2VzW2kgKiAzICsgMl0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTGF5b3V0LlVWLmtleTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEZsb2F0MzIob2Zmc2V0LCB0aGlzLnRleHR1cmVzW2kgKiAyXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVmlldy5zZXRGbG9hdDMyKG9mZnNldCArIDQsIHRoaXMudmVydGljZXNbaSAqIDIgKyAxXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBMYXlvdXQuTk9STUFMLmtleTpcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEZsb2F0MzIob2Zmc2V0LCB0aGlzLnZlcnRleE5vcm1hbHNbaSAqIDNdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEZsb2F0MzIob2Zmc2V0ICsgNCwgdGhpcy52ZXJ0ZXhOb3JtYWxzW2kgKiAzICsgMV0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXcuc2V0RmxvYXQzMihvZmZzZXQgKyA4LCB0aGlzLnZlcnRleE5vcm1hbHNbaSAqIDMgKyAyXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBMYXlvdXQuTUFURVJJQUxfSU5ERVgua2V5OlxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXcuc2V0SW50MTYob2Zmc2V0LCB0aGlzLnZlcnRleE1hdGVyaWFsSW5kaWNlc1tpXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgY2FzZSBMYXlvdXQuQU1CSUVOVC5rZXk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsSW5kZXggPSB0aGlzLnZlcnRleE1hdGVyaWFsSW5kaWNlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbHNCeUluZGV4W21hdGVyaWFsSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ01hdGVyaWFsIFwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGVyaWFsTmFtZXNbbWF0ZXJpYWxJbmRleF0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiIG5vdCBmb3VuZCBpbiBtZXNoLiBEaWQgeW91IGZvcmdldCB0byBjYWxsIGFkZE1hdGVyaWFsTGlicmFyeSguLi4pP1wiJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVmlldy5zZXRGbG9hdDMyKG9mZnNldCwgbWF0ZXJpYWwuYW1iaWVudFswXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVmlldy5zZXRGbG9hdDMyKG9mZnNldCArIDQsIG1hdGVyaWFsLmFtYmllbnRbMV0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXcuc2V0RmxvYXQzMihvZmZzZXQgKyA4LCBtYXRlcmlhbC5hbWJpZW50WzJdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTGF5b3V0LkRJRkZVU0Uua2V5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbEluZGV4ID0gdGhpcy52ZXJ0ZXhNYXRlcmlhbEluZGljZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWxzQnlJbmRleFttYXRlcmlhbEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNYXRlcmlhbCBcIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRlcmlhbE5hbWVzW21hdGVyaWFsSW5kZXhdICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcIiBub3QgZm91bmQgaW4gbWVzaC4gRGlkIHlvdSBmb3JnZXQgdG8gY2FsbCBhZGRNYXRlcmlhbExpYnJhcnkoLi4uKT9cIidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXcuc2V0RmxvYXQzMihvZmZzZXQsIG1hdGVyaWFsLmRpZmZ1c2VbMF0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXcuc2V0RmxvYXQzMihvZmZzZXQgKyA0LCBtYXRlcmlhbC5kaWZmdXNlWzFdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEZsb2F0MzIob2Zmc2V0ICsgOCwgbWF0ZXJpYWwuZGlmZnVzZVsyXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIExheW91dC5TUEVDVUxBUi5rZXk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsSW5kZXggPSB0aGlzLnZlcnRleE1hdGVyaWFsSW5kaWNlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbHNCeUluZGV4W21hdGVyaWFsSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ01hdGVyaWFsIFwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGVyaWFsTmFtZXNbbWF0ZXJpYWxJbmRleF0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiIG5vdCBmb3VuZCBpbiBtZXNoLiBEaWQgeW91IGZvcmdldCB0byBjYWxsIGFkZE1hdGVyaWFsTGlicmFyeSguLi4pP1wiJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVmlldy5zZXRGbG9hdDMyKG9mZnNldCwgbWF0ZXJpYWwuc3BlY3VsYXJbMF0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXcuc2V0RmxvYXQzMihvZmZzZXQgKyA0LCBtYXRlcmlhbC5zcGVjdWxhclsxXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVmlldy5zZXRGbG9hdDMyKG9mZnNldCArIDgsIG1hdGVyaWFsLnNwZWN1bGFyWzJdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTGF5b3V0LlNQRUNVTEFSX0VYUE9ORU5ULmtleToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxJbmRleCA9IHRoaXMudmVydGV4TWF0ZXJpYWxJbmRpY2VzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsc0J5SW5kZXhbbWF0ZXJpYWxJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1hdGVyaWFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTWF0ZXJpYWwgXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxOYW1lc1ttYXRlcmlhbEluZGV4XSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCIgbm90IGZvdW5kIGluIG1lc2guIERpZCB5b3UgZm9yZ2V0IHRvIGNhbGwgYWRkTWF0ZXJpYWxMaWJyYXJ5KC4uLik/XCInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEZsb2F0MzIob2Zmc2V0LCBtYXRlcmlhbC5zcGVjdWxhckV4cG9uZW50LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTGF5b3V0LkVNSVNTSVZFLmtleToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxJbmRleCA9IHRoaXMudmVydGV4TWF0ZXJpYWxJbmRpY2VzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsc0J5SW5kZXhbbWF0ZXJpYWxJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1hdGVyaWFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTWF0ZXJpYWwgXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxOYW1lc1ttYXRlcmlhbEluZGV4XSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCIgbm90IGZvdW5kIGluIG1lc2guIERpZCB5b3UgZm9yZ2V0IHRvIGNhbGwgYWRkTWF0ZXJpYWxMaWJyYXJ5KC4uLik/XCInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEZsb2F0MzIob2Zmc2V0LCBtYXRlcmlhbC5lbWlzc2l2ZVswXSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVmlldy5zZXRGbG9hdDMyKG9mZnNldCArIDQsIG1hdGVyaWFsLmVtaXNzaXZlWzFdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEZsb2F0MzIob2Zmc2V0ICsgOCwgbWF0ZXJpYWwuZW1pc3NpdmVbMl0sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBMYXlvdXQuVFJBTlNNSVNTSU9OX0ZJTFRFUi5rZXk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsSW5kZXggPSB0aGlzLnZlcnRleE1hdGVyaWFsSW5kaWNlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbHNCeUluZGV4W21hdGVyaWFsSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ01hdGVyaWFsIFwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGVyaWFsTmFtZXNbbWF0ZXJpYWxJbmRleF0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiIG5vdCBmb3VuZCBpbiBtZXNoLiBEaWQgeW91IGZvcmdldCB0byBjYWxsIGFkZE1hdGVyaWFsTGlicmFyeSguLi4pP1wiJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVmlldy5zZXRGbG9hdDMyKG9mZnNldCwgbWF0ZXJpYWwudHJhbnNtaXNzaW9uRmlsdGVyWzBdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEZsb2F0MzIob2Zmc2V0ICsgNCwgbWF0ZXJpYWwudHJhbnNtaXNzaW9uRmlsdGVyWzFdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEZsb2F0MzIob2Zmc2V0ICsgOCwgbWF0ZXJpYWwudHJhbnNtaXNzaW9uRmlsdGVyWzJdLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTGF5b3V0LkRJU1NPTFZFLmtleToge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxJbmRleCA9IHRoaXMudmVydGV4TWF0ZXJpYWxJbmRpY2VzW2ldO1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSB0aGlzLm1hdGVyaWFsc0J5SW5kZXhbbWF0ZXJpYWxJbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoIW1hdGVyaWFsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnTWF0ZXJpYWwgXCInICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxOYW1lc1ttYXRlcmlhbEluZGV4XSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnXCIgbm90IGZvdW5kIGluIG1lc2guIERpZCB5b3UgZm9yZ2V0IHRvIGNhbGwgYWRkTWF0ZXJpYWxMaWJyYXJ5KC4uLik/XCInXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIGRhdGFWaWV3LnNldEZsb2F0MzIob2Zmc2V0LCBtYXRlcmlhbC5kaXNzb2x2ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjYXNlIExheW91dC5JTExVTUlOQVRJT04ua2V5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbEluZGV4ID0gdGhpcy52ZXJ0ZXhNYXRlcmlhbEluZGljZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWxzQnlJbmRleFttYXRlcmlhbEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNYXRlcmlhbCBcIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRlcmlhbE5hbWVzW21hdGVyaWFsSW5kZXhdICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcIiBub3QgZm91bmQgaW4gbWVzaC4gRGlkIHlvdSBmb3JnZXQgdG8gY2FsbCBhZGRNYXRlcmlhbExpYnJhcnkoLi4uKT9cIidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXcuc2V0SW50MTYob2Zmc2V0LCBtYXRlcmlhbC5pbGx1bWluYXRpb24sIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgY2FzZSBMYXlvdXQuUkVGUkFDVElPTl9JTkRFWC5rZXk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsSW5kZXggPSB0aGlzLnZlcnRleE1hdGVyaWFsSW5kaWNlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbHNCeUluZGV4W21hdGVyaWFsSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ01hdGVyaWFsIFwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGVyaWFsTmFtZXNbbWF0ZXJpYWxJbmRleF0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiIG5vdCBmb3VuZCBpbiBtZXNoLiBEaWQgeW91IGZvcmdldCB0byBjYWxsIGFkZE1hdGVyaWFsTGlicmFyeSguLi4pP1wiJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVmlldy5zZXRGbG9hdDMyKG9mZnNldCwgbWF0ZXJpYWwucmVmcmFjdGlvbkluZGV4LCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTGF5b3V0LlNIQVJQTkVTUy5rZXk6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsSW5kZXggPSB0aGlzLnZlcnRleE1hdGVyaWFsSW5kaWNlc1tpXTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG1hdGVyaWFsID0gdGhpcy5tYXRlcmlhbHNCeUluZGV4W21hdGVyaWFsSW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFtYXRlcmlhbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ01hdGVyaWFsIFwiJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1hdGVyaWFsTmFtZXNbbWF0ZXJpYWxJbmRleF0gK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgJ1wiIG5vdCBmb3VuZCBpbiBtZXNoLiBEaWQgeW91IGZvcmdldCB0byBjYWxsIGFkZE1hdGVyaWFsTGlicmFyeSguLi4pP1wiJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBkYXRhVmlldy5zZXRGbG9hdDMyKG9mZnNldCwgbWF0ZXJpYWwuc2hhcnBuZXNzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGNhc2UgTGF5b3V0LkFOVElfQUxJQVNJTkcua2V5OiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbEluZGV4ID0gdGhpcy52ZXJ0ZXhNYXRlcmlhbEluZGljZXNbaV07XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtYXRlcmlhbCA9IHRoaXMubWF0ZXJpYWxzQnlJbmRleFttYXRlcmlhbEluZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICghbWF0ZXJpYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdNYXRlcmlhbCBcIicgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5tYXRlcmlhbE5hbWVzW21hdGVyaWFsSW5kZXhdICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICdcIiBub3QgZm91bmQgaW4gbWVzaC4gRGlkIHlvdSBmb3JnZXQgdG8gY2FsbCBhZGRNYXRlcmlhbExpYnJhcnkoLi4uKT9cIidcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YVZpZXcuc2V0SW50MTYob2Zmc2V0LCBtYXRlcmlhbC5hbnRpQWxpYXNpbmcsIHRydWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG5cbiAgICBtYWtlSW5kZXhCdWZmZXJEYXRhKCkge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDE2QXJyYXkodGhpcy5pbmRpY2VzKTtcbiAgICAgICAgYnVmZmVyLm51bUl0ZW1zID0gdGhpcy5pbmRpY2VzLmxlbmd0aDtcbiAgICAgICAgcmV0dXJuIGJ1ZmZlcjtcbiAgICB9XG5cbiAgICBhZGRNYXRlcmlhbExpYnJhcnkobXRsKSB7XG4gICAgICAgIGZvciAoY29uc3QgbmFtZSBpbiBtdGwubWF0ZXJpYWxzKSB7XG4gICAgICAgICAgICBpZiAoIShuYW1lIGluIHRoaXMubWF0ZXJpYWxJbmRpY2VzKSkge1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgbWF0ZXJpYWwgaXMgbm90IHJlZmVyZW5jZWQgYnkgdGhlIG1lc2hcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWwgPSBtdGwubWF0ZXJpYWxzW25hbWVdO1xuXG4gICAgICAgICAgICAvLyBGaW5kIHRoZSBtYXRlcmlhbCBpbmRleCBmb3IgdGhpcyBtYXRlcmlhbFxuICAgICAgICAgICAgY29uc3QgbWF0ZXJpYWxJbmRleCA9IHRoaXMubWF0ZXJpYWxJbmRpY2VzW21hdGVyaWFsLm5hbWVdO1xuXG4gICAgICAgICAgICAvLyBQdXQgdGhlIG1hdGVyaWFsIGludG8gdGhlIG1hdGVyaWFsc0J5SW5kZXggb2JqZWN0IGF0IHRoZSByaWdodFxuICAgICAgICAgICAgLy8gc3BvdCBhcyBkZXRlcm1pbmVkIHdoZW4gdGhlIG9iaiBmaWxlIHdhcyBwYXJzZWRcbiAgICAgICAgICAgIHRoaXMubWF0ZXJpYWxzQnlJbmRleFttYXRlcmlhbEluZGV4XSA9IG1hdGVyaWFsO1xuICAgICAgICB9XG4gICAgfVxufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21lc2guanMiLCIvKipcbiAqIFRoZSBNYXRlcmlhbCBjbGFzcy5cbiAqL1xuZXhwb3J0IGNsYXNzIE1hdGVyaWFsIHtcbiAgICAvKipcbiAgICAgKiBDb25zdHJ1Y3RvclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBuYW1lIHRoZSB1bmlxdWUgbmFtZSBvZiB0aGUgbWF0ZXJpYWxcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvcihuYW1lKSB7XG4gICAgICAgIC8vIHRoZSB1bmlxdWUgbWF0ZXJpYWwgSUQuXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIC8vIFRoZSB2YWx1ZXMgZm9yIHRoZSBmb2xsb3dpbmcgYXR0aWJ1dGVzXG4gICAgICAgIC8vIGFyZSBhbiBhcnJheSBvZiBSLCBHLCBCIG5vcm1hbGl6ZWQgdmFsdWVzLlxuICAgICAgICAvLyBLYSAtIEFtYmllbnQgUmVmbGVjdGl2aXR5XG4gICAgICAgIHRoaXMuYW1iaWVudCA9IFswLCAwLCAwXTtcbiAgICAgICAgLy8gS2QgLSBEZWZ1c2UgUmVmbGVjdGl2aXR5XG4gICAgICAgIHRoaXMuZGlmZnVzZSA9IFswLCAwLCAwXTtcbiAgICAgICAgLy8gS3NcbiAgICAgICAgdGhpcy5zcGVjdWxhciA9IFswLCAwLCAwXTtcbiAgICAgICAgLy8gS2VcbiAgICAgICAgdGhpcy5lbWlzc2l2ZSA9IFswLCAwLCAwXTtcbiAgICAgICAgLy8gVGZcbiAgICAgICAgdGhpcy50cmFuc21pc3Npb25GaWx0ZXIgPSBbMCwgMCwgMF07XG4gICAgICAgIC8vIGRcbiAgICAgICAgdGhpcy5kaXNzb2x2ZSA9IDA7XG4gICAgICAgIC8vIHZhbGlkIHJhbmdlIGlzIGJldHdlZW4gMCBhbmQgMTAwMFxuICAgICAgICB0aGlzLnNwZWN1bGFyRXhwb25lbnQgPSAwO1xuICAgICAgICAvLyBlaXRoZXIgZCBvciBUcjsgdmFsaWQgdmFsdWVzIGFyZSBub3JtYWxpemVkXG4gICAgICAgIHRoaXMudHJhbnNwYXJlbmN5ID0gMDtcbiAgICAgICAgLy8gaWxsdW0gLSB0aGUgZW51bSBvZiB0aGUgaWxsdW1pbmF0aW9uIG1vZGVsIHRvIHVzZVxuICAgICAgICB0aGlzLmlsbHVtaW5hdGlvbiA9IDA7XG4gICAgICAgIC8vIE5pIC0gU2V0IHRvIFwibm9ybWFsXCIgKGFpcikuXG4gICAgICAgIHRoaXMucmVmcmFjdGlvbkluZGV4ID0gMTtcbiAgICAgICAgLy8gc2hhcnBuZXNzXG4gICAgICAgIHRoaXMuc2hhcnBuZXNzID0gMDtcbiAgICAgICAgLy8gbWFwX0tkXG4gICAgICAgIHRoaXMubWFwRGlmZnVzZSA9IG51bGw7XG4gICAgICAgIC8vIG1hcF9LYVxuICAgICAgICB0aGlzLm1hcEFtYmllbnQgPSBudWxsO1xuICAgICAgICAvLyBtYXBfS3NcbiAgICAgICAgdGhpcy5tYXBTcGVjdWxhciA9IG51bGw7XG4gICAgICAgIC8vIG1hcF9Oc1xuICAgICAgICB0aGlzLm1hcFNwZWN1bGFyRXhwb25lbnQgPSBudWxsO1xuICAgICAgICAvLyBtYXBfZFxuICAgICAgICB0aGlzLm1hcERpc3NvbHZlID0gbnVsbDtcbiAgICAgICAgLy8gbWFwX2FhdFxuICAgICAgICB0aGlzLmFudGlBbGlhc2luZyA9IGZhbHNlO1xuICAgICAgICAvLyBtYXBfYnVtcCBvciBidW1wXG4gICAgICAgIHRoaXMubWFwQnVtcCA9IG51bGw7XG4gICAgICAgIC8vIGRpc3BcbiAgICAgICAgdGhpcy5tYXBEaXNwbGFjZW1lbnQgPSBudWxsO1xuICAgICAgICAvLyBkZWNhbFxuICAgICAgICB0aGlzLm1hcERlY2FsID0gbnVsbDtcbiAgICAgICAgLy8gbWFwX0tlXG4gICAgICAgIHRoaXMubWFwRW1pc3NpdmUgPSBudWxsO1xuICAgICAgICAvLyByZWZsIC0gd2hlbiB0aGUgcmVmbGVjdGlvbiB0eXBlIGlzIGEgY3ViZSwgdGhlcmUgd2lsbCBiZSBtdWx0aXBsZSByZWZsXG4gICAgICAgIC8vICAgICAgICBzdGF0ZW1lbnRzIGZvciBlYWNoIHNpZGUgb2YgdGhlIGN1YmUuIElmIGl0J3MgYSBzcGhlcmljYWxcbiAgICAgICAgLy8gICAgICAgIHJlZmxlY3Rpb24sIHRoZXJlIHNob3VsZCBvbmx5IGV2ZXIgYmUgb25lLlxuICAgICAgICB0aGlzLm1hcFJlZmxlY3Rpb25zID0gW107XG4gICAgfVxufVxuXG4vKipcbiAqIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dhdmVmcm9udF8ub2JqX2ZpbGVcbiAqIGh0dHA6Ly9wYXVsYm91cmtlLm5ldC9kYXRhZm9ybWF0cy9tdGwvXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRlcmlhbExpYnJhcnkge1xuICAgIC8qKlxuICAgICAqIENvbnN0cnVjdHMgdGhlIE1hdGVyaWFsIFBhcnNlclxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBtdGxEYXRhIHRoZSBNVEwgZmlsZSBjb250ZW50c1xuICAgICAqL1xuICAgIGNvbnN0cnVjdG9yKG10bERhdGEpIHtcbiAgICAgICAgdGhpcy5kYXRhID0gbXRsRGF0YTtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwgPSBudWxsO1xuICAgICAgICB0aGlzLm1hdGVyaWFscyA9IHt9O1xuXG4gICAgICAgIHRoaXMucGFyc2UoKTtcbiAgICB9XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBjYW1lbGNhc2UgKi9cbiAgICAvKiB0aGUgZnVuY3Rpb24gbmFtZXMgaGVyZSBkaXNvYmV5IGNhbWVsQ2FzZSBjb252ZW50aW9uc1xuICAgICB0byBtYWtlIHBhcnNpbmcvcm91dGluZyBlYXNpZXIuIHNlZSB0aGUgcGFyc2UgZnVuY3Rpb25cbiAgICAgZG9jdW1lbnRhdGlvbiBmb3IgbW9yZSBpbmZvcm1hdGlvbi4gKi9cblxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgTWF0ZXJpYWwgb2JqZWN0IGFuZCBhZGRzIHRvIHRoZSByZWdpc3RyeS5cbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB0b2tlbnMgdGhlIHRva2VucyBhc3NvY2lhdGVkIHdpdGggdGhlIGRpcmVjdGl2ZVxuICAgICAqL1xuICAgIHBhcnNlX25ld210bCh0b2tlbnMpIHtcbiAgICAgICAgbGV0IG5hbWUgPSB0b2tlbnNbMF07XG4gICAgICAgIC8vIGNvbnNvbGUuaW5mbygnUGFyc2luZyBuZXcgTWF0ZXJpYWw6JywgbmFtZSk7XG5cbiAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwgPSBuZXcgTWF0ZXJpYWwobmFtZSk7XG4gICAgICAgIHRoaXMubWF0ZXJpYWxzW25hbWVdID0gdGhpcy5jdXJyZW50TWF0ZXJpYWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2VlIHRoZSBkb2N1bWVuYXRpb24gZm9yIHBhcnNlX0thIGJlbG93IGZvciBhIGJldHRlciB1bmRlcnN0YW5kaW5nLlxuICAgICAqXG4gICAgICogR2l2ZW4gYSBsaXN0IG9mIHBvc3NpYmxlIGNvbG9yIHRva2VucywgcmV0dXJucyBhbiBhcnJheSBvZiBSLCBHLCBhbmQgQlxuICAgICAqIGNvbG9yIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHRva2VucyB0aGUgdG9rZW5zIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGlyZWN0aXZlXG4gICAgICogQHJldHVybiB7Kn0gYSAzIGVsZW1lbnQgYXJyYXkgY29udGFpbmluZyB0aGUgUiwgRywgYW5kIEIgdmFsdWVzXG4gICAgICogb2YgdGhlIGNvbG9yLlxuICAgICAqL1xuICAgIHBhcnNlQ29sb3IodG9rZW5zKSB7XG4gICAgICAgIGlmICh0b2tlbnNbMF0gPT0gXCJzcGVjdHJhbFwiKSB7XG4gICAgICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgICAgICAgIFwiVGhlIE1UTCBwYXJzZXIgZG9lcyBub3Qgc3VwcG9ydCBzcGVjdHJhbCBjdXJ2ZSBmaWxlcy4gWW91IHdpbGwgXCIgK1xuICAgICAgICAgICAgICAgICAgICBcIm5lZWQgdG8gY29udmVydCB0aGUgTVRMIGNvbG9ycyB0byBlaXRoZXIgUkdCIG9yIENJRVhZWi5cIlxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0b2tlbnNbMF0gPT0gXCJ4eXpcIikge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKFwiVE9ETzogY29udmVydCBYWVogdG8gUkdCXCIpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gZnJvbSBteSB1bmRlcnN0YW5kaW5nIG9mIHRoZSBzcGVjLCBSR0IgdmFsdWVzIGF0IHRoaXMgcG9pbnRcbiAgICAgICAgLy8gd2lsbCBlaXRoZXIgYmUgMyBmbG9hdHMgb3IgZXhhY3RseSAxIGZsb2F0LCBzbyB0aGF0J3MgdGhlIGNoZWNrXG4gICAgICAgIC8vIHRoYXQgaSdtIGdvaW5nIHRvIHBlcmZvcm0gaGVyZVxuICAgICAgICBpZiAodG9rZW5zLmxlbmd0aCA9PSAzKSB7XG4gICAgICAgICAgICByZXR1cm4gdG9rZW5zLm1hcChwYXJzZUZsb2F0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFNpbmNlIHRva2VucyBhdCB0aGlzIHBvaW50IGhhcyBhIGxlbmd0aCBvZiAzLCB3ZSdyZSBnb2luZyB0byBhc3N1bWVcbiAgICAgICAgLy8gaXQncyBleGFjdGx5IDEsIHNraXBwaW5nIHRoZSBjaGVjayBmb3IgMi5cbiAgICAgICAgbGV0IHZhbHVlID0gcGFyc2VGbG9hdCh0b2tlbnNbMF0pO1xuICAgICAgICAvLyBpbiB0aGlzIGNhc2UsIGFsbCB2YWx1ZXMgYXJlIGVxdWl2YWxlbnRcbiAgICAgICAgcmV0dXJuIFt2YWx1ZSwgdmFsdWUsIHZhbHVlXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZSB0aGUgYW1iaWVudCByZWZsZWN0aXZpdHlcbiAgICAgKlxuICAgICAqIEEgS2EgZGlyZWN0aXZlIGNhbiB0YWtlIG9uZSBvZiB0aHJlZSBmb3JtczpcbiAgICAgKiAgIC0gS2EgciBnIGJcbiAgICAgKiAgIC0gS2Egc3BlY3RyYWwgZmlsZS5yZmxcbiAgICAgKiAgIC0gS2EgeHl6IHggeSB6XG4gICAgICogVGhlc2UgdGhyZWUgZm9ybXMgYXJlIG11dHVhbGx5IGV4Y2x1c2l2ZSBpbiB0aGF0IG9ubHkgb25lXG4gICAgICogZGVjbGFyYXRpb24gY2FuIGV4aXN0IHBlciBtYXRlcmlhbC4gSXQgaXMgY29uc2lkZXJlZCBhIHN5bnRheFxuICAgICAqIGVycm9yIG90aGVyd2lzZS5cbiAgICAgKlxuICAgICAqIFRoZSBcIkthXCIgZm9ybSBzcGVjaWZpZXMgdGhlIGFtYmllbnQgcmVmbGVjdGl2aXR5IHVzaW5nIFJHQiB2YWx1ZXMuXG4gICAgICogVGhlIFwiZ1wiIGFuZCBcImJcIiB2YWx1ZXMgYXJlIG9wdGlvbmFsLiBJZiBvbmx5IHRoZSBcInJcIiB2YWx1ZSBpc1xuICAgICAqIHNwZWNpZmllZCwgdGhlbiB0aGUgXCJnXCIgYW5kIFwiYlwiIHZhbHVlcyBhcmUgYXNzaWduZWQgdGhlIHZhbHVlIG9mXG4gICAgICogXCJyXCIuIFZhbHVlcyBhcmUgbm9ybWFsbHkgaW4gdGhlIHJhbmdlIDAuMCB0byAxLjAuIFZhbHVlcyBvdXRzaWRlXG4gICAgICogb2YgdGhpcyByYW5nZSBpbmNyZWFzZSBvciBkZWNyZWFzZSB0aGUgcmVmbGVjdGl2aXR5IGFjY29yZGluZ2x5LlxuICAgICAqXG4gICAgICogVGhlIFwiS2Egc3BlY3RyYWxcIiBmb3JtIHNwZWNpZmllcyB0aGUgYW1iaWVudCByZWZsZWN0aXZpdHkgdXNpbmcgYVxuICAgICAqIHNwZWN0cmFsIGN1cnZlLiBcImZpbGUucmZsXCIgaXMgdGhlIG5hbWUgb2YgdGhlIFwiLnJmbFwiIGZpbGUgY29udGFpbmluZ1xuICAgICAqIHRoZSBjdXJ2ZSBkYXRhLiBcImZhY3RvclwiIGlzIGFuIG9wdGlvbmFsIGFyZ3VtZW50IHdoaWNoIGlzIGEgbXVsdGlwbGllclxuICAgICAqIGZvciB0aGUgdmFsdWVzIGluIHRoZSAucmZsIGZpbGUgYW5kIGRlZmF1bHRzIHRvIDEuMCBpZiBub3Qgc3BlY2lmaWVkLlxuICAgICAqXG4gICAgICogVGhlIFwiS2EgeHl6XCIgZm9ybSBzcGVjaWZpZXMgdGhlIGFtYmllbnQgcmVmbGVjdGl2aXR5IHVzaW5nIENJRVhZWiB2YWx1ZXMuXG4gICAgICogXCJ4IHkgelwiIGFyZSB0aGUgdmFsdWVzIG9mIHRoZSBDSUVYWVogY29sb3Igc3BhY2UuIFRoZSBcInlcIiBhbmQgXCJ6XCIgYXJndW1lbnRzXG4gICAgICogYXJlIG9wdGlvbmFsIGFuZCB0YWtlIG9uIHRoZSB2YWx1ZSBvZiB0aGUgXCJ4XCIgY29tcG9uZW50IGlmIG9ubHkgXCJ4XCIgaXNcbiAgICAgKiBzcGVjaWZpZWQuIFRoZSBcInggeSB6XCIgdmFsdWVzIGFyZSBub3JtYWxseSBpbiB0aGUgcmFuZ2Ugb2YgMC4wIHRvIDEuMCBhbmRcbiAgICAgKiBpbmNyZWFzZSBvciBkZWNyZWFzZSBhbWJpZW50IHJlZmxlY3Rpdml0eSBhY2NvcmRpbmdseSBvdXRzaWRlIG9mIHRoYXRcbiAgICAgKiByYW5nZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHRva2VucyB0aGUgdG9rZW5zIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGlyZWN0aXZlXG4gICAgICovXG4gICAgcGFyc2VfS2EodG9rZW5zKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdGVyaWFsLmFtYmllbnQgPSB0aGlzLnBhcnNlQ29sb3IodG9rZW5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEaWZmdXNlIFJlZmxlY3Rpdml0eVxuICAgICAqXG4gICAgICogU2ltaWxhciB0byB0aGUgS2EgZGlyZWN0aXZlLiBTaW1wbHkgcmVwbGFjZSBcIkthXCIgd2l0aCBcIktkXCIgYW5kIHRoZSBydWxlc1xuICAgICAqIGFyZSB0aGUgc2FtZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdG9rZW5zIHRoZSB0b2tlbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBkaXJlY3RpdmVcbiAgICAgKi9cbiAgICBwYXJzZV9LZCh0b2tlbnMpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwuZGlmZnVzZSA9IHRoaXMucGFyc2VDb2xvcih0b2tlbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNwZWN0cmFsIFJlZmxlY3Rpdml0eVxuICAgICAqXG4gICAgICogU2ltaWxhciB0byB0aGUgS2EgZGlyZWN0aXZlLiBTaW1wbHkgcmVwbGFjZSBcIktzXCIgd2l0aCBcIktkXCIgYW5kIHRoZSBydWxlc1xuICAgICAqIGFyZSB0aGUgc2FtZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdG9rZW5zIHRoZSB0b2tlbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBkaXJlY3RpdmVcbiAgICAgKi9cbiAgICBwYXJzZV9Lcyh0b2tlbnMpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwuc3BlY3VsYXIgPSB0aGlzLnBhcnNlQ29sb3IodG9rZW5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBFbWlzc2l2ZVxuICAgICAqXG4gICAgICogVGhlIGFtb3VudCBhbmQgY29sb3Igb2YgbGlnaHQgZW1pdHRlZCBieSB0aGUgb2JqZWN0LlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdG9rZW5zIHRoZSB0b2tlbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBkaXJlY3RpdmVcbiAgICAgKi9cbiAgICBwYXJzZV9LZSh0b2tlbnMpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwuZW1pc3NpdmUgPSB0aGlzLnBhcnNlQ29sb3IodG9rZW5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUcmFuc21pc3Npb24gRmlsdGVyXG4gICAgICpcbiAgICAgKiBBbnkgbGlnaHQgcGFzc2luZyB0aHJvdWdoIHRoZSBvYmplY3QgaXMgZmlsdGVyZWQgYnkgdGhlIHRyYW5zbWlzc2lvblxuICAgICAqIGZpbHRlciwgd2hpY2ggb25seSBhbGxvd3Mgc3BlY2lmaWMgY29sb3JzIHRvIHBhc3MgdGhyb3VnaC4gRm9yIGV4YW1wbGUsIFRmXG4gICAgICogMCAxIDAgYWxsb3dzIGFsbCBvZiB0aGUgZ3JlZW4gdG8gcGFzcyB0aHJvdWdoIGFuZCBmaWx0ZXJzIG91dCBhbGwgb2YgdGhlXG4gICAgICogcmVkIGFuZCBibHVlLlxuICAgICAqXG4gICAgICogU2ltaWxhciB0byB0aGUgS2EgZGlyZWN0aXZlLiBTaW1wbHkgcmVwbGFjZSBcIktzXCIgd2l0aCBcIlRmXCIgYW5kIHRoZSBydWxlc1xuICAgICAqIGFyZSB0aGUgc2FtZVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdG9rZW5zIHRoZSB0b2tlbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBkaXJlY3RpdmVcbiAgICAgKi9cbiAgICBwYXJzZV9UZih0b2tlbnMpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwudHJhbnNtaXNzaW9uRmlsdGVyID0gdGhpcy5wYXJzZUNvbG9yKHRva2Vucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU3BlY2lmaWVzIHRoZSBkaXNzb2x2ZSBmb3IgdGhlIGN1cnJlbnQgbWF0ZXJpYWwuXG4gICAgICpcbiAgICAgKiBTdGF0ZW1lbnQ6IGQgWy1oYWxvXSBgZmFjdG9yYFxuICAgICAqXG4gICAgICogRXhhbXBsZTogXCJkIDAuNVwiXG4gICAgICpcbiAgICAgKiBUaGUgZmFjdG9yIGlzIHRoZSBhbW91bnQgdGhpcyBtYXRlcmlhbCBkaXNzb2x2ZXMgaW50byB0aGUgYmFja2dyb3VuZC4gQVxuICAgICAqIGZhY3RvciBvZiAxLjAgaXMgZnVsbHkgb3BhcXVlLiBUaGlzIGlzIHRoZSBkZWZhdWx0IHdoZW4gYSBuZXcgbWF0ZXJpYWwgaXNcbiAgICAgKiBjcmVhdGVkLiBBIGZhY3RvciBvZiAwLjAgaXMgZnVsbHkgZGlzc29sdmVkIChjb21wbGV0ZWx5IHRyYW5zcGFyZW50KS5cbiAgICAgKlxuICAgICAqIFVubGlrZSBhIHJlYWwgdHJhbnNwYXJlbnQgbWF0ZXJpYWwsIHRoZSBkaXNzb2x2ZSBkb2VzIG5vdCBkZXBlbmQgdXBvblxuICAgICAqIG1hdGVyaWFsIHRoaWNrbmVzcyBub3IgZG9lcyBpdCBoYXZlIGFueSBzcGVjdHJhbCBjaGFyYWN0ZXIuIERpc3NvbHZlIHdvcmtzXG4gICAgICogb24gYWxsIGlsbHVtaW5hdGlvbiBtb2RlbHMuXG4gICAgICpcbiAgICAgKiBUaGUgZGlzc29sdmUgc3RhdGVtZW50IGFsbG93cyBmb3IgYW4gb3B0aW9uYWwgXCItaGFsb1wiIGZsYWcgd2hpY2ggaW5kaWNhdGVzXG4gICAgICogdGhhdCBhIGRpc3NvbHZlIGlzIGRlcGVuZGVudCBvbiB0aGUgc3VyZmFjZSBvcmllbnRhdGlvbiByZWxhdGl2ZSB0byB0aGVcbiAgICAgKiB2aWV3ZXIuIEZvciBleGFtcGxlLCBhIHNwaGVyZSB3aXRoIHRoZSBmb2xsb3dpbmcgZGlzc29sdmUsIFwiZCAtaGFsbyAwLjBcIixcbiAgICAgKiB3aWxsIGJlIGZ1bGx5IGRpc3NvbHZlZCBhdCBpdHMgY2VudGVyIGFuZCB3aWxsIGFwcGVhciBncmFkdWFsbHkgbW9yZSBvcGFxdWVcbiAgICAgKiB0b3dhcmQgaXRzIGVkZ2UuXG4gICAgICpcbiAgICAgKiBcImZhY3RvclwiIGlzIHRoZSBtaW5pbXVtIGFtb3VudCBvZiBkaXNzb2x2ZSBhcHBsaWVkIHRvIHRoZSBtYXRlcmlhbC4gVGhlXG4gICAgICogYW1vdW50IG9mIGRpc3NvbHZlIHdpbGwgdmFyeSBiZXR3ZWVuIDEuMCAoZnVsbHkgb3BhcXVlKSBhbmQgdGhlIHNwZWNpZmllZFxuICAgICAqIFwiZmFjdG9yXCIuIFRoZSBmb3JtdWxhIGlzOlxuICAgICAqXG4gICAgICogICAgZGlzc29sdmUgPSAxLjAgLSAoTip2KSgxLjAtZmFjdG9yKVxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdG9rZW5zIHRoZSB0b2tlbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBkaXJlY3RpdmVcbiAgICAgKi9cbiAgICBwYXJzZV9kKHRva2Vucykge1xuICAgICAgICAvLyB0aGlzIGlnbm9yZXMgdGhlIC1oYWxvIG9wdGlvbiBhcyBJIGNhbid0IGZpbmQgYW55IGRvY3VtZW50YXRpb24gb24gd2hhdFxuICAgICAgICAvLyBpdCdzIHN1cHBvc2VkIHRvIGJlLlxuICAgICAgICB0aGlzLmN1cnJlbnRNYXRlcmlhbC5kaXNzb2x2ZSA9IHBhcnNlRmxvYXQodG9rZW5zLnBvcCgpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGUgXCJpbGx1bVwiIHN0YXRlbWVudCBzcGVjaWZpZXMgdGhlIGlsbHVtaW5hdGlvbiBtb2RlbCB0byB1c2UgaW4gdGhlXG4gICAgICogbWF0ZXJpYWwuIElsbHVtaW5hdGlvbiBtb2RlbHMgYXJlIG1hdGhlbWF0aWNhbCBlcXVhdGlvbnMgdGhhdCByZXByZXNlbnRcbiAgICAgKiB2YXJpb3VzIG1hdGVyaWFsIGxpZ2h0aW5nIGFuZCBzaGFkaW5nIGVmZmVjdHMuXG4gICAgICpcbiAgICAgKiBUaGUgaWxsdW1pbmF0aW9uIG51bWJlciBjYW4gYmUgYSBudW1iZXIgZnJvbSAwIHRvIDEwLiBUaGUgZm9sbG93aW5nIGFyZVxuICAgICAqIHRoZSBsaXN0IG9mIGlsbHVtaW5hdGlvbiBlbnVtZXJhdGlvbnMgYW5kIHRoZWlyIHN1bW1hcmllczpcbiAgICAgKiAwLiBDb2xvciBvbiBhbmQgQW1iaWVudCBvZmZcbiAgICAgKiAxLiBDb2xvciBvbiBhbmQgQW1iaWVudCBvblxuICAgICAqIDIuIEhpZ2hsaWdodCBvblxuICAgICAqIDMuIFJlZmxlY3Rpb24gb24gYW5kIFJheSB0cmFjZSBvblxuICAgICAqIDQuIFRyYW5zcGFyZW5jeTogR2xhc3Mgb24sIFJlZmxlY3Rpb246IFJheSB0cmFjZSBvblxuICAgICAqIDUuIFJlZmxlY3Rpb246IEZyZXNuZWwgb24gYW5kIFJheSB0cmFjZSBvblxuICAgICAqIDYuIFRyYW5zcGFyZW5jeTogUmVmcmFjdGlvbiBvbiwgUmVmbGVjdGlvbjogRnJlc25lbCBvZmYgYW5kIFJheSB0cmFjZSBvblxuICAgICAqIDcuIFRyYW5zcGFyZW5jeTogUmVmcmFjdGlvbiBvbiwgUmVmbGVjdGlvbjogRnJlc25lbCBvbiBhbmQgUmF5IHRyYWNlIG9uXG4gICAgICogOC4gUmVmbGVjdGlvbiBvbiBhbmQgUmF5IHRyYWNlIG9mZlxuICAgICAqIDkuIFRyYW5zcGFyZW5jeTogR2xhc3Mgb24sIFJlZmxlY3Rpb246IFJheSB0cmFjZSBvZmZcbiAgICAgKiAxMC4gQ2FzdHMgc2hhZG93cyBvbnRvIGludmlzaWJsZSBzdXJmYWNlc1xuICAgICAqXG4gICAgICogRXhhbXBsZTogXCJpbGx1bSAyXCIgdG8gc3BlY2lmeSB0aGUgXCJIaWdobGlnaHQgb25cIiBtb2RlbFxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdG9rZW5zIHRoZSB0b2tlbnMgYXNzb2NpYXRlZCB3aXRoIHRoZSBkaXJlY3RpdmVcbiAgICAgKi9cbiAgICBwYXJzZV9pbGx1bSh0b2tlbnMpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwuaWxsdW1pbmF0aW9uID0gcGFyc2VJbnQodG9rZW5zWzBdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBPcHRpY2FsIERlbnNpdHkgKEFLQSBJbmRleCBvZiBSZWZyYWN0aW9uKVxuICAgICAqXG4gICAgICogU3RhdGVtZW50OiBOaSBgaW5kZXhgXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOiBOaSAxLjBcbiAgICAgKlxuICAgICAqIFNwZWNpZmllcyB0aGUgb3B0aWNhbCBkZW5zaXR5IGZvciB0aGUgc3VyZmFjZS4gYGluZGV4YCBpcyB0aGUgdmFsdWVcbiAgICAgKiBmb3IgdGhlIG9wdGljYWwgZGVuc2l0eS4gVGhlIHZhbHVlcyBjYW4gcmFuZ2UgZnJvbSAwLjAwMSB0byAxMC4gIEEgdmFsdWUgb2ZcbiAgICAgKiAxLjAgbWVhbnMgdGhhdCBsaWdodCBkb2VzIG5vdCBiZW5kIGFzIGl0IHBhc3NlcyB0aHJvdWdoIGFuIG9iamVjdC5cbiAgICAgKiBJbmNyZWFzaW5nIHRoZSBvcHRpY2FsX2RlbnNpdHkgaW5jcmVhc2VzIHRoZSBhbW91bnQgb2YgYmVuZGluZy4gR2xhc3MgaGFzXG4gICAgICogYW4gaW5kZXggb2YgcmVmcmFjdGlvbiBvZiBhYm91dCAxLjUuIFZhbHVlcyBvZiBsZXNzIHRoYW4gMS4wIHByb2R1Y2VcbiAgICAgKiBiaXphcnJlIHJlc3VsdHMgYW5kIGFyZSBub3QgcmVjb21tZW5kZWRcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHRva2VucyB0aGUgdG9rZW5zIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGlyZWN0aXZlXG4gICAgICovXG4gICAgcGFyc2VfTmkodG9rZW5zKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdGVyaWFsLnJlZnJhY3Rpb25JbmRleCA9IHBhcnNlRmxvYXQodG9rZW5zWzBdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHNwZWN1bGFyIGV4cG9uZW50IGZvciB0aGUgY3VycmVudCBtYXRlcmlhbC4gVGhpcyBkZWZpbmVzIHRoZVxuICAgICAqIGZvY3VzIG9mIHRoZSBzcGVjdWxhciBoaWdobGlnaHQuXG4gICAgICpcbiAgICAgKiBTdGF0ZW1lbnQ6IE5zIGBleHBvbmVudGBcbiAgICAgKlxuICAgICAqIEV4YW1wbGU6IFwiTnMgMjUwXCJcbiAgICAgKlxuICAgICAqIGBleHBvbmVudGAgaXMgdGhlIHZhbHVlIGZvciB0aGUgc3BlY3VsYXIgZXhwb25lbnQuIEEgaGlnaCBleHBvbmVudCByZXN1bHRzXG4gICAgICogaW4gYSB0aWdodCwgY29uY2VudHJhdGVkIGhpZ2hsaWdodC4gTnMgVmFsdWVzIG5vcm1hbGx5IHJhbmdlIGZyb20gMCB0b1xuICAgICAqIDEwMDAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB0b2tlbnMgdGhlIHRva2VucyBhc3NvY2lhdGVkIHdpdGggdGhlIGRpcmVjdGl2ZVxuICAgICAqL1xuICAgIHBhcnNlX05zKHRva2Vucykge1xuICAgICAgICB0aGlzLmN1cnJlbnRNYXRlcmlhbC5zcGVjdWxhckV4cG9uZW50ID0gcGFyc2VJbnQodG9rZW5zWzBdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBTcGVjaWZpZXMgdGhlIHNoYXJwbmVzcyBvZiB0aGUgcmVmbGVjdGlvbnMgZnJvbSB0aGUgbG9jYWwgcmVmbGVjdGlvbiBtYXAuXG4gICAgICpcbiAgICAgKiBTdGF0ZW1lbnQ6IHNoYXJwbmVzcyBgdmFsdWVgXG4gICAgICpcbiAgICAgKiBFeGFtcGxlOiBcInNoYXJwbmVzcyAxMDBcIlxuICAgICAqXG4gICAgICogSWYgYSBtYXRlcmlhbCBkb2VzIG5vdCBoYXZlIGEgbG9jYWwgcmVmbGVjdGlvbiBtYXAgZGVmaW5lZCBpbiBpdHMgbWF0ZXJpYWxcbiAgICAgKiBkZWZpbnRpb25zLCBzaGFycG5lc3Mgd2lsbCBhcHBseSB0byB0aGUgZ2xvYmFsIHJlZmxlY3Rpb24gbWFwIGRlZmluZWQgaW5cbiAgICAgKiBQcmVWaWV3LlxuICAgICAqXG4gICAgICogYHZhbHVlYCBjYW4gYmUgYSBudW1iZXIgZnJvbSAwIHRvIDEwMDAuIFRoZSBkZWZhdWx0IGlzIDYwLiBBIGhpZ2ggdmFsdWVcbiAgICAgKiByZXN1bHRzIGluIGEgY2xlYXIgcmVmbGVjdGlvbiBvZiBvYmplY3RzIGluIHRoZSByZWZsZWN0aW9uIG1hcC5cbiAgICAgKlxuICAgICAqIFRpcDogc2hhcnBuZXNzIHZhbHVlcyBncmVhdGVyIHRoYW4gMTAwIGludHJvZHVjZSBhbGlhc2luZyBlZmZlY3RzIGluXG4gICAgICogZmxhdCBzdXJmYWNlcyB0aGF0IGFyZSB2aWV3ZWQgYXQgYSBzaGFycCBhbmdsZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHRva2VucyB0aGUgdG9rZW5zIGFzc29jaWF0ZWQgd2l0aCB0aGUgZGlyZWN0aXZlXG4gICAgICovXG4gICAgcGFyc2Vfc2hhcnBuZXNzKHRva2Vucykge1xuICAgICAgICB0aGlzLmN1cnJlbnRNYXRlcmlhbC5zaGFycG5lc3MgPSBwYXJzZUludCh0b2tlbnNbMF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgLWNjIGZsYWcgYW5kIHVwZGF0ZXMgdGhlIG9wdGlvbnMgb2JqZWN0IHdpdGggdGhlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHZhbHVlcyB0aGUgdmFsdWVzIHBhc3NlZCB0byB0aGUgLWNjIGZsYWdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgT2JqZWN0IG9mIGFsbCBpbWFnZSBvcHRpb25zXG4gICAgICovXG4gICAgcGFyc2VfY2ModmFsdWVzLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMuY29sb3JDb3JyZWN0aW9uID0gdmFsdWVzWzBdID09IFwib25cIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIC1ibGVuZHUgZmxhZyBhbmQgdXBkYXRlcyB0aGUgb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdmFsdWVzIHRoZSB2YWx1ZXMgcGFzc2VkIHRvIHRoZSAtYmxlbmR1IGZsYWdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgT2JqZWN0IG9mIGFsbCBpbWFnZSBvcHRpb25zXG4gICAgICovXG4gICAgcGFyc2VfYmxlbmR1KHZhbHVlcywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zLmhvcml6b250YWxCbGVuZGluZyA9IHZhbHVlc1swXSA9PSBcIm9uXCI7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSAtYmxlbmR2IGZsYWcgYW5kIHVwZGF0ZXMgdGhlIG9wdGlvbnMgb2JqZWN0IHdpdGggdGhlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHZhbHVlcyB0aGUgdmFsdWVzIHBhc3NlZCB0byB0aGUgLWJsZW5kdiBmbGFnXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhlIE9iamVjdCBvZiBhbGwgaW1hZ2Ugb3B0aW9uc1xuICAgICAqL1xuICAgIHBhcnNlX2JsZW5kdih2YWx1ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucy52ZXJ0aWNhbEJsZW5kaW5nID0gdmFsdWVzWzBdID09IFwib25cIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIC1ib29zdCBmbGFnIGFuZCB1cGRhdGVzIHRoZSBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB2YWx1ZXMgdGhlIHZhbHVlcyBwYXNzZWQgdG8gdGhlIC1ib29zdCBmbGFnXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhlIE9iamVjdCBvZiBhbGwgaW1hZ2Ugb3B0aW9uc1xuICAgICAqL1xuICAgIHBhcnNlX2Jvb3N0KHZhbHVlcywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zLmJvb3N0TWlwTWFwU2hhcnBuZXNzID0gcGFyc2VGbG9hdCh2YWx1ZXNbMF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgLW1tIGZsYWcgYW5kIHVwZGF0ZXMgdGhlIG9wdGlvbnMgb2JqZWN0IHdpdGggdGhlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHZhbHVlcyB0aGUgdmFsdWVzIHBhc3NlZCB0byB0aGUgLW1tIGZsYWdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgT2JqZWN0IG9mIGFsbCBpbWFnZSBvcHRpb25zXG4gICAgICovXG4gICAgcGFyc2VfbW0odmFsdWVzLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMubW9kaWZ5VGV4dHVyZU1hcC5icmlnaHRuZXNzID0gcGFyc2VGbG9hdCh2YWx1ZXNbMF0pO1xuICAgICAgICBvcHRpb25zLm1vZGlmeVRleHR1cmVNYXAuY29udHJhc3QgPSBwYXJzZUZsb2F0KHZhbHVlc1sxXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIGFuZCBzZXRzIHRoZSAtbywgLXMsIGFuZCAtdCAgdSwgdiwgYW5kIHcgdmFsdWVzXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB2YWx1ZXMgdGhlIHZhbHVlcyBwYXNzZWQgdG8gdGhlIC1vLCAtcywgLXQgZmxhZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb24gdGhlIE9iamVjdCBvZiBlaXRoZXIgdGhlIC1vLCAtcywgLXQgb3B0aW9uXG4gICAgICogQHBhcmFtIHtJbnRlZ2VyfSBkZWZhdWx0VmFsdWUgdGhlIE9iamVjdCBvZiBhbGwgaW1hZ2Ugb3B0aW9uc1xuICAgICAqL1xuICAgIHBhcnNlX29zdCh2YWx1ZXMsIG9wdGlvbiwgZGVmYXVsdFZhbHVlKSB7XG4gICAgICAgIHdoaWxlICh2YWx1ZXMubGVuZ3RoIDwgMykge1xuICAgICAgICAgICAgdmFsdWVzLnB1c2goZGVmYXVsdFZhbHVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIG9wdGlvbi51ID0gcGFyc2VGbG9hdCh2YWx1ZXNbMF0pO1xuICAgICAgICBvcHRpb24udiA9IHBhcnNlRmxvYXQodmFsdWVzWzFdKTtcbiAgICAgICAgb3B0aW9uLncgPSBwYXJzZUZsb2F0KHZhbHVlc1syXSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSAtbyBmbGFnIGFuZCB1cGRhdGVzIHRoZSBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB2YWx1ZXMgdGhlIHZhbHVlcyBwYXNzZWQgdG8gdGhlIC1vIGZsYWdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgT2JqZWN0IG9mIGFsbCBpbWFnZSBvcHRpb25zXG4gICAgICovXG4gICAgcGFyc2Vfbyh2YWx1ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5wYXJzZV9vc3QodmFsdWVzLCBvcHRpb25zLm9mZnNldCwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSAtcyBmbGFnIGFuZCB1cGRhdGVzIHRoZSBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB2YWx1ZXMgdGhlIHZhbHVlcyBwYXNzZWQgdG8gdGhlIC1zIGZsYWdcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyB0aGUgT2JqZWN0IG9mIGFsbCBpbWFnZSBvcHRpb25zXG4gICAgICovXG4gICAgcGFyc2Vfcyh2YWx1ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5wYXJzZV9vc3QodmFsdWVzLCBvcHRpb25zLnNjYWxlLCAxKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIC10IGZsYWcgYW5kIHVwZGF0ZXMgdGhlIG9wdGlvbnMgb2JqZWN0IHdpdGggdGhlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHZhbHVlcyB0aGUgdmFsdWVzIHBhc3NlZCB0byB0aGUgLXQgZmxhZ1xuICAgICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIHRoZSBPYmplY3Qgb2YgYWxsIGltYWdlIG9wdGlvbnNcbiAgICAgKi9cbiAgICBwYXJzZV90KHZhbHVlcywgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnBhcnNlX29zdCh2YWx1ZXMsIG9wdGlvbnMudHVyYnVsZW5jZSwgMCk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSAtdGV4cmVzIGZsYWcgYW5kIHVwZGF0ZXMgdGhlIG9wdGlvbnMgb2JqZWN0IHdpdGggdGhlIHZhbHVlcy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHZhbHVlcyB0aGUgdmFsdWVzIHBhc3NlZCB0byB0aGUgLXRleHJlcyBmbGFnXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhlIE9iamVjdCBvZiBhbGwgaW1hZ2Ugb3B0aW9uc1xuICAgICAqL1xuICAgIHBhcnNlX3RleHJlcyh2YWx1ZXMsIG9wdGlvbnMpIHtcbiAgICAgICAgb3B0aW9ucy50ZXh0dXJlUmVzb2x1dGlvbiA9IHBhcnNlRmxvYXQodmFsdWVzWzBdKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIC1jbGFtcCBmbGFnIGFuZCB1cGRhdGVzIHRoZSBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB2YWx1ZXMgdGhlIHZhbHVlcyBwYXNzZWQgdG8gdGhlIC1jbGFtcCBmbGFnXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhlIE9iamVjdCBvZiBhbGwgaW1hZ2Ugb3B0aW9uc1xuICAgICAqL1xuICAgIHBhcnNlX2NsYW1wKHZhbHVlcywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zLmNsYW1wID0gdmFsdWVzWzBdID09IFwib25cIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIC1ibSBmbGFnIGFuZCB1cGRhdGVzIHRoZSBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB2YWx1ZXMgdGhlIHZhbHVlcyBwYXNzZWQgdG8gdGhlIC1ibSBmbGFnXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhlIE9iamVjdCBvZiBhbGwgaW1hZ2Ugb3B0aW9uc1xuICAgICAqL1xuICAgIHBhcnNlX2JtKHZhbHVlcywgb3B0aW9ucykge1xuICAgICAgICBvcHRpb25zLmJ1bXBNdWx0aXBsaWVyID0gcGFyc2VGbG9hdCh2YWx1ZXNbMF0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgLWltZmNoYW4gZmxhZyBhbmQgdXBkYXRlcyB0aGUgb3B0aW9ucyBvYmplY3Qgd2l0aCB0aGUgdmFsdWVzLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdmFsdWVzIHRoZSB2YWx1ZXMgcGFzc2VkIHRvIHRoZSAtaW1mY2hhbiBmbGFnXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhlIE9iamVjdCBvZiBhbGwgaW1hZ2Ugb3B0aW9uc1xuICAgICAqL1xuICAgIHBhcnNlX2ltZmNoYW4odmFsdWVzLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMuaW1mQ2hhbiA9IHZhbHVlc1swXTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBUaGlzIG9ubHkgZXhpc3RzIGZvciByZWxlY3Rpb24gbWFwcyBhbmQgZGVub3RlcyB0aGUgdHlwZSBvZiByZWZsZWN0aW9uLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdmFsdWVzIHRoZSB2YWx1ZXMgcGFzc2VkIHRvIHRoZSAtdHlwZSBmbGFnXG4gICAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgdGhlIE9iamVjdCBvZiBhbGwgaW1hZ2Ugb3B0aW9uc1xuICAgICAqL1xuICAgIHBhcnNlX3R5cGUodmFsdWVzLCBvcHRpb25zKSB7XG4gICAgICAgIG9wdGlvbnMucmVmbGVjdGlvblR5cGUgPSB2YWx1ZXNbMF07XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSB0ZXh0dXJlJ3Mgb3B0aW9ucyBhbmQgcmV0dXJucyBhbiBvcHRpb25zIG9iamVjdCB3aXRoIHRoZSBpbmZvXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB0b2tlbnMgYWxsIG9mIHRoZSBvcHRpb24gdG9rZW5zIHRvIHBhc3MgdG8gdGhlIHRleHR1cmVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGEgY29tcGxldGUgb2JqZWN0IG9mIG9iamVjdHMgdG8gYXBwbHkgdG8gdGhlIHRleHR1cmVcbiAgICAgKi9cbiAgICBwYXJzZU9wdGlvbnModG9rZW5zKSB7XG4gICAgICAgIGxldCBvcHRpb25zID0ge1xuICAgICAgICAgICAgY29sb3JDb3JyZWN0aW9uOiBmYWxzZSxcbiAgICAgICAgICAgIGhvcml6b250YWxCbGVuZGluZzogdHJ1ZSxcbiAgICAgICAgICAgIHZlcnRpY2FsQmxlbmRpbmc6IHRydWUsXG4gICAgICAgICAgICBib29zdE1pcE1hcFNoYXJwbmVzczogMCxcbiAgICAgICAgICAgIG1vZGlmeVRleHR1cmVNYXA6IHtcbiAgICAgICAgICAgICAgICBicmlnaHRuZXNzOiAwLFxuICAgICAgICAgICAgICAgIGNvbnRyYXN0OiAxXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb2Zmc2V0OiB7IHU6IDAsIHY6IDAsIHc6IDAgfSxcbiAgICAgICAgICAgIHNjYWxlOiB7IHU6IDEsIHY6IDEsIHc6IDEgfSxcbiAgICAgICAgICAgIHR1cmJ1bGVuY2U6IHsgdTogMCwgdjogMCwgdzogMCB9LFxuICAgICAgICAgICAgY2xhbXA6IGZhbHNlLFxuICAgICAgICAgICAgdGV4dHVyZVJlc29sdXRpb246IG51bGwsXG4gICAgICAgICAgICBidW1wTXVsdGlwbGllcjogMSxcbiAgICAgICAgICAgIGltZkNoYW46IG51bGxcbiAgICAgICAgfTtcblxuICAgICAgICBsZXQgb3B0aW9uO1xuICAgICAgICBsZXQgdmFsdWVzO1xuICAgICAgICBsZXQgb3B0aW9uc1RvVmFsdWVzID0ge307XG5cbiAgICAgICAgdG9rZW5zLnJldmVyc2UoKTtcblxuICAgICAgICB3aGlsZSAodG9rZW5zLmxlbmd0aCkge1xuICAgICAgICAgICAgY29uc3QgdG9rZW4gPSB0b2tlbnMucG9wKCk7XG5cbiAgICAgICAgICAgIGlmICh0b2tlbi5zdGFydHNXaXRoKFwiLVwiKSkge1xuICAgICAgICAgICAgICAgIG9wdGlvbiA9IHRva2VuLnN1YnN0cigxKTtcbiAgICAgICAgICAgICAgICBvcHRpb25zVG9WYWx1ZXNbb3B0aW9uXSA9IFtdO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBvcHRpb25zVG9WYWx1ZXNbb3B0aW9uXS5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAob3B0aW9uIGluIG9wdGlvbnNUb1ZhbHVlcykge1xuICAgICAgICAgICAgaWYgKCFvcHRpb25zVG9WYWx1ZXMuaGFzT3duUHJvcGVydHkob3B0aW9uKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFsdWVzID0gb3B0aW9uc1RvVmFsdWVzW29wdGlvbl07XG4gICAgICAgICAgICBsZXQgb3B0aW9uTWV0aG9kID0gdGhpc1tgcGFyc2VfJHtvcHRpb259YF07XG4gICAgICAgICAgICBpZiAob3B0aW9uTWV0aG9kKSB7XG4gICAgICAgICAgICAgICAgb3B0aW9uTWV0aG9kLmJpbmQodGhpcykodmFsdWVzLCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgZ2l2ZW4gdGV4dHVyZSBtYXAgbGluZS5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHRva2VucyBhbGwgb2YgdGhlIHRva2VucyByZXByZXNlbnRpbmcgdGhlIHRleHR1cmVcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IGEgY29tcGxldGUgb2JqZWN0IG9mIG9iamVjdHMgdG8gYXBwbHkgdG8gdGhlIHRleHR1cmVcbiAgICAgKi9cbiAgICBwYXJzZU1hcCh0b2tlbnMpIHtcbiAgICAgICAgLy8gYWNjb3JkaW5nIHRvIHdpa2lwZWRpYTpcbiAgICAgICAgLy8gKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1dhdmVmcm9udF8ub2JqX2ZpbGUjVmVuZG9yX3NwZWNpZmljX2FsdGVyYXRpb25zKVxuICAgICAgICAvLyB0aGVyZSBpcyBhdCBsZWFzdCBvbmUgdmVuZG9yIHRoYXQgcGxhY2VzIHRoZSBmaWxlbmFtZSBiZWZvcmUgdGhlIG9wdGlvbnNcbiAgICAgICAgLy8gcmF0aGVyIHRoYW4gYWZ0ZXIgKHdoaWNoIGlzIHRvIHNwZWMpLiBBbGwgb3B0aW9ucyBzdGFydCB3aXRoIGEgJy0nXG4gICAgICAgIC8vIHNvIGlmIHRoZSBmaXJzdCB0b2tlbiBkb2Vzbid0IHN0YXJ0IHdpdGggYSAnLScsIHdlJ3JlIGdvaW5nIHRvIGFzc3VtZVxuICAgICAgICAvLyBpdCdzIHRoZSBuYW1lIG9mIHRoZSBtYXAgZmlsZS5cbiAgICAgICAgbGV0IGZpbGVuYW1lO1xuICAgICAgICBsZXQgb3B0aW9ucztcbiAgICAgICAgaWYgKCF0b2tlbnNbMF0uc3RhcnRzV2l0aChcIi1cIikpIHtcbiAgICAgICAgICAgIFtmaWxlbmFtZSwgLi4ub3B0aW9uc10gPSB0b2tlbnM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaWxlbmFtZSA9IHRva2Vucy5wb3AoKTtcbiAgICAgICAgICAgIG9wdGlvbnMgPSB0b2tlbnM7XG4gICAgICAgIH1cblxuICAgICAgICBvcHRpb25zID0gdGhpcy5wYXJzZU9wdGlvbnMob3B0aW9ucyk7XG4gICAgICAgIG9wdGlvbnNbXCJmaWxlbmFtZVwiXSA9IGZpbGVuYW1lO1xuICAgICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIGFtYmllbnQgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdG9rZW5zIGxpc3Qgb2YgdG9rZW5zIGZvciB0aGUgbWFwX0thIGRpcmVjaXZlXG4gICAgICovXG4gICAgcGFyc2VfbWFwX0thKHRva2Vucykge1xuICAgICAgICB0aGlzLmN1cnJlbnRNYXRlcmlhbC5tYXBBbWJpZW50ID0gdGhpcy5wYXJzZU1hcCh0b2tlbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgZGlmZnVzZSBtYXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB0b2tlbnMgbGlzdCBvZiB0b2tlbnMgZm9yIHRoZSBtYXBfS2QgZGlyZWNpdmVcbiAgICAgKi9cbiAgICBwYXJzZV9tYXBfS2QodG9rZW5zKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdGVyaWFsLm1hcERpZmZ1c2UgPSB0aGlzLnBhcnNlTWFwKHRva2Vucyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUGFyc2VzIHRoZSBzcGVjdWxhciBtYXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB0b2tlbnMgbGlzdCBvZiB0b2tlbnMgZm9yIHRoZSBtYXBfS3MgZGlyZWNpdmVcbiAgICAgKi9cbiAgICBwYXJzZV9tYXBfS3ModG9rZW5zKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdGVyaWFsLm1hcFNwZWN1bGFyID0gdGhpcy5wYXJzZU1hcCh0b2tlbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgZW1pc3NpdmUgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdG9rZW5zIGxpc3Qgb2YgdG9rZW5zIGZvciB0aGUgbWFwX0tlIGRpcmVjaXZlXG4gICAgICovXG4gICAgcGFyc2VfbWFwX0tlKHRva2Vucykge1xuICAgICAgICB0aGlzLmN1cnJlbnRNYXRlcmlhbC5tYXBFbWlzc2l2ZSA9IHRoaXMucGFyc2VNYXAodG9rZW5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIHNwZWN1bGFyIGV4cG9uZW50IG1hcC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHRva2VucyBsaXN0IG9mIHRva2VucyBmb3IgdGhlIG1hcF9OcyBkaXJlY2l2ZVxuICAgICAqL1xuICAgIHBhcnNlX21hcF9Ocyh0b2tlbnMpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwubWFwU3BlY3VsYXJFeHBvbmVudCA9IHRoaXMucGFyc2VNYXAodG9rZW5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIGRpc3NvbHZlIG1hcC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHRva2VucyBsaXN0IG9mIHRva2VucyBmb3IgdGhlIG1hcF9kIGRpcmVjaXZlXG4gICAgICovXG4gICAgcGFyc2VfbWFwX2QodG9rZW5zKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdGVyaWFsLm1hcERpc3NvbHZlID0gdGhpcy5wYXJzZU1hcCh0b2tlbnMpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFBhcnNlcyB0aGUgYW50aS1hbGlhc2luZyBvcHRpb24uXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge3N0cmluZ1tdfSB0b2tlbnMgbGlzdCBvZiB0b2tlbnMgZm9yIHRoZSBtYXBfYWF0IGRpcmVjaXZlXG4gICAgICovXG4gICAgcGFyc2VfbWFwX2FhdCh0b2tlbnMpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwuYW50aUFsaWFzaW5nID0gdG9rZW5zWzBdID09IFwib25cIjtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIGJ1bXAgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdG9rZW5zIGxpc3Qgb2YgdG9rZW5zIGZvciB0aGUgbWFwX2J1bXAgZGlyZWNpdmVcbiAgICAgKi9cbiAgICBwYXJzZV9tYXBfYnVtcCh0b2tlbnMpIHtcbiAgICAgICAgdGhpcy5jdXJyZW50TWF0ZXJpYWwubWFwQnVtcCA9IHRoaXMucGFyc2VNYXAodG9rZW5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIGJ1bXAgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdG9rZW5zIGxpc3Qgb2YgdG9rZW5zIGZvciB0aGUgYnVtcCBkaXJlY2l2ZVxuICAgICAqL1xuICAgIHBhcnNlX2J1bXAodG9rZW5zKSB7XG4gICAgICAgIHRoaXMucGFyc2VfbWFwX2J1bXAodG9rZW5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIGRpc3AgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdG9rZW5zIGxpc3Qgb2YgdG9rZW5zIGZvciB0aGUgZGlzcCBkaXJlY2l2ZVxuICAgICAqL1xuICAgIHBhcnNlX2Rpc3AodG9rZW5zKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdGVyaWFsLm1hcERpc3BsYWNlbWVudCA9IHRoaXMucGFyc2VNYXAodG9rZW5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIGRlY2FsIG1hcC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7c3RyaW5nW119IHRva2VucyBsaXN0IG9mIHRva2VucyBmb3IgdGhlIG1hcF9kZWNhbCBkaXJlY2l2ZVxuICAgICAqL1xuICAgIHBhcnNlX2RlY2FsKHRva2Vucykge1xuICAgICAgICB0aGlzLmN1cnJlbnRNYXRlcmlhbC5tYXBEZWNhbCA9IHRoaXMucGFyc2VNYXAodG9rZW5zKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIHJlZmwgbWFwLlxuICAgICAqXG4gICAgICogQHBhcmFtIHtzdHJpbmdbXX0gdG9rZW5zIGxpc3Qgb2YgdG9rZW5zIGZvciB0aGUgcmVmbCBkaXJlY2l2ZVxuICAgICAqL1xuICAgIHBhcnNlX3JlZmwodG9rZW5zKSB7XG4gICAgICAgIHRoaXMuY3VycmVudE1hdGVyaWFsLm1hcFJlZmxlY3Rpb25zLnB1c2godGhpcy5wYXJzZU1hcCh0b2tlbnMpKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBQYXJzZXMgdGhlIE1UTCBmaWxlLlxuICAgICAqXG4gICAgICogSXRlcmF0ZXMgbGluZSBieSBsaW5lIHBhcnNpbmcgZWFjaCBNVEwgZGlyZWN0aXZlLlxuICAgICAqXG4gICAgICogVGhpcyBmdW5jdGlvbiBleHBlY3RzIHRoZSBmaXJzdCB0b2tlbiBpbiB0aGUgbGluZVxuICAgICAqIHRvIGJlIGEgdmFsaWQgTVRMIGRpcmVjdGl2ZS4gVGhhdCB0b2tlbiBpcyB0aGVuIHVzZWRcbiAgICAgKiB0byB0cnkgYW5kIHJ1biBhIG1ldGhvZCBvbiB0aGlzIGNsYXNzLiBwYXJzZV9bZGlyZWN0aXZlXVxuICAgICAqIEUuZy4sIHRoZSBgbmV3bXRsYCBkaXJlY3RpdmUgd291bGQgdHJ5IHRvIGNhbGwgdGhlIG1ldGhvZFxuICAgICAqIHBhcnNlX25ld210bC4gRWFjaCBwYXJzaW5nIGZ1bmN0aW9uIHRha2VzIGluIHRoZSByZW1haW5pbmdcbiAgICAgKiBsaXN0IG9mIHRva2VucyBhbmQgdXBkYXRlcyB0aGUgY3VycmVudE1hdGVyaWFsIGNsYXNzIHdpdGhcbiAgICAgKiB0aGUgYXR0cmlidXRlcyBwcm92aWRlZC5cbiAgICAgKi9cbiAgICBwYXJzZSgpIHtcbiAgICAgICAgbGV0IGxpbmVzID0gdGhpcy5kYXRhLnNwbGl0KC9cXHI/XFxuLyk7XG4gICAgICAgIGZvciAobGV0IGxpbmUgb2YgbGluZXMpIHtcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnRyaW0oKTtcbiAgICAgICAgICAgIGlmICghbGluZSB8fCBsaW5lLnN0YXJ0c1dpdGgoXCIjXCIpKSB7XG4gICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGxldCB0b2tlbnMgPSBsaW5lLnNwbGl0KC9cXHMvKTtcbiAgICAgICAgICAgIGxldCBkaXJlY3RpdmU7XG4gICAgICAgICAgICBbZGlyZWN0aXZlLCAuLi50b2tlbnNdID0gdG9rZW5zO1xuXG4gICAgICAgICAgICBsZXQgcGFyc2VNZXRob2QgPSB0aGlzW2BwYXJzZV8ke2RpcmVjdGl2ZX1gXTtcblxuICAgICAgICAgICAgaWYgKCFwYXJzZU1ldGhvZCkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihgRG9uJ3Qga25vdyBob3cgdG8gcGFyc2UgdGhlIGRpcmVjdGl2ZTogXCIke2RpcmVjdGl2ZX1cImApO1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgUGFyc2luZyBcIiR7ZGlyZWN0aXZlfVwiIHdpdGggdG9rZW5zOiAke3Rva2Vuc31gKTtcbiAgICAgICAgICAgIHBhcnNlTWV0aG9kLmJpbmQodGhpcykodG9rZW5zKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIHNvbWUgY2xlYW51cC4gVGhlc2UgZG9uJ3QgbmVlZCB0byBiZSBleHBvc2VkIGFzIHB1YmxpYyBkYXRhLlxuICAgICAgICBkZWxldGUgdGhpcy5kYXRhO1xuICAgICAgICB0aGlzLmN1cnJlbnRNYXRlcmlhbCA9IG51bGw7XG4gICAgfVxuXG4gICAgLyogZXNsaW50LWVuYWJsZSBjYW1lbGNhc2UqL1xufVxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL21hdGVyaWFsLmpzIiwiaW1wb3J0IE1lc2ggZnJvbSBcIi4vbWVzaFwiO1xuaW1wb3J0IHsgTWF0ZXJpYWwsIE1hdGVyaWFsTGlicmFyeSB9IGZyb20gXCIuL21hdGVyaWFsXCI7XG5pbXBvcnQgeyBMYXlvdXQgfSBmcm9tIFwiLi9sYXlvdXRcIjtcbmltcG9ydCB7IGRvd25sb2FkTW9kZWxzLCBkb3dubG9hZE1lc2hlcywgaW5pdE1lc2hCdWZmZXJzLCBkZWxldGVNZXNoQnVmZmVycyB9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmNvbnN0IHZlcnNpb24gPSBcIjEuMS4yXCI7XG5cbi8qKlxuICogQG5hbWVzcGFjZVxuICovXG5leHBvcnQge1xuICAgIE1lc2gsXG4gICAgTWF0ZXJpYWwsXG4gICAgTWF0ZXJpYWxMaWJyYXJ5LFxuICAgIExheW91dCxcbiAgICBkb3dubG9hZE1vZGVscyxcbiAgICBkb3dubG9hZE1lc2hlcyxcbiAgICBpbml0TWVzaEJ1ZmZlcnMsXG4gICAgZGVsZXRlTWVzaEJ1ZmZlcnMsXG4gICAgdmVyc2lvblxufTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsImltcG9ydCBNZXNoIGZyb20gXCIuL21lc2hcIjtcbmltcG9ydCB7IE1hdGVyaWFsLCBNYXRlcmlhbExpYnJhcnkgfSBmcm9tIFwiLi9tYXRlcmlhbFwiO1xuaW1wb3J0IHsgTGF5b3V0IH0gZnJvbSBcIi4vbGF5b3V0XCI7XG5cbmZ1bmN0aW9uIGRvd25sb2FkTXRsVGV4dHVyZXMobXRsLCByb290KSB7XG4gICAgY29uc3QgbWFwQXR0cmlidXRlcyA9IFtcbiAgICAgICAgXCJtYXBEaWZmdXNlXCIsXG4gICAgICAgIFwibWFwQW1iaWVudFwiLFxuICAgICAgICBcIm1hcFNwZWN1bGFyXCIsXG4gICAgICAgIFwibWFwRGlzc29sdmVcIixcbiAgICAgICAgXCJtYXBCdW1wXCIsXG4gICAgICAgIFwibWFwRGlzcGxhY2VtZW50XCIsXG4gICAgICAgIFwibWFwRGVjYWxcIixcbiAgICAgICAgXCJtYXBFbWlzc2l2ZVwiXG4gICAgXTtcbiAgICBpZiAoIXJvb3QuZW5kc1dpdGgoXCIvXCIpKSB7XG4gICAgICAgIHJvb3QgKz0gXCIvXCI7XG4gICAgfVxuICAgIGxldCB0ZXh0dXJlcyA9IFtdO1xuXG4gICAgZm9yIChsZXQgbWF0ZXJpYWwgaW4gbXRsLm1hdGVyaWFscykge1xuICAgICAgICBpZiAoIW10bC5tYXRlcmlhbHMuaGFzT3duUHJvcGVydHkobWF0ZXJpYWwpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBtYXRlcmlhbCA9IG10bC5tYXRlcmlhbHNbbWF0ZXJpYWxdO1xuXG4gICAgICAgIGZvciAobGV0IGF0dHIgb2YgbWFwQXR0cmlidXRlcykge1xuICAgICAgICAgICAgbGV0IG1hcERhdGEgPSBtYXRlcmlhbFthdHRyXTtcbiAgICAgICAgICAgIGlmICghbWFwRGF0YSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBsZXQgdXJsID0gcm9vdCArIG1hcERhdGEuZmlsZW5hbWU7XG4gICAgICAgICAgICB0ZXh0dXJlcy5wdXNoKFxuICAgICAgICAgICAgICAgIGZldGNoKHVybClcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4ocmVzcG9uc2UgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyZXNwb25zZS5vaykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcigpO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLmJsb2IoKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24oZGF0YSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGltYWdlID0gbmV3IEltYWdlKCk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpbWFnZS5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGRhdGEpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbWFwRGF0YS50ZXh0dXJlID0gaW1hZ2U7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PiAoaW1hZ2Uub25sb2FkID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCkpKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgLmNhdGNoKCgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoYFVuYWJsZSB0byBkb3dubG9hZCB0ZXh0dXJlOiAke3VybH1gKTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwodGV4dHVyZXMpO1xufVxuXG4vKipcbiAqIEFjY2VwdHMgYSBsaXN0IG9mIG1vZGVsIHJlcXVlc3Qgb2JqZWN0cyBhbmQgcmV0dXJucyBhIFByb21pc2UgdGhhdFxuICogcmVzb2x2ZXMgd2hlbiBhbGwgbW9kZWxzIGhhdmUgYmVlbiBkb3dubG9hZGVkIGFuZCBwYXJzZWQuXG4gKlxuICogVGhlIGxpc3Qgb2YgbW9kZWwgb2JqZWN0cyBmb2xsb3cgdGhpcyBpbnRlcmZhY2U6XG4gKiB7XG4gKiAgb2JqOiAncGF0aC90by9tb2RlbC5vYmonLFxuICogIG10bDogdHJ1ZSB8ICdwYXRoL3RvL21vZGVsLm10bCcsXG4gKiAgZG93bmxvYWRNdGxUZXh0dXJlczogdHJ1ZSB8IGZhbHNlXG4gKiAgbXRsVGV4dHVyZVJvb3Q6ICcvbW9kZWxzL3N1emFubmUvbWFwcydcbiAqICBuYW1lOiAnc3V6YW5uZSdcbiAqIH1cbiAqXG4gKiBUaGUgYG9iamAgYXR0cmlidXRlIGlzIHJlcXVpcmVkIGFuZCBzaG91bGQgYmUgdGhlIHBhdGggdG8gdGhlXG4gKiBtb2RlbCdzIC5vYmogZmlsZSByZWxhdGl2ZSB0byB0aGUgY3VycmVudCByZXBvIChhYnNvbHV0ZSBVUkxzIGFyZVxuICogc3VnZ2VzdGVkKS5cbiAqXG4gKiBUaGUgYG10bGAgYXR0cmlidXRlIGlzIG9wdGlvbmFsIGFuZCBjYW4gZWl0aGVyIGJlIGEgYm9vbGVhbiBvclxuICogYSBwYXRoIHRvIHRoZSBtb2RlbCdzIC5tdGwgZmlsZSByZWxhdGl2ZSB0byB0aGUgY3VycmVudCBVUkwuIElmXG4gKiB0aGUgdmFsdWUgaXMgYHRydWVgLCB0aGVuIHRoZSBwYXRoIGFuZCBiYXNlbmFtZSBnaXZlbiBmb3IgdGhlIGBvYmpgXG4gKiBhdHRyaWJ1dGUgaXMgdXNlZCByZXBsYWNpbmcgdGhlIC5vYmogc3VmZml4IGZvciAubXRsXG4gKiBFLmcuOiB7b2JqOiAnbW9kZWxzL2Zvby5vYmonLCBtdGw6IHRydWV9IHdvdWxkIHNlYXJjaCBmb3IgJ21vZGVscy9mb28ubXRsJ1xuICpcbiAqIFRoZSBgbmFtZWAgYXR0cmlidXRlIGlzIG9wdGlvbmFsIGFuZCBpcyBhIGh1bWFuIGZyaWVuZGx5IG5hbWUgdG8gYmVcbiAqIGluY2x1ZGVkIHdpdGggdGhlIHBhcnNlZCBPQkogYW5kIE1UTCBmaWxlcy4gSWYgbm90IGdpdmVuLCB0aGUgYmFzZSAub2JqXG4gKiBmaWxlbmFtZSB3aWxsIGJlIHVzZWQuXG4gKlxuICogVGhlIGBkb3dubG9hZE10bFRleHR1cmVzYCBhdHRyaWJ1dGUgaXMgYSBmbGFnIGZvciBhdXRvbWF0aWNhbGx5IGRvd25sb2FkaW5nXG4gKiBhbnkgaW1hZ2VzIGZvdW5kIGluIHRoZSBNVEwgZmlsZSBhbmQgYXR0YWNoaW5nIHRoZW0gdG8gZWFjaCBNYXRlcmlhbFxuICogY3JlYXRlZCBmcm9tIHRoYXQgZmlsZS4gRm9yIGV4YW1wbGUsIGlmIG1hdGVyaWFsLm1hcERpZmZ1c2UgaXMgc2V0ICh0aGVyZVxuICogd2FzIGRhdGEgaW4gdGhlIE1UTCBmaWxlKSwgdGhlbiBtYXRlcmlhbC5tYXBEaWZmdXNlLnRleHR1cmUgd2lsbCBjb250YWluXG4gKiB0aGUgZG93bmxvYWRlZCBpbWFnZS4gVGhpcyBvcHRpb24gZGVmYXVsdHMgdG8gYHRydWVgLiBCeSBkZWZhdWx0LCB0aGUgTVRMJ3NcbiAqIFVSTCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIHRoZSBsb2NhdGlvbiBvZiB0aGUgaW1hZ2VzLlxuICpcbiAqIFRoZSBgbXRsVGV4dHVyZVJvb3RgIGF0dHJpYnV0ZSBpcyBvcHRpb25hbCBhbmQgc2hvdWxkIHBvaW50IHRvIHRoZSBsb2NhdGlvblxuICogb24gdGhlIHNlcnZlciB0aGF0IHRoaXMgTVRMJ3MgdGV4dHVyZSBmaWxlcyBhcmUgbG9jYXRlZC4gVGhlIGRlZmF1bHQgaXMgdG9cbiAqIHVzZSB0aGUgTVRMIGZpbGUncyBsb2NhdGlvbi5cbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gdGhlIHJlc3VsdCBvZiBkb3dubG9hZGluZyB0aGUgZ2l2ZW4gbGlzdCBvZiBtb2RlbHMuIFRoZVxuICogcHJvbWlzZSB3aWxsIHJlc29sdmUgd2l0aCBhbiBvYmplY3Qgd2hvc2Uga2V5cyBhcmUgdGhlIG5hbWVzIG9mIHRoZSBtb2RlbHNcbiAqIGFuZCB0aGUgdmFsdWUgaXMgaXRzIE1lc2ggb2JqZWN0LiBFYWNoIE1lc2ggb2JqZWN0IHdpbGwgYXV0b21hdGljYWxseVxuICogaGF2ZSBpdHMgYWRkTWF0ZXJpYWxMaWJyYXJ5KCkgbWV0aG9kIGNhbGxlZCB0byBzZXQgdGhlIGdpdmVuIE1UTCBkYXRhIChpZiBnaXZlbikuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkb3dubG9hZE1vZGVscyhtb2RlbHMpIHtcbiAgICBjb25zdCBmaW5pc2hlZCA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBtb2RlbCBvZiBtb2RlbHMpIHtcbiAgICAgICAgY29uc3QgcGFyc2VkID0gW107XG5cbiAgICAgICAgaWYgKCFtb2RlbC5vYmopIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAnXCJvYmpcIiBhdHRyaWJ1dGUgb2YgbW9kZWwgb2JqZWN0IG5vdCBzZXQuIFRoZSAub2JqIGZpbGUgaXMgcmVxdWlyZWQgdG8gYmUgc2V0ICcgK1xuICAgICAgICAgICAgICAgICAgICBcImluIG9yZGVyIHRvIHVzZSBkb3dubG9hZE1vZGVscygpXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgb3B0aW9ucyA9IHt9O1xuICAgICAgICBvcHRpb25zLmluZGljZXNQZXJNYXRlcmlhbCA9ICEhbW9kZWwuaW5kaWNlc1Blck1hdGVyaWFsO1xuICAgICAgICBvcHRpb25zLmNhbGNUYW5nZW50c0FuZEJpdGFuZ2VudHMgPSAhIW1vZGVsLmNhbGNUYW5nZW50c0FuZEJpdGFuZ2VudHM7XG5cbiAgICAgICAgLy8gaWYgdGhlIG5hbWUgaXMgbm90IHByb3ZpZGVkLCBkZXJ2aXZlIGl0IGZyb20gdGhlIGdpdmVuIE9CSlxuICAgICAgICBsZXQgbmFtZSA9IG1vZGVsLm5hbWU7XG4gICAgICAgIGlmICghbmFtZSkge1xuICAgICAgICAgICAgbGV0IHBhcnRzID0gbW9kZWwub2JqLnNwbGl0KFwiL1wiKTtcbiAgICAgICAgICAgIG5hbWUgPSBwYXJ0c1twYXJ0cy5sZW5ndGggLSAxXS5yZXBsYWNlKFwiLm9ialwiLCBcIlwiKTtcbiAgICAgICAgfVxuICAgICAgICBwYXJzZWQucHVzaChQcm9taXNlLnJlc29sdmUobmFtZSkpO1xuXG4gICAgICAgIHBhcnNlZC5wdXNoKFxuICAgICAgICAgICAgZmV0Y2gobW9kZWwub2JqKVxuICAgICAgICAgICAgICAgIC50aGVuKHJlc3BvbnNlID0+IHJlc3BvbnNlLnRleHQoKSlcbiAgICAgICAgICAgICAgICAudGhlbihkYXRhID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBNZXNoKGRhdGEsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gRG93bmxvYWQgTWF0ZXJpYWxMaWJyYXJ5IGZpbGU/XG4gICAgICAgIGlmIChtb2RlbC5tdGwpIHtcbiAgICAgICAgICAgIGxldCBtdGwgPSBtb2RlbC5tdGw7XG4gICAgICAgICAgICBpZiAodHlwZW9mIG10bCA9PT0gXCJib29sZWFuXCIpIHtcbiAgICAgICAgICAgICAgICBtdGwgPSBtb2RlbC5vYmoucmVwbGFjZSgvXFwub2JqJC8sIFwiLm10bFwiKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFyc2VkLnB1c2goXG4gICAgICAgICAgICAgICAgZmV0Y2gobXRsKVxuICAgICAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKGRhdGEgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG1hdGVyaWFsID0gbmV3IE1hdGVyaWFsTGlicmFyeShkYXRhKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChtb2RlbC5kb3dubG9hZE10bFRleHR1cmVzICE9PSBmYWxzZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByb290ID0gbW9kZWwubXRsVGV4dHVyZVJvb3Q7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdldCB0aGUgZGlyZWN0b3J5IG9mIHRoZSBNVEwgZmlsZSBhcyBkZWZhdWx0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJvb3QgPSBtdGwuc3Vic3RyKDAsIG10bC5sYXN0SW5kZXhPZihcIi9cIikpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBkb3dubG9hZE10bFRleHR1cmVzIHJldHVybnMgYSBQcm9taXNlIHRoYXRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBpcyByZXNvbHZlZCBvbmNlIGFsbCBvZiB0aGUgaW1hZ2VzIGl0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29udGFpbnMgYXJlIGRvd25sb2FkZWQuIFRoZXNlIGFyZSB0aGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXR0YWNoZWQgdG8gdGhlIG1hcCBkYXRhIG9iamVjdHNcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoW1Byb21pc2UucmVzb2x2ZShtYXRlcmlhbCksIGRvd25sb2FkTXRsVGV4dHVyZXMobWF0ZXJpYWwsIHJvb3QpXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5hbGwoUHJvbWlzZS5yZXNvbHZlKG1hdGVyaWFsKSk7XG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIC50aGVuKHZhbHVlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB2YWx1ZVswXTtcbiAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cblxuICAgICAgICBmaW5pc2hlZC5wdXNoKFByb21pc2UuYWxsKHBhcnNlZCkpO1xuICAgIH1cblxuICAgIHJldHVybiBQcm9taXNlLmFsbChmaW5pc2hlZCkudGhlbihtcyA9PiB7XG4gICAgICAgIC8vIHRoZSBcImZpbmlzaGVkXCIgcHJvbWlzZSBpcyBhIGxpc3Qgb2YgbmFtZSwgTWVzaCBpbnN0YW5jZSxcbiAgICAgICAgLy8gYW5kIE1hdGVyaWFsTGliYXJ5IGluc3RhbmNlLiBUaGlzIHVucGFja3MgYW5kIHJldHVybnMgYW5cbiAgICAgICAgLy8gb2JqZWN0IG1hcHBpbmcgbmFtZSB0byBNZXNoIChNZXNoIHBvaW50cyB0byBNVEwpLlxuICAgICAgICBjb25zdCBtb2RlbHMgPSB7fTtcblxuICAgICAgICBmb3IgKGNvbnN0IG1vZGVsIG9mIG1zKSB7XG4gICAgICAgICAgICBjb25zdCBbbmFtZSwgbWVzaCwgbXRsXSA9IG1vZGVsO1xuICAgICAgICAgICAgbWVzaC5uYW1lID0gbmFtZTtcbiAgICAgICAgICAgIGlmIChtdGwpIHtcbiAgICAgICAgICAgICAgICBtZXNoLmFkZE1hdGVyaWFsTGlicmFyeShtdGwpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbW9kZWxzW25hbWVdID0gbWVzaDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtb2RlbHM7XG4gICAgfSk7XG59XG5cbi8qKlxuICogVGFrZXMgaW4gYW4gb2JqZWN0IG9mIGBtZXNoX25hbWVgLCBgJy91cmwvdG8vT0JKL2ZpbGUnYCBwYWlycyBhbmQgYSBjYWxsYmFja1xuICogZnVuY3Rpb24uIEVhY2ggT0JKIGZpbGUgd2lsbCBiZSBhamF4ZWQgaW4gYW5kIGF1dG9tYXRpY2FsbHkgY29udmVydGVkIHRvXG4gKiBhbiBPQkouTWVzaC4gV2hlbiBhbGwgZmlsZXMgaGF2ZSBzdWNjZXNzZnVsbHkgZG93bmxvYWRlZCB0aGUgY2FsbGJhY2tcbiAqIGZ1bmN0aW9uIHByb3ZpZGVkIHdpbGwgYmUgY2FsbGVkIGFuZCBwYXNzZWQgaW4gYW4gb2JqZWN0IGNvbnRhaW5pbmdcbiAqIHRoZSBuZXdseSBjcmVhdGVkIG1lc2hlcy5cbiAqXG4gKiAqKk5vdGU6KiogSW4gb3JkZXIgdG8gdXNlIHRoaXMgZnVuY3Rpb24gYXMgYSB3YXkgdG8gZG93bmxvYWQgbWVzaGVzLCBhXG4gKiB3ZWJzZXJ2ZXIgb2Ygc29tZSBzb3J0IG11c3QgYmUgdXNlZC5cbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbmFtZUFuZEF0dHJzIGFuIG9iamVjdCB3aGVyZSB0aGUga2V5IGlzIHRoZSBuYW1lIG9mIHRoZSBtZXNoIGFuZCB0aGUgdmFsdWUgaXMgdGhlIHVybCB0byB0aGF0IG1lc2gncyBPQkogZmlsZVxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNvbXBsZXRpb25DYWxsYmFjayBzaG91bGQgY29udGFpbiBhIGZ1bmN0aW9uIHRoYXQgd2lsbCB0YWtlIG9uZSBwYXJhbWV0ZXI6IGFuIG9iamVjdCBhcnJheSB3aGVyZSB0aGUga2V5cyB3aWxsIGJlIHRoZSB1bmlxdWUgb2JqZWN0IG5hbWUgYW5kIHRoZSB2YWx1ZSB3aWxsIGJlIGEgTWVzaCBvYmplY3RcbiAqXG4gKiBAcGFyYW0ge09iamVjdH0gbWVzaGVzIEluIGNhc2Ugb3RoZXIgbWVzaGVzIGFyZSBsb2FkZWQgc2VwYXJhdGVseSBvciBpZiBhIHByZXZpb3VzbHkgZGVjbGFyZWQgdmFyaWFibGUgaXMgZGVzaXJlZCB0byBiZSB1c2VkLCBwYXNzIGluIGEgKHBvc3NpYmx5IGVtcHR5KSBqc29uIG9iamVjdCBvZiB0aGUgcGF0dGVybjogeyAnPG1lc2hfbmFtZT4nOiBPQkouTWVzaCB9XG4gKlxuICovXG5leHBvcnQgZnVuY3Rpb24gZG93bmxvYWRNZXNoZXMobmFtZUFuZFVSTHMsIGNvbXBsZXRpb25DYWxsYmFjaywgbWVzaGVzKSB7XG4gICAgaWYgKG1lc2hlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1lc2hlcyA9IHt9O1xuICAgIH1cblxuICAgIGNvbnN0IGNvbXBsZXRlZCA9IFtdO1xuXG4gICAgZm9yIChjb25zdCBtZXNoX25hbWUgaW4gbmFtZUFuZFVSTHMpIHtcbiAgICAgICAgaWYgKCFuYW1lQW5kVVJMcy5oYXNPd25Qcm9wZXJ0eShtZXNoX25hbWUpKSB7XG4gICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCB1cmwgPSBuYW1lQW5kVVJMc1ttZXNoX25hbWVdO1xuICAgICAgICBjb21wbGV0ZWQucHVzaChcbiAgICAgICAgICAgIGZldGNoKHVybClcbiAgICAgICAgICAgICAgICAudGhlbihyZXNwb25zZSA9PiByZXNwb25zZS50ZXh0KCkpXG4gICAgICAgICAgICAgICAgLnRoZW4oZGF0YSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbbWVzaF9uYW1lLCBuZXcgTWVzaChkYXRhKV07XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBQcm9taXNlLmFsbChjb21wbGV0ZWQpLnRoZW4obXMgPT4ge1xuICAgICAgICBmb3IgKGxldCBbbmFtZSwgbWVzaF0gb2YgbXMpIHtcbiAgICAgICAgICAgIG1lc2hlc1tuYW1lXSA9IG1lc2g7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY29tcGxldGlvbkNhbGxiYWNrKG1lc2hlcyk7XG4gICAgfSk7XG59XG5cbnZhciBfYnVpbGRCdWZmZXIgPSBmdW5jdGlvbihnbCwgdHlwZSwgZGF0YSwgaXRlbVNpemUpIHtcbiAgICB2YXIgYnVmZmVyID0gZ2wuY3JlYXRlQnVmZmVyKCk7XG4gICAgdmFyIGFycmF5VmlldyA9IHR5cGUgPT09IGdsLkFSUkFZX0JVRkZFUiA/IEZsb2F0MzJBcnJheSA6IFVpbnQxNkFycmF5O1xuICAgIGdsLmJpbmRCdWZmZXIodHlwZSwgYnVmZmVyKTtcbiAgICBnbC5idWZmZXJEYXRhKHR5cGUsIG5ldyBhcnJheVZpZXcoZGF0YSksIGdsLlNUQVRJQ19EUkFXKTtcbiAgICBidWZmZXIuaXRlbVNpemUgPSBpdGVtU2l6ZTtcbiAgICBidWZmZXIubnVtSXRlbXMgPSBkYXRhLmxlbmd0aCAvIGl0ZW1TaXplO1xuICAgIHJldHVybiBidWZmZXI7XG59O1xuXG4vKipcbiAqIFRha2VzIGluIHRoZSBXZWJHTCBjb250ZXh0IGFuZCBhIE1lc2gsIHRoZW4gY3JlYXRlcyBhbmQgYXBwZW5kcyB0aGUgYnVmZmVyc1xuICogdG8gdGhlIG1lc2ggb2JqZWN0IGFzIGF0dHJpYnV0ZXMuXG4gKlxuICogQHBhcmFtIHtXZWJHTFJlbmRlcmluZ0NvbnRleHR9IGdsIHRoZSBgY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJylgIGNvbnRleHQgaW5zdGFuY2VcbiAqIEBwYXJhbSB7TWVzaH0gbWVzaCBhIHNpbmdsZSBgT0JKLk1lc2hgIGluc3RhbmNlXG4gKlxuICogVGhlIG5ld2x5IGNyZWF0ZWQgbWVzaCBhdHRyaWJ1dGVzIGFyZTpcbiAqXG4gKiBBdHRyYnV0ZSB8IERlc2NyaXB0aW9uXG4gKiA6LS0tIHwgLS0tXG4gKiAqKm5vcm1hbEJ1ZmZlcioqICAgICAgIHxjb250YWlucyB0aGUgbW9kZWwmIzM5O3MgVmVydGV4IE5vcm1hbHNcbiAqIG5vcm1hbEJ1ZmZlci5pdGVtU2l6ZSAgfHNldCB0byAzIGl0ZW1zXG4gKiBub3JtYWxCdWZmZXIubnVtSXRlbXMgIHx0aGUgdG90YWwgbnVtYmVyIG9mIHZlcnRleCBub3JtYWxzXG4gKiB8XG4gKiAqKnRleHR1cmVCdWZmZXIqKiAgICAgIHxjb250YWlucyB0aGUgbW9kZWwmIzM5O3MgVGV4dHVyZSBDb29yZGluYXRlc1xuICogdGV4dHVyZUJ1ZmZlci5pdGVtU2l6ZSB8c2V0IHRvIDIgaXRlbXNcbiAqIHRleHR1cmVCdWZmZXIubnVtSXRlbXMgfHRoZSBudW1iZXIgb2YgdGV4dHVyZSBjb29yZGluYXRlc1xuICogfFxuICogKip2ZXJ0ZXhCdWZmZXIqKiAgICAgICB8Y29udGFpbnMgdGhlIG1vZGVsJiMzOTtzIFZlcnRleCBQb3NpdGlvbiBDb29yZGluYXRlcyAoZG9lcyBub3QgaW5jbHVkZSB3KVxuICogdmVydGV4QnVmZmVyLml0ZW1TaXplICB8c2V0IHRvIDMgaXRlbXNcbiAqIHZlcnRleEJ1ZmZlci5udW1JdGVtcyAgfHRoZSB0b3RhbCBudW1iZXIgb2YgdmVydGljZXNcbiAqIHxcbiAqICoqaW5kZXhCdWZmZXIqKiAgICAgICAgfGNvbnRhaW5zIHRoZSBpbmRpY2VzIG9mIHRoZSBmYWNlc1xuICogaW5kZXhCdWZmZXIuaXRlbVNpemUgICB8aXMgc2V0IHRvIDFcbiAqIGluZGV4QnVmZmVyLm51bUl0ZW1zICAgfHRoZSB0b3RhbCBudW1iZXIgb2YgaW5kaWNlc1xuICpcbiAqIEEgc2ltcGxlIGV4YW1wbGUgKGEgbG90IG9mIHN0ZXBzIGFyZSBtaXNzaW5nLCBzbyBkb24ndCBjb3B5IGFuZCBwYXN0ZSk6XG4gKlxuICogICAgIHZhciBnbCAgID0gY2FudmFzLmdldENvbnRleHQoJ3dlYmdsJyksXG4gKiAgICAgICAgIG1lc2ggPSBPQkouTWVzaChvYmpfZmlsZV9kYXRhKTtcbiAqICAgICAvLyBjb21waWxlIHRoZSBzaGFkZXJzIGFuZCBjcmVhdGUgYSBzaGFkZXIgcHJvZ3JhbVxuICogICAgIHZhciBzaGFkZXJQcm9ncmFtID0gZ2wuY3JlYXRlUHJvZ3JhbSgpO1xuICogICAgIC8vIGNvbXBpbGF0aW9uIHN0dWZmIGhlcmVcbiAqICAgICAuLi5cbiAqICAgICAvLyBtYWtlIHN1cmUgeW91IGhhdmUgdmVydGV4LCB2ZXJ0ZXggbm9ybWFsLCBhbmQgdGV4dHVyZSBjb29yZGluYXRlXG4gKiAgICAgLy8gYXR0cmlidXRlcyBsb2NhdGVkIGluIHlvdXIgc2hhZGVycyBhbmQgYXR0YWNoIHRoZW0gdG8gdGhlIHNoYWRlciBwcm9ncmFtXG4gKiAgICAgc2hhZGVyUHJvZ3JhbS52ZXJ0ZXhQb3NpdGlvbkF0dHJpYnV0ZSA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlclByb2dyYW0sIFwiYVZlcnRleFBvc2l0aW9uXCIpO1xuICogICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHNoYWRlclByb2dyYW0udmVydGV4UG9zaXRpb25BdHRyaWJ1dGUpO1xuICpcbiAqICAgICBzaGFkZXJQcm9ncmFtLnZlcnRleE5vcm1hbEF0dHJpYnV0ZSA9IGdsLmdldEF0dHJpYkxvY2F0aW9uKHNoYWRlclByb2dyYW0sIFwiYVZlcnRleE5vcm1hbFwiKTtcbiAqICAgICBnbC5lbmFibGVWZXJ0ZXhBdHRyaWJBcnJheShzaGFkZXJQcm9ncmFtLnZlcnRleE5vcm1hbEF0dHJpYnV0ZSk7XG4gKlxuICogICAgIHNoYWRlclByb2dyYW0udGV4dHVyZUNvb3JkQXR0cmlidXRlID0gZ2wuZ2V0QXR0cmliTG9jYXRpb24oc2hhZGVyUHJvZ3JhbSwgXCJhVGV4dHVyZUNvb3JkXCIpO1xuICogICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHNoYWRlclByb2dyYW0udGV4dHVyZUNvb3JkQXR0cmlidXRlKTtcbiAqXG4gKiAgICAgLy8gY3JlYXRlIGFuZCBpbml0aWFsaXplIHRoZSB2ZXJ0ZXgsIHZlcnRleCBub3JtYWwsIGFuZCB0ZXh0dXJlIGNvb3JkaW5hdGUgYnVmZmVyc1xuICogICAgIC8vIGFuZCBzYXZlIG9uIHRvIHRoZSBtZXNoIG9iamVjdFxuICogICAgIE9CSi5pbml0TWVzaEJ1ZmZlcnMoZ2wsIG1lc2gpO1xuICpcbiAqICAgICAvLyBub3cgdG8gcmVuZGVyIHRoZSBtZXNoXG4gKiAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG1lc2gudmVydGV4QnVmZmVyKTtcbiAqICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHNoYWRlclByb2dyYW0udmVydGV4UG9zaXRpb25BdHRyaWJ1dGUsIG1lc2gudmVydGV4QnVmZmVyLml0ZW1TaXplLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuICogICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgbWVzaCBkb2Vzbid0IGNvbnRhaW5cbiAqICAgICAvLyBhbnkgdGV4dHVyZSBjb29yZGluYXRlcyAoZS5nLiBzdXphbm5lLm9iaiBpbiB0aGUgZGV2ZWxvcG1lbnQgYnJhbmNoKS5cbiAqICAgICAvLyBpbiB0aGlzIGNhc2UsIHRoZSB0ZXh0dXJlIHZlcnRleEF0dHJpYkFycmF5IHdpbGwgbmVlZCB0byBiZSBkaXNhYmxlZFxuICogICAgIC8vIGJlZm9yZSB0aGUgY2FsbCB0byBkcmF3RWxlbWVudHNcbiAqICAgICBpZighbWVzaC50ZXh0dXJlcy5sZW5ndGgpe1xuICogICAgICAgZ2wuZGlzYWJsZVZlcnRleEF0dHJpYkFycmF5KHNoYWRlclByb2dyYW0udGV4dHVyZUNvb3JkQXR0cmlidXRlKTtcbiAqICAgICB9XG4gKiAgICAgZWxzZXtcbiAqICAgICAgIC8vIGlmIHRoZSB0ZXh0dXJlIHZlcnRleEF0dHJpYkFycmF5IGhhcyBiZWVuIHByZXZpb3VzbHlcbiAqICAgICAgIC8vIGRpc2FibGVkLCB0aGVuIGl0IG5lZWRzIHRvIGJlIHJlLWVuYWJsZWRcbiAqICAgICAgIGdsLmVuYWJsZVZlcnRleEF0dHJpYkFycmF5KHNoYWRlclByb2dyYW0udGV4dHVyZUNvb3JkQXR0cmlidXRlKTtcbiAqICAgICAgIGdsLmJpbmRCdWZmZXIoZ2wuQVJSQVlfQlVGRkVSLCBtZXNoLnRleHR1cmVCdWZmZXIpO1xuICogICAgICAgZ2wudmVydGV4QXR0cmliUG9pbnRlcihzaGFkZXJQcm9ncmFtLnRleHR1cmVDb29yZEF0dHJpYnV0ZSwgbWVzaC50ZXh0dXJlQnVmZmVyLml0ZW1TaXplLCBnbC5GTE9BVCwgZmFsc2UsIDAsIDApO1xuICogICAgIH1cbiAqXG4gKiAgICAgZ2wuYmluZEJ1ZmZlcihnbC5BUlJBWV9CVUZGRVIsIG1lc2gubm9ybWFsQnVmZmVyKTtcbiAqICAgICBnbC52ZXJ0ZXhBdHRyaWJQb2ludGVyKHNoYWRlclByb2dyYW0udmVydGV4Tm9ybWFsQXR0cmlidXRlLCBtZXNoLm5vcm1hbEJ1ZmZlci5pdGVtU2l6ZSwgZ2wuRkxPQVQsIGZhbHNlLCAwLCAwKTtcbiAqXG4gKiAgICAgZ2wuYmluZEJ1ZmZlcihnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbW9kZWwubWVzaC5pbmRleEJ1ZmZlcik7XG4gKiAgICAgZ2wuZHJhd0VsZW1lbnRzKGdsLlRSSUFOR0xFUywgbW9kZWwubWVzaC5pbmRleEJ1ZmZlci5udW1JdGVtcywgZ2wuVU5TSUdORURfU0hPUlQsIDApO1xuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdE1lc2hCdWZmZXJzKGdsLCBtZXNoKSB7XG4gICAgbWVzaC5ub3JtYWxCdWZmZXIgPSBfYnVpbGRCdWZmZXIoZ2wsIGdsLkFSUkFZX0JVRkZFUiwgbWVzaC52ZXJ0ZXhOb3JtYWxzLCAzKTtcbiAgICBtZXNoLnRleHR1cmVCdWZmZXIgPSBfYnVpbGRCdWZmZXIoZ2wsIGdsLkFSUkFZX0JVRkZFUiwgbWVzaC50ZXh0dXJlcywgbWVzaC50ZXh0dXJlU3RyaWRlKTtcbiAgICBtZXNoLnZlcnRleEJ1ZmZlciA9IF9idWlsZEJ1ZmZlcihnbCwgZ2wuQVJSQVlfQlVGRkVSLCBtZXNoLnZlcnRpY2VzLCAzKTtcbiAgICBtZXNoLmluZGV4QnVmZmVyID0gX2J1aWxkQnVmZmVyKGdsLCBnbC5FTEVNRU5UX0FSUkFZX0JVRkZFUiwgbWVzaC5pbmRpY2VzLCAxKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlbGV0ZU1lc2hCdWZmZXJzKGdsLCBtZXNoKSB7XG4gICAgZ2wuZGVsZXRlQnVmZmVyKG1lc2gubm9ybWFsQnVmZmVyKTtcbiAgICBnbC5kZWxldGVCdWZmZXIobWVzaC50ZXh0dXJlQnVmZmVyKTtcbiAgICBnbC5kZWxldGVCdWZmZXIobWVzaC52ZXJ0ZXhCdWZmZXIpO1xuICAgIGdsLmRlbGV0ZUJ1ZmZlcihtZXNoLmluZGV4QnVmZmVyKTtcbn1cblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy91dGlscy5qcyJdLCJzb3VyY2VSb290IjoiIn0=